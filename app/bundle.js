!function(Q){function B(F){if(I[F])return I[F].exports;var i=I[F]={i:F,l:!1,exports:{}};return Q[F].call(i.exports,i,i.exports,B),i.l=!0,i.exports}var I={};B.m=Q,B.c=I,B.d=function(Q,I,F){B.o(Q,I)||Object.defineProperty(Q,I,{configurable:!1,enumerable:!0,get:F})},B.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(I,"a",I),I},B.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},B.p="https://tour.enn-devl.ga/wp-content/themes/touriends/app/",B(B.s=58)}([function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Random utility functions used in the UI-Router code\n *\n * These functions are exported, but are subject to change without notice.\n *\n * @preferred\n * @module common\n */\n/** for typedoc */\nvar predicates_1 = __webpack_require__(1);\nvar hof_1 = __webpack_require__(2);\nvar coreservices_1 = __webpack_require__(3);\nvar w = typeof window === \'undefined\' ? {} : window;\nvar angular = w.angular || {};\nexports.fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexports.toJson = angular.toJson || JSON.stringify.bind(JSON);\nexports.copy = angular.copy || _copy;\nexports.forEach = angular.forEach || _forEach;\nexports.extend = Object.assign || _extend;\nexports.equals = angular.equals || _equals;\nfunction identity(x) {\n    return x;\n}\nexports.identity = identity;\nfunction noop() {}\nexports.noop = noop;\n/**\n * Builds proxy functions on the `to` object which pass through to the `from` object.\n *\n * For each key in `fnNames`, creates a proxy function on the `to` object.\n * The proxy function calls the real function on the `from` object.\n *\n *\n * #### Example:\n * This example creates an new class instance whose functions are prebound to the new\'d object.\n * ```js\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to \'this\',\n *     // then copies them to \'this\'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo \'this\' instance\n * ```\n *\n * #### Example:\n * This example creates a bound version of a service function, and copies it to another object\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to \'this\'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService\'s \'this\'\n * ```\n *\n * @param source A function that returns the source object which contains the original functions to be bound\n * @param target A function that returns the target object which will receive the bound functions\n * @param bind A function that returns the object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the \'from\' object)\n * @param latebind If true, the binding of the function is delayed until the first time it\'s invoked\n */\nfunction createProxyFunctions(source, target, bind, fnNames, latebind) {\n    if (latebind === void 0) {\n        latebind = false;\n    }\n    var bindFunction = function bindFunction(fnName) {\n        return source()[fnName].bind(bind());\n    };\n    var makeLateRebindFn = function makeLateRebindFn(fnName) {\n        return function lateRebindFunction() {\n            target[fnName] = bindFunction(fnName);\n            return target[fnName].apply(null, arguments);\n        };\n    };\n    fnNames = fnNames || Object.keys(source());\n    return fnNames.reduce(function (acc, name) {\n        acc[name] = latebind ? makeLateRebindFn(name) : bindFunction(name);\n        return acc;\n    }, target);\n}\nexports.createProxyFunctions = createProxyFunctions;\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexports.inherit = function (parent, extra) {\n    return exports.extend(Object.create(parent), extra);\n};\n/**\n * Given an arguments object, converts the arguments at index idx and above to an array.\n * This is similar to es6 rest parameters.\n *\n * Optionally, the argument at index idx may itself already be an array.\n *\n * For example,\n * given either:\n *        arguments = [ obj, "foo", "bar" ]\n * or:\n *        arguments = [ obj, ["foo", "bar"] ]\n * then:\n *        restArgs(arguments, 1) == ["foo", "bar"]\n *\n * This allows functions like pick() to be implemented such that it allows either a bunch\n * of string arguments (like es6 rest parameters), or a single array of strings:\n *\n * given:\n *        var obj = { foo: 1, bar: 2, baz: 3 };\n * then:\n *        pick(obj, "foo", "bar");   // returns { foo: 1, bar: 2 }\n *        pick(obj, ["foo", "bar"]); // returns { foo: 1, bar: 2 }\n */\nvar restArgs = function restArgs(args, idx) {\n    if (idx === void 0) {\n        idx = 0;\n    }\n    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n};\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexports.inArray = hof_1.curry(_inArray);\nfunction _inArray(array, obj) {\n    return array.indexOf(obj) !== -1;\n}\nexports._inArray = _inArray;\n/**\n * Given an array, and an item, if the item is found in the array, it removes it (in-place).\n * The same array is returned\n */\nexports.removeFrom = hof_1.curry(_removeFrom);\nfunction _removeFrom(array, obj) {\n    var idx = array.indexOf(obj);\n    if (idx >= 0) array.splice(idx, 1);\n    return array;\n}\nexports._removeFrom = _removeFrom;\n/** pushes a values to an array and returns the value */\nexports.pushTo = hof_1.curry(_pushTo);\nfunction _pushTo(arr, val) {\n    return arr.push(val), val;\n}\nexports._pushTo = _pushTo;\n/** Given an array of (deregistration) functions, calls all functions and removes each one from the source array */\nexports.deregAll = function (functions) {\n    return functions.slice().forEach(function (fn) {\n        typeof fn === \'function\' && fn();\n        exports.removeFrom(functions, fn);\n    });\n};\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nfunction defaults(opts) {\n    var defaultsList = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        defaultsList[_i - 1] = arguments[_i];\n    }\n    var _defaultsList = defaultsList.concat({}).reverse();\n    var defaultVals = exports.extend.apply(null, _defaultsList);\n    return exports.extend({}, defaultVals, pick(opts || {}, Object.keys(defaultVals)));\n}\nexports.defaults = defaults;\n/** Reduce function that merges each element of the list into a single object, using extend */\nexports.mergeR = function (memo, item) {\n    return exports.extend(memo, item);\n};\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nfunction ancestors(first, second) {\n    var path = [];\n    for (var n in first.path) {\n        if (first.path[n] !== second.path[n]) break;\n        path.push(first.path[n]);\n    }\n    return path;\n}\nexports.ancestors = ancestors;\n/**\n * Return a copy of the object only containing the whitelisted properties.\n *\n * #### Example:\n * ```\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, [\'a\', \'b\']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nfunction pick(obj, propNames) {\n    var objCopy = {};\n    for (var prop_1 in obj) {\n        if (propNames.indexOf(prop_1) !== -1) {\n            objCopy[prop_1] = obj[prop_1];\n        }\n    }\n    return objCopy;\n}\nexports.pick = pick;\n/**\n * Return a copy of the object omitting the blacklisted properties.\n *\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, [\'a\', \'b\']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nfunction omit(obj, propNames) {\n    return Object.keys(obj).filter(hof_1.not(exports.inArray(propNames))).reduce(function (acc, key) {\n        return acc[key] = obj[key], acc;\n    }, {});\n}\nexports.omit = omit;\n/**\n * Maps an array, or object to a property (by name)\n */\nfunction pluck(collection, propName) {\n    return map(collection, hof_1.prop(propName));\n}\nexports.pluck = pluck;\n/** Filters an Array or an Object\'s properties based on a predicate */\nfunction filter(collection, callback) {\n    var arr = predicates_1.isArray(collection),\n        result = arr ? [] : {};\n    var accept = arr ? function (x) {\n        return result.push(x);\n    } : function (x, key) {\n        return result[key] = x;\n    };\n    exports.forEach(collection, function (item, i) {\n        if (callback(item, i)) accept(item, i);\n    });\n    return result;\n}\nexports.filter = filter;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nfunction find(collection, callback) {\n    var result;\n    exports.forEach(collection, function (item, i) {\n        if (result) return;\n        if (callback(item, i)) result = item;\n    });\n    return result;\n}\nexports.find = find;\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexports.mapObj = map;\n/** Maps an array or object properties using a callback function */\nfunction map(collection, callback) {\n    var result = predicates_1.isArray(collection) ? [] : {};\n    exports.forEach(collection, function (item, i) {\n        return result[i] = callback(item, i);\n    });\n    return result;\n}\nexports.map = map;\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexports.values = function (obj) {\n    return Object.keys(obj).map(function (key) {\n        return obj[key];\n    });\n};\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, "hello world"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexports.allTrueR = function (memo, elem) {\n    return memo && elem;\n};\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push("hello world");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexports.anyTrueR = function (memo, elem) {\n    return memo || elem;\n};\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];\n * input.reduce(unnestR, []) // [ "a", "b", "c", "d", [ "double, "nested" ] ]\n * ```\n */\nexports.unnestR = function (memo, elem) {\n    return memo.concat(elem);\n};\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];\n * input.reduce(unnestR, []) // [ "a", "b", "c", "d", "double, "nested" ]\n * ```\n */\nexports.flattenR = function (memo, elem) {\n    return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem);\n};\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n */\nfunction pushR(arr, obj) {\n    arr.push(obj);\n    return arr;\n}\nexports.pushR = pushR;\n/** Reduce function that filters out duplicates */\nexports.uniqR = function (acc, token) {\n    return exports.inArray(acc, token) ? acc : pushR(acc, token);\n};\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];\n * unnest(input) // [ "a", "b", "c", "d", [ "double, "nested" ] ]\n * ```\n */\nexports.unnest = function (arr) {\n    return arr.reduce(exports.unnestR, []);\n};\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];\n * flatten(input) // [ "a", "b", "c", "d", "double, "nested" ]\n * ```\n */\nexports.flatten = function (arr) {\n    return arr.reduce(exports.flattenR, []);\n};\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === \'number\';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, "5" ];\n * oneString.filter(assertPredicate(isNumber, "Not all numbers")); // throws Error(""Not all numbers"");\n * ```\n */\nexports.assertPredicate = assertFn;\n/**\n * Given a .map function, builds a .map function which throws an error if any mapped elements do not pass a truthyness test.\n * @example\n * ```\n *\n * var data = { foo: 1, bar: 2 };\n *\n * let keys = [ \'foo\', \'bar\' ]\n * let values = keys.map(assertMap(key => data[key], "Key not found"));\n * // values is [1, 2]\n *\n * let keys = [ \'foo\', \'bar\', \'baz\' ]\n * let values = keys.map(assertMap(key => data[key], "Key not found"));\n * // throws Error("Key not found")\n * ```\n */\nexports.assertMap = assertFn;\nfunction assertFn(predicateOrMap, errMsg) {\n    if (errMsg === void 0) {\n        errMsg = "assert failure";\n    }\n    return function (obj) {\n        var result = predicateOrMap(obj);\n        if (!result) {\n            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);\n        }\n        return result;\n    };\n}\nexports.assertFn = assertFn;\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: "FOO", bar: "BAR }) // [ [ "foo", "FOO" ], [ "bar": "BAR" ] ]\n * ```\n */\nexports.pairs = function (obj) {\n    return Object.keys(obj).map(function (key) {\n        return [key, obj[key]];\n    });\n};\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nfunction arrayTuples() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 0) return [];\n    var maxArrayLen = args.reduce(function (min, arr) {\n        return Math.min(arr.length, min);\n    }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n    var i,\n        result = [];\n    for (i = 0; i < maxArrayLen; i++) {\n        // This is a hot function\n        // Unroll when there are 1-4 arguments\n        switch (args.length) {\n            case 1:\n                result.push([args[0][i]]);\n                break;\n            case 2:\n                result.push([args[0][i], args[1][i]]);\n                break;\n            case 3:\n                result.push([args[0][i], args[1][i], args[2][i]]);\n                break;\n            case 4:\n                result.push([args[0][i], args[1][i], args[2][i], args[3][i]]);\n                break;\n            default:\n                result.push(args.map(function (array) {\n                    return array[i];\n                }));\n                break;\n        }\n    }\n    return result;\n}\nexports.arrayTuples = arrayTuples;\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ ["fookey", "fooval"], ["barkey", "barval"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: "fooval", barkey: "barval" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: "fooval", barkey: "barval" }\n * ```\n */\nfunction applyPairs(memo, keyValTuple) {\n    var key, value;\n    if (predicates_1.isArray(keyValTuple)) key = keyValTuple[0], value = keyValTuple[1];\n    if (!predicates_1.isString(key)) throw new Error("invalid parameters to applyPairs");\n    memo[key] = value;\n    return memo;\n}\nexports.applyPairs = applyPairs;\n/** Get the last element of an array */\nfunction tail(arr) {\n    return arr.length && arr[arr.length - 1] || undefined;\n}\nexports.tail = tail;\n/**\n * shallow copy from src to dest\n *\n * note: This is a shallow copy, while angular.copy is a deep copy.\n * ui-router uses `copy` only to make copies of state parameters.\n */\nfunction _copy(src, dest) {\n    if (dest) Object.keys(dest).forEach(function (key) {\n        return delete dest[key];\n    });\n    if (!dest) dest = {};\n    return exports.extend(dest, src);\n}\n/** Naive forEach implementation works with Objects or Arrays */\nfunction _forEach(obj, cb, _this) {\n    if (predicates_1.isArray(obj)) return obj.forEach(cb, _this);\n    Object.keys(obj).forEach(function (key) {\n        return cb(obj[key], key);\n    });\n}\nfunction _extend(toObj) {\n    for (var i = 1; i < arguments.length; i++) {\n        var obj = arguments[i];\n        if (!obj) continue;\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; j++) {\n            toObj[keys[j]] = obj[keys[j]];\n        }\n    }\n    return toObj;\n}\nexports._extend = _extend;\nfunction _equals(o1, o2) {\n    if (o1 === o2) return true;\n    if (o1 === null || o2 === null) return false;\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n    var t1 = typeof o1 === "undefined" ? "undefined" : _typeof(o1),\n        t2 = typeof o2 === "undefined" ? "undefined" : _typeof(o2);\n    if (t1 !== t2 || t1 !== \'object\') return false;\n    var tup = [o1, o2];\n    if (hof_1.all(predicates_1.isArray)(tup)) return _arraysEq(o1, o2);\n    if (hof_1.all(predicates_1.isDate)(tup)) return o1.getTime() === o2.getTime();\n    if (hof_1.all(predicates_1.isRegExp)(tup)) return o1.toString() === o2.toString();\n    if (hof_1.all(predicates_1.isFunction)(tup)) return true; // meh\n    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];\n    if (predicates.map(hof_1.any).reduce(function (b, fn) {\n        return b || !!fn(tup);\n    }, false)) return false;\n    var key,\n        keys = {};\n    for (key in o1) {\n        if (!_equals(o1[key], o2[key])) return false;\n        keys[key] = true;\n    }\n    for (key in o2) {\n        if (!keys[key]) return false;\n    }\n    return true;\n}\nfunction _arraysEq(a1, a2) {\n    if (a1.length !== a2.length) return false;\n    return arrayTuples(a1, a2).reduce(function (b, t) {\n        return b && _equals(t[0], t[1]);\n    }, true);\n}\n/**\n * Create a sort function\n *\n * Creates a sort function which sorts by a numeric property.\n *\n * The `propFn` should return the property as a number which can be sorted.\n *\n * #### Example:\n * This example returns the `priority` prop.\n * ```js\n * var sortfn = sortBy(obj => obj.priority)\n * // equivalent to:\n * var longhandSortFn = (a, b) => a.priority - b.priority;\n * ```\n *\n * #### Example:\n * This example uses [[prop]]\n * ```js\n * var sortfn = sortBy(prop(\'priority\'))\n * ```\n *\n * The `checkFn` can be used to exclude objects from sorting.\n *\n * #### Example:\n * This example only sorts objects with type === \'FOO\'\n * ```js\n * var sortfn = sortBy(prop(\'priority\'), propEq(\'type\', \'FOO\'))\n * ```\n *\n * @param propFn a function that returns the property (as a number)\n * @param checkFn a predicate\n *\n * @return a sort function like: `(a, b) => (checkFn(a) && checkFn(b)) ? propFn(a) - propFn(b) : 0`\n */\nexports.sortBy = function (propFn, checkFn) {\n    if (checkFn === void 0) {\n        checkFn = hof_1.val(true);\n    }\n    return function (a, b) {\n        return checkFn(a) && checkFn(b) ? propFn(a) - propFn(b) : 0;\n    };\n};\n/**\n * Composes a list of sort functions\n *\n * Creates a sort function composed of multiple sort functions.\n * Each sort function is invoked in series.\n * The first sort function to return non-zero "wins".\n *\n * @param sortFns list of sort functions\n */\nexports.composeSort = function () {\n    var sortFns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sortFns[_i] = arguments[_i];\n    }\n    return function composedSort(a, b) {\n        return sortFns.reduce(function (prev, fn) {\n            return prev || fn(a, b);\n        }, 0);\n    };\n};\n// issue #2676\nexports.silenceUncaughtInPromise = function (promise) {\n    return promise.catch(function (e) {\n        return 0;\n    }) && promise;\n};\nexports.silentRejection = function (error) {\n    return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));\n};\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/** Predicates\n *\n * These predicates return true/false based on the input.\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_predicates\n */\n/** */\nvar hof_1 = __webpack_require__(2);\nvar stateObject_1 = __webpack_require__(22);\nvar toStr = Object.prototype.toString;\nvar tis = function tis(t) {\n  return function (x) {\n    return (typeof x === "undefined" ? "undefined" : _typeof(x)) === t;\n  };\n};\nexports.isUndefined = tis(\'undefined\');\nexports.isDefined = hof_1.not(exports.isUndefined);\nexports.isNull = function (o) {\n  return o === null;\n};\nexports.isNullOrUndefined = hof_1.or(exports.isNull, exports.isUndefined);\nexports.isFunction = tis(\'function\');\nexports.isNumber = tis(\'number\');\nexports.isString = tis(\'string\');\nexports.isObject = function (x) {\n  return x !== null && (typeof x === "undefined" ? "undefined" : _typeof(x)) === \'object\';\n};\nexports.isArray = Array.isArray;\nexports.isDate = function (x) {\n  return toStr.call(x) === \'[object Date]\';\n};\nexports.isRegExp = function (x) {\n  return toStr.call(x) === \'[object RegExp]\';\n};\nexports.isState = stateObject_1.StateObject.isState;\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is "injectable" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nfunction isInjectable(val) {\n  if (exports.isArray(val) && val.length) {\n    var head = val.slice(0, -1),\n        tail = val.slice(-1);\n    return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);\n  }\n  return exports.isFunction(val);\n}\nexports.isInjectable = isInjectable;\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it\'s an object, and it has a `then` property which is a Function\n */\nexports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop(\'then\'), exports.isFunction));\n//# sourceMappingURL=predicates.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2NvbW1vbi9wcmVkaWNhdGVzLmpzP2U3Y2UiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJob2ZfMSIsInJlcXVpcmUiLCJzdGF0ZU9iamVjdF8xIiwidG9TdHIiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInRpcyIsInQiLCJ4IiwiaXNVbmRlZmluZWQiLCJpc0RlZmluZWQiLCJub3QiLCJpc051bGwiLCJvIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJvciIsImlzRnVuY3Rpb24iLCJpc051bWJlciIsImlzU3RyaW5nIiwiaXNPYmplY3QiLCJpc0FycmF5IiwiQXJyYXkiLCJpc0RhdGUiLCJjYWxsIiwiaXNSZWdFeHAiLCJpc1N0YXRlIiwiU3RhdGVPYmplY3QiLCJpc0luamVjdGFibGUiLCJ2YWwiLCJsZW5ndGgiLCJoZWFkIiwic2xpY2UiLCJ0YWlsIiwiZmlsdGVyIiwiaXNQcm9taXNlIiwiYW5kIiwicGlwZSIsInByb3AiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBOzs7Ozs7O0FBT0E7QUFDQSxJQUFJQyxRQUFRLG1CQUFBQyxDQUFRLENBQVIsQ0FBWjtBQUNBLElBQUlDLGdCQUFnQixtQkFBQUQsQ0FBUSxFQUFSLENBQXBCO0FBQ0EsSUFBSUUsUUFBUVAsT0FBT1EsU0FBUCxDQUFpQkMsUUFBN0I7QUFDQSxJQUFJQyxNQUFNLFNBQU5BLEdBQU0sQ0FBVUMsQ0FBVixFQUFhO0FBQUUsU0FBTyxVQUFVQyxDQUFWLEVBQWE7QUFBRSxXQUFPLFFBQVFBLENBQVIseUNBQVFBLENBQVIsT0FBZUQsQ0FBdEI7QUFBMEIsR0FBaEQ7QUFBbUQsQ0FBNUU7QUFDQVQsUUFBUVcsV0FBUixHQUFzQkgsSUFBSSxXQUFKLENBQXRCO0FBQ0FSLFFBQVFZLFNBQVIsR0FBb0JWLE1BQU1XLEdBQU4sQ0FBVWIsUUFBUVcsV0FBbEIsQ0FBcEI7QUFDQVgsUUFBUWMsTUFBUixHQUFpQixVQUFVQyxDQUFWLEVBQWE7QUFBRSxTQUFPQSxNQUFNLElBQWI7QUFBb0IsQ0FBcEQ7QUFDQWYsUUFBUWdCLGlCQUFSLEdBQTRCZCxNQUFNZSxFQUFOLENBQVNqQixRQUFRYyxNQUFqQixFQUF5QmQsUUFBUVcsV0FBakMsQ0FBNUI7QUFDQVgsUUFBUWtCLFVBQVIsR0FBcUJWLElBQUksVUFBSixDQUFyQjtBQUNBUixRQUFRbUIsUUFBUixHQUFtQlgsSUFBSSxRQUFKLENBQW5CO0FBQ0FSLFFBQVFvQixRQUFSLEdBQW1CWixJQUFJLFFBQUosQ0FBbkI7QUFDQVIsUUFBUXFCLFFBQVIsR0FBbUIsVUFBVVgsQ0FBVixFQUFhO0FBQUUsU0FBT0EsTUFBTSxJQUFOLElBQWMsUUFBT0EsQ0FBUCx5Q0FBT0EsQ0FBUCxPQUFhLFFBQWxDO0FBQTZDLENBQS9FO0FBQ0FWLFFBQVFzQixPQUFSLEdBQWtCQyxNQUFNRCxPQUF4QjtBQUNBdEIsUUFBUXdCLE1BQVIsR0FBa0IsVUFBVWQsQ0FBVixFQUFhO0FBQUUsU0FBT0wsTUFBTW9CLElBQU4sQ0FBV2YsQ0FBWCxNQUFrQixlQUF6QjtBQUEyQyxDQUE1RTtBQUNBVixRQUFRMEIsUUFBUixHQUFvQixVQUFVaEIsQ0FBVixFQUFhO0FBQUUsU0FBT0wsTUFBTW9CLElBQU4sQ0FBV2YsQ0FBWCxNQUFrQixpQkFBekI7QUFBNkMsQ0FBaEY7QUFDQVYsUUFBUTJCLE9BQVIsR0FBa0J2QixjQUFjd0IsV0FBZCxDQUEwQkQsT0FBNUM7QUFDQTs7Ozs7O0FBTUEsU0FBU0UsWUFBVCxDQUFzQkMsR0FBdEIsRUFBMkI7QUFDdkIsTUFBSTlCLFFBQVFzQixPQUFSLENBQWdCUSxHQUFoQixLQUF3QkEsSUFBSUMsTUFBaEMsRUFBd0M7QUFDcEMsUUFBSUMsT0FBT0YsSUFBSUcsS0FBSixDQUFVLENBQVYsRUFBYSxDQUFDLENBQWQsQ0FBWDtBQUFBLFFBQTZCQyxPQUFPSixJQUFJRyxLQUFKLENBQVUsQ0FBQyxDQUFYLENBQXBDO0FBQ0EsV0FBTyxFQUFFRCxLQUFLRyxNQUFMLENBQVlqQyxNQUFNVyxHQUFOLENBQVViLFFBQVFvQixRQUFsQixDQUFaLEVBQXlDVyxNQUF6QyxJQUFtREcsS0FBS0MsTUFBTCxDQUFZakMsTUFBTVcsR0FBTixDQUFVYixRQUFRa0IsVUFBbEIsQ0FBWixFQUEyQ2EsTUFBaEcsQ0FBUDtBQUNIO0FBQ0QsU0FBTy9CLFFBQVFrQixVQUFSLENBQW1CWSxHQUFuQixDQUFQO0FBQ0g7QUFDRDlCLFFBQVE2QixZQUFSLEdBQXVCQSxZQUF2QjtBQUNBOzs7OztBQUtBN0IsUUFBUW9DLFNBQVIsR0FBb0JsQyxNQUFNbUMsR0FBTixDQUFVckMsUUFBUXFCLFFBQWxCLEVBQTRCbkIsTUFBTW9DLElBQU4sQ0FBV3BDLE1BQU1xQyxJQUFOLENBQVcsTUFBWCxDQUFYLEVBQStCdkMsUUFBUWtCLFVBQXZDLENBQTVCLENBQXBCO0FBQ0EiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqIFByZWRpY2F0ZXNcbiAqXG4gKiBUaGVzZSBwcmVkaWNhdGVzIHJldHVybiB0cnVlL2ZhbHNlIGJhc2VkIG9uIHRoZSBpbnB1dC5cbiAqIEFsdGhvdWdoIHRoZXNlIGZ1bmN0aW9ucyBhcmUgZXhwb3J0ZWQsIHRoZXkgYXJlIHN1YmplY3QgdG8gY2hhbmdlIHdpdGhvdXQgbm90aWNlLlxuICpcbiAqIEBtb2R1bGUgY29tbW9uX3ByZWRpY2F0ZXNcbiAqL1xuLyoqICovXG52YXIgaG9mXzEgPSByZXF1aXJlKFwiLi9ob2ZcIik7XG52YXIgc3RhdGVPYmplY3RfMSA9IHJlcXVpcmUoXCIuLi9zdGF0ZS9zdGF0ZU9iamVjdFwiKTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgdGlzID0gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIGZ1bmN0aW9uICh4KSB7IHJldHVybiB0eXBlb2YgKHgpID09PSB0OyB9OyB9O1xuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IHRpcygndW5kZWZpbmVkJyk7XG5leHBvcnRzLmlzRGVmaW5lZCA9IGhvZl8xLm5vdChleHBvcnRzLmlzVW5kZWZpbmVkKTtcbmV4cG9ydHMuaXNOdWxsID0gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gPT09IG51bGw7IH07XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaG9mXzEub3IoZXhwb3J0cy5pc051bGwsIGV4cG9ydHMuaXNVbmRlZmluZWQpO1xuZXhwb3J0cy5pc0Z1bmN0aW9uID0gdGlzKCdmdW5jdGlvbicpO1xuZXhwb3J0cy5pc051bWJlciA9IHRpcygnbnVtYmVyJyk7XG5leHBvcnRzLmlzU3RyaW5nID0gdGlzKCdzdHJpbmcnKTtcbmV4cG9ydHMuaXNPYmplY3QgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAhPT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7IH07XG5leHBvcnRzLmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuZXhwb3J0cy5pc0RhdGUgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHRvU3RyLmNhbGwoeCkgPT09ICdbb2JqZWN0IERhdGVdJzsgfSk7XG5leHBvcnRzLmlzUmVnRXhwID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB0b1N0ci5jYWxsKHgpID09PSAnW29iamVjdCBSZWdFeHBdJzsgfSk7XG5leHBvcnRzLmlzU3RhdGUgPSBzdGF0ZU9iamVjdF8xLlN0YXRlT2JqZWN0LmlzU3RhdGU7XG4vKipcbiAqIFByZWRpY2F0ZSB3aGljaCBjaGVja3MgaWYgYSB2YWx1ZSBpcyBpbmplY3RhYmxlXG4gKlxuICogQSB2YWx1ZSBpcyBcImluamVjdGFibGVcIiBpZiBpdCBpcyBhIGZ1bmN0aW9uLCBvciBpZiBpdCBpcyBhbiBuZzEgYXJyYXktbm90YXRpb24tc3R5bGUgYXJyYXlcbiAqIHdoZXJlIGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIGFycmF5IGFyZSBTdHJpbmdzLCBleGNlcHQgdGhlIGxhc3Qgb25lLCB3aGljaCBpcyBhIEZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIGlzSW5qZWN0YWJsZSh2YWwpIHtcbiAgICBpZiAoZXhwb3J0cy5pc0FycmF5KHZhbCkgJiYgdmFsLmxlbmd0aCkge1xuICAgICAgICB2YXIgaGVhZCA9IHZhbC5zbGljZSgwLCAtMSksIHRhaWwgPSB2YWwuc2xpY2UoLTEpO1xuICAgICAgICByZXR1cm4gIShoZWFkLmZpbHRlcihob2ZfMS5ub3QoZXhwb3J0cy5pc1N0cmluZykpLmxlbmd0aCB8fCB0YWlsLmZpbHRlcihob2ZfMS5ub3QoZXhwb3J0cy5pc0Z1bmN0aW9uKSkubGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cG9ydHMuaXNGdW5jdGlvbih2YWwpO1xufVxuZXhwb3J0cy5pc0luamVjdGFibGUgPSBpc0luamVjdGFibGU7XG4vKipcbiAqIFByZWRpY2F0ZSB3aGljaCBjaGVja3MgaWYgYSB2YWx1ZSBsb29rcyBsaWtlIGEgUHJvbWlzZVxuICpcbiAqIEl0IGlzIHByb2JhYmx5IGEgUHJvbWlzZSBpZiBpdCdzIGFuIG9iamVjdCwgYW5kIGl0IGhhcyBhIGB0aGVuYCBwcm9wZXJ0eSB3aGljaCBpcyBhIEZ1bmN0aW9uXG4gKi9cbmV4cG9ydHMuaXNQcm9taXNlID0gaG9mXzEuYW5kKGV4cG9ydHMuaXNPYmplY3QsIGhvZl8xLnBpcGUoaG9mXzEucHJvcCgndGhlbicpLCBleHBvcnRzLmlzRnVuY3Rpb24pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZWRpY2F0ZXMuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi9jb21tb24vcHJlZGljYXRlcy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * Higher order functions\n *\n * These utility functions are exported, but are subject to change without notice.\n *\n * @module common_hof\n */ /** */\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried "copy" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nfunction curry(fn) {\n    var initial_args = [].slice.apply(arguments, [1]);\n    var func_args_length = fn.length;\n    function curried(args) {\n        if (args.length >= func_args_length) return fn.apply(null, args);\n        return function () {\n            return curried(args.concat([].slice.apply(arguments)));\n        };\n    }\n    return curried(initial_args);\n}\nexports.curry = curry;\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nfunction compose() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n        var i = start,\n            result = args[start].apply(this, arguments);\n        while (i--) {\n            result = args[i].call(this, result);\n        }return result;\n    };\n}\nexports.compose = compose;\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nfunction pipe() {\n    var funcs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        funcs[_i] = arguments[_i];\n    }\n    return compose.apply(null, [].slice.call(arguments).reverse());\n}\nexports.pipe = pipe;\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: "blarg" };\n * let getName = prop("name");\n * getName(obj) === "blarg"\n */\nexports.prop = function (name) {\n    return function (obj) {\n        return obj && obj[name];\n    };\n};\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: "blarg" };\n * let getName = propEq("name", "blarg");\n * getName(obj) === true\n */\nexports.propEq = curry(function (name, val, obj) {\n    return obj && obj[name] === val;\n});\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: "blarg" }, };\n * let getName = prop("nestedObj.name");\n * getName(obj) === "blarg"\n * let propNotFound = prop("this.property.doesnt.exist");\n * propNotFound(obj) === undefined\n */\nexports.parse = function (name) {\n    return pipe.apply(null, name.split(".").map(exports.prop));\n};\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexports.not = function (fn) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return !fn.apply(null, args);\n    };\n};\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nfunction and(fn1, fn2) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return fn1.apply(null, args) && fn2.apply(null, args);\n    };\n}\nexports.and = and;\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nfunction or(fn1, fn2) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return fn1.apply(null, args) || fn2.apply(null, args);\n    };\n}\nexports.or = or;\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexports.all = function (fn1) {\n    return function (arr) {\n        return arr.reduce(function (b, x) {\n            return b && !!fn1(x);\n        }, true);\n    };\n};\nexports.any = function (fn1) {\n    return function (arr) {\n        return arr.reduce(function (b, x) {\n            return b || !!fn1(x);\n        }, false);\n    };\n};\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexports.is = function (ctor) {\n    return function (obj) {\n        return obj != null && obj.constructor === ctor || obj instanceof ctor;\n    };\n};\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexports.eq = function (val) {\n    return function (other) {\n        return val === other;\n    };\n};\n/** Given a value, returns a function which returns the value */\nexports.val = function (v) {\n    return function () {\n        return v;\n    };\n};\nfunction invoke(fnName, args) {\n    return function (obj) {\n        return obj[fnName].apply(obj, args);\n    };\n}\nexports.invoke = invoke;\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here\'s a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate "isNumber", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That\'s a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // \'notdefined\'\n * console.log(descriptionOf(55)); // \'(55) That\'s a number!\'\n * console.log(descriptionOf("foo")); // \'Here\'s your string foo\'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nfunction pattern(struct) {\n    return function (x) {\n        for (var i = 0; i < struct.length; i++) {\n            if (struct[i][0](x)) return struct[i][1](x);\n        }\n    };\n}\nexports.pattern = pattern;\n//# sourceMappingURL=hof.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\nexports.notImplemented = function (fnname) {\n    return function () {\n        throw new Error(fnname + "(): No coreservices implementation for UI-Router is loaded.");\n    };\n};\nvar services = {\n    $q: undefined,\n    $injector: undefined\n};\nexports.services = services;\n//# sourceMappingURL=coreservices.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2NvbW1vbi9jb3Jlc2VydmljZXMuanM/MmQyMyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm5vdEltcGxlbWVudGVkIiwiZm5uYW1lIiwiRXJyb3IiLCJzZXJ2aWNlcyIsIiRxIiwidW5kZWZpbmVkIiwiJGluamVjdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0FELFFBQVFFLGNBQVIsR0FBeUIsVUFBVUMsTUFBVixFQUFrQjtBQUFFLFdBQU8sWUFBWTtBQUM1RCxjQUFNLElBQUlDLEtBQUosQ0FBVUQsU0FBUyw2REFBbkIsQ0FBTjtBQUNILEtBRjRDO0FBRXpDLENBRko7QUFHQSxJQUFJRSxXQUFXO0FBQ1hDLFFBQUlDLFNBRE87QUFFWEMsZUFBV0Q7QUFGQSxDQUFmO0FBSUFQLFFBQVFLLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ub3RJbXBsZW1lbnRlZCA9IGZ1bmN0aW9uIChmbm5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZm5uYW1lICsgXCIoKTogTm8gY29yZXNlcnZpY2VzIGltcGxlbWVudGF0aW9uIGZvciBVSS1Sb3V0ZXIgaXMgbG9hZGVkLlwiKTtcbn07IH07XG52YXIgc2VydmljZXMgPSB7XG4gICAgJHE6IHVuZGVmaW5lZCxcbiAgICAkaW5qZWN0b3I6IHVuZGVmaW5lZCxcbn07XG5leHBvcnRzLnNlcnZpY2VzID0gc2VydmljZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3Jlc2VydmljZXMuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi9jb21tb24vY29yZXNlcnZpY2VzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * @coreapi\n * @module common\n */ /** */\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n__export(__webpack_require__(15));\n__export(__webpack_require__(60));\n__export(__webpack_require__(61));\n__export(__webpack_require__(62));\n__export(__webpack_require__(63));\n__export(__webpack_require__(73));\n__export(__webpack_require__(74));\n__export(__webpack_require__(75));\n__export(__webpack_require__(44));\n__export(__webpack_require__(39));\n__export(__webpack_require__(76));\n__export(__webpack_require__(79));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2luZGV4LmpzP2EwZmYiXSwibmFtZXMiOlsiX19leHBvcnQiLCJtIiwicCIsImV4cG9ydHMiLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7SUFHSTs7QUFDSixTQUFTQSxRQUFULENBQWtCQyxDQUFsQixFQUFxQjtBQUNqQixPQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZDtBQUFpQixRQUFJLENBQUNFLFFBQVFDLGNBQVIsQ0FBdUJGLENBQXZCLENBQUwsRUFBZ0NDLFFBQVFELENBQVIsSUFBYUQsRUFBRUMsQ0FBRixDQUFiO0FBQWpEO0FBQ0g7QUFDREcsT0FBT0MsY0FBUCxDQUFzQkgsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUksT0FBTyxJQUFULEVBQTdDO0FBQ0FQLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0EiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAY29yZWFwaVxuICogQG1vZHVsZSBjb21tb25cbiAqLyAvKiogKi9cbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9jb21tb24vaW5kZXhcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vcGFyYW1zL2luZGV4XCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3BhdGgvaW5kZXhcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vcmVzb2x2ZS9pbmRleFwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zdGF0ZS9pbmRleFwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi90cmFuc2l0aW9uL2luZGV4XCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3VybC9pbmRleFwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi92aWV3L2luZGV4XCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2dsb2JhbHNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vcm91dGVyXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3ZhbmlsbGFcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vaW50ZXJmYWNlXCIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_strings\n */ /** */\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar predicates_1 = __webpack_require__(1);\nvar rejectFactory_1 = __webpack_require__(11);\nvar common_1 = __webpack_require__(0);\nvar hof_1 = __webpack_require__(2);\nvar transition_1 = __webpack_require__(17);\nvar resolvable_1 = __webpack_require__(13);\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots ("...").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nfunction maxLength(max, str) {\n    if (str.length <= max) return str;\n    return str.substr(0, max - 3) + "...";\n}\nexports.maxLength = maxLength;\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nfunction padString(length, str) {\n    while (str.length < length) {\n        str += " ";\n    }return str;\n}\nexports.padString = padString;\nfunction kebobString(camelCase) {\n    return camelCase.replace(/^([A-Z])/, function ($1) {\n        return $1.toLowerCase();\n    }) // replace first char\n    .replace(/([A-Z])/g, function ($1) {\n        return "-" + $1.toLowerCase();\n    }); // replace rest\n}\nexports.kebobString = kebobString;\nfunction _toJson(obj) {\n    return JSON.stringify(obj);\n}\nfunction _fromJson(json) {\n    return predicates_1.isString(json) ? JSON.parse(json) : json;\n}\nfunction promiseToString(p) {\n    return "Promise(" + JSON.stringify(p) + ")";\n}\nfunction functionToString(fn) {\n    var fnStr = fnToString(fn);\n    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n    var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n    var fnName = fn[\'name\'] || "";\n    if (fnName && toStr.match(/function \\(/)) {\n        return \'function \' + fnName + toStr.substr(9);\n    }\n    return toStr;\n}\nexports.functionToString = functionToString;\nfunction fnToString(fn) {\n    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;\n    return _fn && _fn.toString() || "undefined";\n}\nexports.fnToString = fnToString;\nvar stringifyPatternFn = null;\nvar stringifyPattern = function stringifyPattern(value) {\n    var isRejection = rejectFactory_1.Rejection.isRejectionPromise;\n    stringifyPatternFn = stringifyPatternFn || hof_1.pattern([[hof_1.not(predicates_1.isDefined), hof_1.val("undefined")], [predicates_1.isNull, hof_1.val("null")], [predicates_1.isPromise, hof_1.val("[Promise]")], [isRejection, function (x) {\n        return x._transitionRejection.toString();\n    }], [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke("toString")], [hof_1.is(transition_1.Transition), hof_1.invoke("toString")], [hof_1.is(resolvable_1.Resolvable), hof_1.invoke("toString")], [predicates_1.isInjectable, functionToString], [hof_1.val(true), common_1.identity]]);\n    return stringifyPatternFn(value);\n};\nfunction stringify(o) {\n    var seen = [];\n    function format(val) {\n        if (predicates_1.isObject(val)) {\n            if (seen.indexOf(val) !== -1) return \'[circular ref]\';\n            seen.push(val);\n        }\n        return stringifyPattern(val);\n    }\n    return JSON.stringify(o, function (key, val) {\n        return format(val);\n    }).replace(/\\\\"/g, \'"\');\n}\nexports.stringify = stringify;\n/** Returns a function that splits a string on a character or substring */\nexports.beforeAfterSubstr = function (char) {\n    return function (str) {\n        if (!str) return ["", ""];\n        var idx = str.indexOf(char);\n        if (idx === -1) return [str, ""];\n        return [str.substr(0, idx), str.substr(idx + 1)];\n    };\n};\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n *\n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim(\'/\');\n * splitOnSlashes("/foo"); // ["/", "foo"]\n * splitOnSlashes("/foo/"); // ["/", "foo", "/"]\n * ```\n */\nfunction splitOnDelim(delim) {\n    var re = new RegExp("(" + delim + ")", "g");\n    return function (str) {\n        return str.split(re).filter(common_1.identity);\n    };\n}\nexports.splitOnDelim = splitOnDelim;\n;\n/**\n * Reduce fn that joins neighboring strings\n *\n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n *\n * #### Example:\n * ```js\n * let arr = ["foo", "bar", 1, "baz", "", "qux" ];\n * arr.reduce(joinNeighborsR, []) // ["foobar", 1, "bazqux" ]\n * ```\n */\nfunction joinNeighborsR(acc, x) {\n    if (predicates_1.isString(common_1.tail(acc)) && predicates_1.isString(x)) return acc.slice(0, -1).concat(common_1.tail(acc) + x);\n    return common_1.pushR(acc, x);\n}\nexports.joinNeighborsR = joinNeighborsR;\n;\n//# sourceMappingURL=strings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * # Transition tracing (debug)\n *\n * Enable transition tracing to print transition information to the console,\n * in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[Trace]] singleton and enable one or more categories.\n *\n * ### ES6\n * ```js\n * import {trace} from "ui-router-ng2"; // or "angular-ui-router"\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * ### CJS\n * ```js\n * let trace = require("angular-ui-router").trace; // or "ui-router-ng2"\n * trace.enable("TRANSITION", "VIEWCONFIG");\n * ```\n *\n * ### Globals\n * ```js\n * let trace = window["angular-ui-router"].trace; // or "ui-router-ng2"\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * ### Angular 1:\n * ```js\n * app.run($trace => $trace.enable());\n * ```\n *\n * @coreapi\n * @module trace\n */ /** for typedoc */\nvar hof_1 = __webpack_require__(2);\nvar predicates_1 = __webpack_require__(1);\nvar strings_1 = __webpack_require__(5);\n/** @hidden */\nfunction uiViewString(viewData) {\n    if (!viewData) return \'ui-view (defunct)\';\n    return "[ui-view#" + viewData.id + " tag " + ("in template from \'" + (viewData.creationContext && viewData.creationContext.name || \'(root)\') + "\' state]: ") + ("fqn: \'" + viewData.fqn + "\', ") + ("name: \'" + viewData.name + "@" + viewData.creationContext + "\')");\n}\n/** @hidden */\nvar viewConfigString = function viewConfigString(viewConfig) {\n    return "[ViewConfig#" + viewConfig.$id + " from \'" + (viewConfig.viewDecl.$context.name || \'(root)\') + "\' state]: target ui-view: \'" + viewConfig.viewDecl.$uiViewName + "@" + viewConfig.viewDecl.$uiViewContextAnchor + "\'";\n};\n/** @hidden */\nfunction normalizedCat(input) {\n    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];\n}\n/**\n * Trace categories Enum\n *\n * Enable or disable a category using [[Trace.enable]] or [[Trace.disable]]\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable("TRANSITION")`\n *\n * `trace.enable(1)`\n */\nvar Category;\n(function (Category) {\n    Category[Category["RESOLVE"] = 0] = "RESOLVE";\n    Category[Category["TRANSITION"] = 1] = "TRANSITION";\n    Category[Category["HOOK"] = 2] = "HOOK";\n    Category[Category["UIVIEW"] = 3] = "UIVIEW";\n    Category[Category["VIEWCONFIG"] = 4] = "VIEWCONFIG";\n})(Category = exports.Category || (exports.Category = {}));\n/** @hidden */var _tid = hof_1.parse("$id");\n/** @hidden */var _rid = hof_1.parse("router.$id");\n/** @hidden */var transLbl = function transLbl(trans) {\n    return "Transition #" + _tid(trans) + "-" + _rid(trans);\n};\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nvar Trace = function () {\n    /** @hidden */\n    function Trace() {\n        /** @hidden */\n        this._enabled = {};\n        this.approximateDigests = 0;\n    }\n    /** @hidden */\n    Trace.prototype._set = function (enabled, categories) {\n        var _this = this;\n        if (!categories.length) {\n            categories = Object.keys(Category).map(function (k) {\n                return parseInt(k, 10);\n            }).filter(function (k) {\n                return !isNaN(k);\n            }).map(function (key) {\n                return Category[key];\n            });\n        }\n        categories.map(normalizedCat).forEach(function (category) {\n            return _this._enabled[category] = enabled;\n        });\n    };\n    /**\n     * Enables a trace [[Category]]\n     *\n     * ```js\n     * trace.enable("TRANSITION");\n     * ```\n     *\n     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n     *        Also takes strings (category name) or ordinal (category position)\n     */\n    Trace.prototype.enable = function () {\n        var categories = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            categories[_i] = arguments[_i];\n        }\n        this._set(true, categories);\n    };\n    /**\n     * Disables a trace [[Category]]\n     *\n     * ```js\n     * trace.disable("VIEWCONFIG");\n     * ```\n     *\n     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n     *        Also takes strings (category name) or ordinal (category position)\n     */\n    Trace.prototype.disable = function () {\n        var categories = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            categories[_i] = arguments[_i];\n        }\n        this._set(false, categories);\n    };\n    /**\n     * Retrieves the enabled stateus of a [[Category]]\n     *\n     * ```js\n     * trace.enabled("VIEWCONFIG"); // true or false\n     * ```\n     *\n     * @returns boolean true if the category is enabled\n     */\n    Trace.prototype.enabled = function (category) {\n        return !!this._enabled[normalizedCat(category)];\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceTransitionStart = function (trans) {\n        if (!this.enabled(Category.TRANSITION)) return;\n        console.log(transLbl(trans) + ": Started  -> " + strings_1.stringify(trans));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceTransitionIgnored = function (trans) {\n        if (!this.enabled(Category.TRANSITION)) return;\n        console.log(transLbl(trans) + ": Ignored  <> " + strings_1.stringify(trans));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceHookInvocation = function (step, trans, options) {\n        if (!this.enabled(Category.HOOK)) return;\n        var event = hof_1.parse("traceData.hookType")(options) || "internal",\n            context = hof_1.parse("traceData.context.state.name")(options) || hof_1.parse("traceData.context")(options) || "unknown",\n            name = strings_1.functionToString(step.registeredHook.callback);\n        console.log(transLbl(trans) + ":   Hook -> " + event + " context: " + context + ", " + strings_1.maxLength(200, name));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceHookResult = function (hookResult, trans, transitionOptions) {\n        if (!this.enabled(Category.HOOK)) return;\n        console.log(transLbl(trans) + ":   <- Hook returned: " + strings_1.maxLength(200, strings_1.stringify(hookResult)));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceResolvePath = function (path, when, trans) {\n        if (!this.enabled(Category.RESOLVE)) return;\n        console.log(transLbl(trans) + ":         Resolving " + path + " (" + when + ")");\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {\n        if (!this.enabled(Category.RESOLVE)) return;\n        console.log(transLbl(trans) + ":               <- Resolved  " + resolvable + " to: " + strings_1.maxLength(200, strings_1.stringify(resolvable.data)));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceError = function (reason, trans) {\n        if (!this.enabled(Category.TRANSITION)) return;\n        console.log(transLbl(trans) + ": <- Rejected " + strings_1.stringify(trans) + ", reason: " + reason);\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceSuccess = function (finalState, trans) {\n        if (!this.enabled(Category.TRANSITION)) return;\n        console.log(transLbl(trans) + ": <- Success  " + strings_1.stringify(trans) + ", final state: " + finalState.name);\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {\n        if (extra === void 0) {\n            extra = "";\n        }\n        if (!this.enabled(Category.UIVIEW)) return;\n        console.log("ui-view: " + strings_1.padString(30, event) + " " + uiViewString(viewData) + extra);\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {\n        if (!this.enabled(Category.UIVIEW)) return;\n        this.traceUIViewEvent("Updating", viewData, " with ViewConfig from context=\'" + context + "\'");\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceUIViewFill = function (viewData, html) {\n        if (!this.enabled(Category.UIVIEW)) return;\n        this.traceUIViewEvent("Fill", viewData, " with: " + strings_1.maxLength(200, html));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {\n        if (!this.enabled(Category.VIEWCONFIG)) return;\n        console.log("VIEWCONFIG: " + event + " " + viewConfigString(viewConfig));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {\n        if (!this.enabled(Category.VIEWCONFIG)) return;\n        console.log("VIEWCONFIG: " + event + " " + uiViewString(viewData));\n    };\n    return Trace;\n}();\nexports.Trace = Trace;\n/**\n * The [[Trace]] singleton\n *\n * #### Example:\n * ```js\n * import {trace} from "angular-ui-router";\n * trace.enable(1, 5);\n * ```\n */\nvar trace = new Trace();\nexports.trace = trace;\n//# sourceMappingURL=trace.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n')},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * @coreapi\n * @module state\n */ /** for typedoc */\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\n/**\n * Encapsulate the target (destination) state/params/options of a [[Transition]].\n *\n * This class is frequently used to redirect a transition to a new destination.\n *\n * See:\n *\n * - [[HookResult]]\n * - [[TransitionHookFn]]\n * - [[TransitionService.onStart]]\n *\n * To create a `TargetState`, use [[StateService.target]].\n *\n * ---\n *\n * This class wraps:\n *\n * 1) an identifier for a state\n * 2) a set of parameters\n * 3) and transition options\n * 4) the registered state object (the [[StateDeclaration]])\n *\n * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n * The `TargetState` class normalizes those options.\n *\n * A `TargetState` may be valid (the state being targeted exists in the registry)\n * or invalid (the state being targeted is not registered).\n */\nvar TargetState = function () {\n    /**\n     * The TargetState constructor\n     *\n     * Note: Do not construct a `TargetState` manually.\n     * To create a `TargetState`, use the [[StateService.target]] factory method.\n     *\n     * @param _identifier An identifier for a state.\n     *    Either a fully-qualified state name, or the object used to define the state.\n     * @param _definition The internal state representation, if exists.\n     * @param _params Parameters for the target state\n     * @param _options Transition options.\n     *\n     * @internalapi\n     */\n    function TargetState(_identifier, _definition, _params, _options) {\n        if (_options === void 0) {\n            _options = {};\n        }\n        this._identifier = _identifier;\n        this._definition = _definition;\n        this._options = _options;\n        this._params = _params || {};\n    }\n    /** The name of the state this object targets */\n    TargetState.prototype.name = function () {\n        return this._definition && this._definition.name || this._identifier;\n    };\n    /** The identifier used when creating this TargetState */\n    TargetState.prototype.identifier = function () {\n        return this._identifier;\n    };\n    /** The target parameter values */\n    TargetState.prototype.params = function () {\n        return this._params;\n    };\n    /** The internal state object (if it was found) */\n    TargetState.prototype.$state = function () {\n        return this._definition;\n    };\n    /** The internal state declaration (if it was found) */\n    TargetState.prototype.state = function () {\n        return this._definition && this._definition.self;\n    };\n    /** The target options */\n    TargetState.prototype.options = function () {\n        return this._options;\n    };\n    /** True if the target state was found */\n    TargetState.prototype.exists = function () {\n        return !!(this._definition && this._definition.self);\n    };\n    /** True if the object is valid */\n    TargetState.prototype.valid = function () {\n        return !this.error();\n    };\n    /** If the object is invalid, returns the reason why */\n    TargetState.prototype.error = function () {\n        var base = this.options().relative;\n        if (!this._definition && !!base) {\n            var stateName = base.name ? base.name : base;\n            return "Could not resolve \'" + this.name() + "\' from state \'" + stateName + "\'";\n        }\n        if (!this._definition) return "No such state \'" + this.name() + "\'";\n        if (!this._definition.self) return "State \'" + this.name() + "\' has an invalid definition";\n    };\n    TargetState.prototype.toString = function () {\n        return "\'" + this.name() + "\'" + common_1.toJson(this.params());\n    };\n    return TargetState;\n}();\n/** Returns true if the object has a state property that might be a state or state name */\nTargetState.isDef = function (obj) {\n    return obj && obj.state && (predicates_1.isString(obj.state) || predicates_1.isString(obj.state.name));\n};\nexports.TargetState = TargetState;\n//# sourceMappingURL=targetState.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar TransitionHookPhase;\n(function (TransitionHookPhase) {\n    TransitionHookPhase[TransitionHookPhase["CREATE"] = 0] = "CREATE";\n    TransitionHookPhase[TransitionHookPhase["BEFORE"] = 1] = "BEFORE";\n    TransitionHookPhase[TransitionHookPhase["RUN"] = 2] = "RUN";\n    TransitionHookPhase[TransitionHookPhase["SUCCESS"] = 3] = "SUCCESS";\n    TransitionHookPhase[TransitionHookPhase["ERROR"] = 4] = "ERROR";\n})(TransitionHookPhase = exports.TransitionHookPhase || (exports.TransitionHookPhase = {}));\nvar TransitionHookScope;\n(function (TransitionHookScope) {\n    TransitionHookScope[TransitionHookScope["TRANSITION"] = 0] = "TRANSITION";\n    TransitionHookScope[TransitionHookScope["STATE"] = 1] = "STATE";\n})(TransitionHookScope = exports.TransitionHookScope || (exports.TransitionHookScope = {}));\n//# sourceMappingURL=interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3RyYW5zaXRpb24vaW50ZXJmYWNlLmpzP2QwMjUiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJUcmFuc2l0aW9uSG9va1BoYXNlIiwiVHJhbnNpdGlvbkhvb2tTY29wZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBLElBQUlDLG1CQUFKO0FBQ0EsQ0FBQyxVQUFVQSxtQkFBVixFQUErQjtBQUM1QkEsd0JBQW9CQSxvQkFBb0IsUUFBcEIsSUFBZ0MsQ0FBcEQsSUFBeUQsUUFBekQ7QUFDQUEsd0JBQW9CQSxvQkFBb0IsUUFBcEIsSUFBZ0MsQ0FBcEQsSUFBeUQsUUFBekQ7QUFDQUEsd0JBQW9CQSxvQkFBb0IsS0FBcEIsSUFBNkIsQ0FBakQsSUFBc0QsS0FBdEQ7QUFDQUEsd0JBQW9CQSxvQkFBb0IsU0FBcEIsSUFBaUMsQ0FBckQsSUFBMEQsU0FBMUQ7QUFDQUEsd0JBQW9CQSxvQkFBb0IsT0FBcEIsSUFBK0IsQ0FBbkQsSUFBd0QsT0FBeEQ7QUFDSCxDQU5ELEVBTUdBLHNCQUFzQkYsUUFBUUUsbUJBQVIsS0FBZ0NGLFFBQVFFLG1CQUFSLEdBQThCLEVBQTlELENBTnpCO0FBT0EsSUFBSUMsbUJBQUo7QUFDQSxDQUFDLFVBQVVBLG1CQUFWLEVBQStCO0FBQzVCQSx3QkFBb0JBLG9CQUFvQixZQUFwQixJQUFvQyxDQUF4RCxJQUE2RCxZQUE3RDtBQUNBQSx3QkFBb0JBLG9CQUFvQixPQUFwQixJQUErQixDQUFuRCxJQUF3RCxPQUF4RDtBQUNILENBSEQsRUFHR0Esc0JBQXNCSCxRQUFRRyxtQkFBUixLQUFnQ0gsUUFBUUcsbUJBQVIsR0FBOEIsRUFBOUQsQ0FIekI7QUFJQSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVHJhbnNpdGlvbkhvb2tQaGFzZTtcbihmdW5jdGlvbiAoVHJhbnNpdGlvbkhvb2tQaGFzZSkge1xuICAgIFRyYW5zaXRpb25Ib29rUGhhc2VbVHJhbnNpdGlvbkhvb2tQaGFzZVtcIkNSRUFURVwiXSA9IDBdID0gXCJDUkVBVEVcIjtcbiAgICBUcmFuc2l0aW9uSG9va1BoYXNlW1RyYW5zaXRpb25Ib29rUGhhc2VbXCJCRUZPUkVcIl0gPSAxXSA9IFwiQkVGT1JFXCI7XG4gICAgVHJhbnNpdGlvbkhvb2tQaGFzZVtUcmFuc2l0aW9uSG9va1BoYXNlW1wiUlVOXCJdID0gMl0gPSBcIlJVTlwiO1xuICAgIFRyYW5zaXRpb25Ib29rUGhhc2VbVHJhbnNpdGlvbkhvb2tQaGFzZVtcIlNVQ0NFU1NcIl0gPSAzXSA9IFwiU1VDQ0VTU1wiO1xuICAgIFRyYW5zaXRpb25Ib29rUGhhc2VbVHJhbnNpdGlvbkhvb2tQaGFzZVtcIkVSUk9SXCJdID0gNF0gPSBcIkVSUk9SXCI7XG59KShUcmFuc2l0aW9uSG9va1BoYXNlID0gZXhwb3J0cy5UcmFuc2l0aW9uSG9va1BoYXNlIHx8IChleHBvcnRzLlRyYW5zaXRpb25Ib29rUGhhc2UgPSB7fSkpO1xudmFyIFRyYW5zaXRpb25Ib29rU2NvcGU7XG4oZnVuY3Rpb24gKFRyYW5zaXRpb25Ib29rU2NvcGUpIHtcbiAgICBUcmFuc2l0aW9uSG9va1Njb3BlW1RyYW5zaXRpb25Ib29rU2NvcGVbXCJUUkFOU0lUSU9OXCJdID0gMF0gPSBcIlRSQU5TSVRJT05cIjtcbiAgICBUcmFuc2l0aW9uSG9va1Njb3BlW1RyYW5zaXRpb25Ib29rU2NvcGVbXCJTVEFURVwiXSA9IDFdID0gXCJTVEFURVwiO1xufSkoVHJhbnNpdGlvbkhvb2tTY29wZSA9IGV4cG9ydHMuVHJhbnNpdGlvbkhvb2tTY29wZSB8fCAoZXhwb3J0cy5UcmFuc2l0aW9uSG9va1Njb3BlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZS5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3RyYW5zaXRpb24vaW50ZXJmYWNlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @coreapi\n * @module params\n */ /** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar hof_1 = __webpack_require__(2);\nvar predicates_1 = __webpack_require__(1);\nvar coreservices_1 = __webpack_require__(3);\nvar paramType_1 = __webpack_require__(26);\n/** @hidden */var hasOwn = Object.prototype.hasOwnProperty;\n/** @hidden */var isShorthand = function isShorthand(cfg) {\n    return ["value", "type", "squash", "array", "dynamic"].filter(hasOwn.bind(cfg || {})).length === 0;\n};\n/** @internalapi */\nvar DefType;\n(function (DefType) {\n    DefType[DefType["PATH"] = 0] = "PATH";\n    DefType[DefType["SEARCH"] = 1] = "SEARCH";\n    DefType[DefType["CONFIG"] = 2] = "CONFIG";\n})(DefType = exports.DefType || (exports.DefType = {}));\n/** @hidden */\nfunction unwrapShorthand(cfg) {\n    cfg = isShorthand(cfg) && { value: cfg } || cfg;\n    getStaticDefaultValue[\'__cacheable\'] = true;\n    function getStaticDefaultValue() {\n        return cfg.value;\n    }\n    return common_1.extend(cfg, {\n        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : getStaticDefaultValue\n    });\n}\n/** @hidden */\nfunction getType(cfg, urlType, location, id, paramTypes) {\n    if (cfg.type && urlType && urlType.name !== \'string\') throw new Error("Param \'" + id + "\' has two type configurations.");\n    if (cfg.type && urlType && urlType.name === \'string\' && paramTypes.type(cfg.type)) return paramTypes.type(cfg.type);\n    if (urlType) return urlType;\n    if (!cfg.type) {\n        var type = location === DefType.CONFIG ? "any" : location === DefType.PATH ? "path" : location === DefType.SEARCH ? "query" : "string";\n        return paramTypes.type(type);\n    }\n    return cfg.type instanceof paramType_1.ParamType ? cfg.type : paramTypes.type(cfg.type);\n}\n/**\n * @internalapi\n * returns false, true, or the squash value to indicate the "default parameter url squash policy".\n */\nfunction getSquashPolicy(config, isOptional, defaultPolicy) {\n    var squash = config.squash;\n    if (!isOptional || squash === false) return false;\n    if (!predicates_1.isDefined(squash) || squash == null) return defaultPolicy;\n    if (squash === true || predicates_1.isString(squash)) return squash;\n    throw new Error("Invalid squash policy: \'" + squash + "\'. Valid policies: false, true, or arbitrary string");\n}\n/** @internalapi */\nfunction getReplace(config, arrayMode, isOptional, squash) {\n    var replace,\n        configuredKeys,\n        defaultPolicy = [{ from: "", to: isOptional || arrayMode ? undefined : "" }, { from: null, to: isOptional || arrayMode ? undefined : "" }];\n    replace = predicates_1.isArray(config.replace) ? config.replace : [];\n    if (predicates_1.isString(squash)) replace.push({ from: squash, to: undefined });\n    configuredKeys = common_1.map(replace, hof_1.prop("from"));\n    return common_1.filter(defaultPolicy, function (item) {\n        return configuredKeys.indexOf(item.from) === -1;\n    }).concat(replace);\n}\n/** @internalapi */\nvar Param = function () {\n    function Param(id, type, config, location, urlMatcherFactory) {\n        config = unwrapShorthand(config);\n        type = getType(config, type, location, id, urlMatcherFactory.paramTypes);\n        var arrayMode = getArrayMode();\n        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n        var isOptional = config.value !== undefined || location === DefType.SEARCH;\n        var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n        var raw = predicates_1.isDefined(config.raw) ? !!config.raw : !!type.raw;\n        var squash = getSquashPolicy(config, isOptional, urlMatcherFactory.defaultSquashPolicy());\n        var replace = getReplace(config, arrayMode, isOptional, squash);\n        var inherit = predicates_1.isDefined(config.inherit) ? !!config.inherit : !!type.inherit;\n        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n        function getArrayMode() {\n            var arrayDefaults = { array: location === DefType.SEARCH ? "auto" : false };\n            var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;\n        }\n        common_1.extend(this, { id: id, type: type, location: location, isOptional: isOptional, dynamic: dynamic, raw: raw, squash: squash, replace: replace, inherit: inherit, array: arrayMode, config: config });\n    }\n    Param.prototype.isDefaultValue = function (value) {\n        return this.isOptional && this.type.equals(this.value(), value);\n    };\n    /**\n     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n     * default value, which may be the result of an injectable function.\n     */\n    Param.prototype.value = function (value) {\n        var _this = this;\n        /**\n         * [Internal] Get the default value of a parameter, which may be an injectable function.\n         */\n        var getDefaultValue = function getDefaultValue() {\n            if (_this._defaultValueCache) return _this._defaultValueCache.defaultValue;\n            if (!coreservices_1.services.$injector) throw new Error("Injectable functions cannot be called at configuration time");\n            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);\n            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue)) throw new Error("Default value (" + defaultValue + ") for parameter \'" + _this.id + "\' is not an instance of ParamType (" + _this.type.name + ")");\n            if (_this.config.$$fn[\'__cacheable\']) {\n                _this._defaultValueCache = { defaultValue: defaultValue };\n            }\n            return defaultValue;\n        };\n        var replaceSpecialValues = function replaceSpecialValues(val) {\n            for (var _i = 0, _a = _this.replace; _i < _a.length; _i++) {\n                var tuple = _a[_i];\n                if (tuple.from === val) return tuple.to;\n            }\n            return val;\n        };\n        value = replaceSpecialValues(value);\n        return predicates_1.isUndefined(value) ? getDefaultValue() : this.type.$normalize(value);\n    };\n    Param.prototype.isSearch = function () {\n        return this.location === DefType.SEARCH;\n    };\n    Param.prototype.validates = function (value) {\n        // There was no parameter value, but the param is optional\n        if ((predicates_1.isUndefined(value) || value === null) && this.isOptional) return true;\n        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n        var normalized = this.type.$normalize(value);\n        if (!this.type.is(normalized)) return false;\n        // The value was of the correct type, but when encoded, did not match the ParamType\'s regexp\n        var encoded = this.type.encode(normalized);\n        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));\n    };\n    Param.prototype.toString = function () {\n        return "{Param:" + this.id + " " + this.type + " squash: \'" + this.squash + "\' optional: " + this.isOptional + "}";\n    };\n    Param.values = function (params, values) {\n        if (values === void 0) {\n            values = {};\n        }\n        var paramValues = {};\n        for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {\n            var param = params_1[_i];\n            paramValues[param.id] = param.value(values[param.id]);\n        }\n        return paramValues;\n    };\n    /**\n     * Finds [[Param]] objects which have different param values\n     *\n     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n     *\n     * @param params: The list of Param objects to filter\n     * @param values1: The first set of parameter values\n     * @param values2: the second set of parameter values\n     *\n     * @returns any Param objects whose values were different between values1 and values2\n     */\n    Param.changed = function (params, values1, values2) {\n        if (values1 === void 0) {\n            values1 = {};\n        }\n        if (values2 === void 0) {\n            values2 = {};\n        }\n        return params.filter(function (param) {\n            return !param.type.equals(values1[param.id], values2[param.id]);\n        });\n    };\n    /**\n     * Checks if two param value objects are equal (for a set of [[Param]] objects)\n     *\n     * @param params The list of [[Param]] objects to check\n     * @param values1 The first set of param values\n     * @param values2 The second set of param values\n     *\n     * @returns true if the param values in values1 and values2 are equal\n     */\n    Param.equals = function (params, values1, values2) {\n        if (values1 === void 0) {\n            values1 = {};\n        }\n        if (values2 === void 0) {\n            values2 = {};\n        }\n        return Param.changed(params, values1, values2).length === 0;\n    };\n    /** Returns true if a the parameter values are valid, according to the Param definitions */\n    Param.validates = function (params, values) {\n        if (values === void 0) {\n            values = {};\n        }\n        return params.map(function (param) {\n            return param.validates(values[param.id]);\n        }).reduce(common_1.allTrueR, true);\n    };\n    return Param;\n}();\nexports.Param = Param;\n//# sourceMappingURL=param.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar ng_from_import = __webpack_require__(55);\nvar ng_from_global = angular;\nexports.ng = ng_from_import && ng_from_import.module ? ng_from_import : ng_from_global;\n//# sourceMappingURL=angular.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5ndWxhci11aS1yb3V0ZXIvbGliL2FuZ3VsYXIuanM/NTlmNCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm5nX2Zyb21faW1wb3J0IiwicmVxdWlyZSIsIm5nX2Zyb21fZ2xvYmFsIiwiYW5ndWxhciIsIm5nIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0EsSUFBSUMsaUJBQWlCLG1CQUFBQyxDQUFRLEVBQVIsQ0FBckI7QUFDQSxJQUFJQyxpQkFBaUJDLE9BQXJCO0FBQ0FMLFFBQVFNLEVBQVIsR0FBY0osa0JBQWtCQSxlQUFlSyxNQUFsQyxHQUE0Q0wsY0FBNUMsR0FBNkRFLGNBQTFFO0FBQ0EiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBuZ19mcm9tX2ltcG9ydCA9IHJlcXVpcmUoXCJhbmd1bGFyXCIpO1xudmFyIG5nX2Zyb21fZ2xvYmFsID0gYW5ndWxhcjtcbmV4cG9ydHMubmcgPSAobmdfZnJvbV9pbXBvcnQgJiYgbmdfZnJvbV9pbXBvcnQubW9kdWxlKSA/IG5nX2Zyb21faW1wb3J0IDogbmdfZnJvbV9nbG9iYWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmd1bGFyLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9hbmd1bGFyLXVpLXJvdXRlci9saWIvYW5ndWxhci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){"use strict";eval('/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\n\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar common_1 = __webpack_require__(0);\nvar strings_1 = __webpack_require__(5);\nvar hof_1 = __webpack_require__(2);\nvar RejectType;\n(function (RejectType) {\n    RejectType[RejectType["SUPERSEDED"] = 2] = "SUPERSEDED";\n    RejectType[RejectType["ABORTED"] = 3] = "ABORTED";\n    RejectType[RejectType["INVALID"] = 4] = "INVALID";\n    RejectType[RejectType["IGNORED"] = 5] = "IGNORED";\n    RejectType[RejectType["ERROR"] = 6] = "ERROR";\n})(RejectType = exports.RejectType || (exports.RejectType = {}));\n/** @hidden */var id = 0;\nvar Rejection = function () {\n    function Rejection(type, message, detail) {\n        this.$id = id++;\n        this.type = type;\n        this.message = message;\n        this.detail = detail;\n    }\n    Rejection.prototype.toString = function () {\n        var detailString = function detailString(d) {\n            return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d);\n        };\n        var detail = detailString(this.detail);\n        var _a = this,\n            $id = _a.$id,\n            type = _a.type,\n            message = _a.message;\n        return "Transition Rejection($id: " + $id + " type: " + type + ", message: " + message + ", detail: " + detail + ")";\n    };\n    Rejection.prototype.toPromise = function () {\n        return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });\n    };\n    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n    Rejection.isRejectionPromise = function (obj) {\n        return obj && typeof obj.then === \'function\' && hof_1.is(Rejection)(obj._transitionRejection);\n    };\n    /** Returns a Rejection due to transition superseded */\n    Rejection.superseded = function (detail, options) {\n        var message = "The transition has been superseded by a different transition";\n        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n        if (options && options.redirected) {\n            rejection.redirected = true;\n        }\n        return rejection;\n    };\n    /** Returns a Rejection due to redirected transition */\n    Rejection.redirected = function (detail) {\n        return Rejection.superseded(detail, { redirected: true });\n    };\n    /** Returns a Rejection due to invalid transition */\n    Rejection.invalid = function (detail) {\n        var message = "This transition is invalid";\n        return new Rejection(RejectType.INVALID, message, detail);\n    };\n    /** Returns a Rejection due to ignored transition */\n    Rejection.ignored = function (detail) {\n        var message = "The transition was ignored";\n        return new Rejection(RejectType.IGNORED, message, detail);\n    };\n    /** Returns a Rejection due to aborted transition */\n    Rejection.aborted = function (detail) {\n        var message = "The transition has been aborted";\n        return new Rejection(RejectType.ABORTED, message, detail);\n    };\n    /** Returns a Rejection due to aborted transition */\n    Rejection.errored = function (detail) {\n        var message = "The transition errored";\n        return new Rejection(RejectType.ERROR, message, detail);\n    };\n    /**\n     * Returns a Rejection\n     *\n     * Normalizes a value as a Rejection.\n     * If the value is already a Rejection, returns it.\n     * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n     *\n     * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n     */\n    Rejection.normalize = function (detail) {\n        return hof_1.is(Rejection)(detail) ? detail : Rejection.errored(detail);\n    };\n    return Rejection;\n}();\nexports.Rejection = Rejection;\n//# sourceMappingURL=rejectFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3RyYW5zaXRpb24vcmVqZWN0RmFjdG9yeS5qcz85YWI0Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29tbW9uXzEiLCJyZXF1aXJlIiwic3RyaW5nc18xIiwiaG9mXzEiLCJSZWplY3RUeXBlIiwiaWQiLCJSZWplY3Rpb24iLCJ0eXBlIiwibWVzc2FnZSIsImRldGFpbCIsIiRpZCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiZGV0YWlsU3RyaW5nIiwiZCIsInN0cmluZ2lmeSIsIl9hIiwidG9Qcm9taXNlIiwiZXh0ZW5kIiwic2lsZW50UmVqZWN0aW9uIiwiX3RyYW5zaXRpb25SZWplY3Rpb24iLCJpc1JlamVjdGlvblByb21pc2UiLCJvYmoiLCJ0aGVuIiwiaXMiLCJzdXBlcnNlZGVkIiwib3B0aW9ucyIsInJlamVjdGlvbiIsIlNVUEVSU0VERUQiLCJyZWRpcmVjdGVkIiwiaW52YWxpZCIsIklOVkFMSUQiLCJpZ25vcmVkIiwiSUdOT1JFRCIsImFib3J0ZWQiLCJBQk9SVEVEIiwiZXJyb3JlZCIsIkVSUk9SIiwibm9ybWFsaXplIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0lBR0k7QUFDSjs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0EsSUFBSUMsV0FBVyxtQkFBQUMsQ0FBUSxDQUFSLENBQWY7QUFDQSxJQUFJQyxZQUFZLG1CQUFBRCxDQUFRLENBQVIsQ0FBaEI7QUFDQSxJQUFJRSxRQUFRLG1CQUFBRixDQUFRLENBQVIsQ0FBWjtBQUNBLElBQUlHLFVBQUo7QUFDQSxDQUFDLFVBQVVBLFVBQVYsRUFBc0I7QUFDbkJBLGVBQVdBLFdBQVcsWUFBWCxJQUEyQixDQUF0QyxJQUEyQyxZQUEzQztBQUNBQSxlQUFXQSxXQUFXLFNBQVgs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SUE7QUFDQUgsY0FBVTBCLE9BQVYsR0FBb0IsVUFBVXZCLE1BQVYsRUFBa0I7QUFDbEMsWUFBSUQsVUFBVSw0QkFBZDtBQUNBLGVBQU8sSUFBSUYsU0FBSixDQUFjRixXQUFXNkIsT0FBekIsRUFBa0N6QixPQUFsQyxFQUEyQ0MsTUFBM0MsQ0FBUDtBQUNILEtBSEQ7QUFJQTtBQUNBSCxjQUFVNEIsT0FBVixHQUFvQixVQUFVekIsTUFBVixFQUFrQjtBQUNsQyxZQUFJRCxVQUFVLGlDQUFkO0FBQ0EsZUFBTyxJQUFJRixTQUFKLENBQWNGLFdBQVcrQixPQUF6QixFQUFrQzNCLE9BQWxDLEVBQTJDQyxNQUEzQyxDQUFQO0FBQ0gsS0FIRDtBQUlBO0FBQ0FILGNBQVU4QixPQUFWLEdBQW9CLFVBQVUzQixNQUFWLEVBQWtCO0FBQ2xDLFlBQUlELFVBQVUsd0JBQWQ7QUFDQSxlQUFPLElBQUlGLFNBQUosQ0FBY0YsV0FBV2lDLEtBQXpCLEVBQWdDN0IsT0FBaEMsRUFBeUNDLE1BQXpDLENBQVA7QUFDSCxLQUhEO0FBSUE7Ozs7Ozs7OztBQVNBSCxjQUFVZ0MsU0FBVixHQUFzQixVQUFVN0IsTUFBVixFQUFrQjtBQUNwQyxlQUFPTixNQUFNcUIsRUFBTixDQUFTbEIsU0FBVCxFQUFvQkcsTUFBcEIsSUFBOEJBLE1BQTlCLEdBQXVDSCxVQUFVOEIsT0FBVixDQUFrQjNCLE1BQWxCLENBQTlDO0FBQ0gsS0FGRDtBQUdBLFdBQU9ILFNBQVA7QUFDSCxDQXBFZ0IsRUFBakI7QUFxRUFSLFFBQVFRLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0EiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBjb3JlYXBpXG4gKiBAbW9kdWxlIHRyYW5zaXRpb25cbiAqLyAvKiogZm9yIHR5cGVkb2MgKi9cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb21tb25cIik7XG52YXIgc3RyaW5nc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9zdHJpbmdzXCIpO1xudmFyIGhvZl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9ob2ZcIik7XG52YXIgUmVqZWN0VHlwZTtcbihmdW5jdGlvbiAoUmVqZWN0VHlwZSkge1xuICAgIFJlamVjdFR5cGVbUmVqZWN0VHlwZVtcIlNVUEVSU0VERURcIl0gPSAyXSA9IFwiU1VQRVJTRURFRFwiO1xuICAgIFJlamVjdFR5cGVbUmVqZWN0VHlwZVtcIkFCT1JURURcIl0gPSAzXSA9IFwiQUJPUlRFRFwiO1xuICAgIFJlamVjdFR5cGVbUmVqZWN0VHlwZVtcIklOVkFMSURcIl0gPSA0XSA9IFwiSU5WQUxJRFwiO1xuICAgIFJlamVjdFR5cGVbUmVqZWN0VHlwZVtcIklHTk9SRURcIl0gPSA1XSA9IFwiSUdOT1JFRFwiO1xuICAgIFJlamVjdFR5cGVbUmVqZWN0VHlwZVtcIkVSUk9SXCJdID0gNl0gPSBcIkVSUk9SXCI7XG59KShSZWplY3RUeXBlID0gZXhwb3J0cy5SZWplY3RUeXBlIHx8IChleHBvcnRzLlJlamVjdFR5cGUgPSB7fSkpO1xuLyoqIEBoaWRkZW4gKi8gdmFyIGlkID0gMDtcbnZhciBSZWplY3Rpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlamVjdGlvbih0eXBlLCBtZXNzYWdlLCBkZXRhaWwpIHtcbiAgICAgICAgdGhpcy4kaWQgPSBpZCsrO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLmRldGFpbCA9IGRldGFpbDtcbiAgICB9XG4gICAgUmVqZWN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRldGFpbFN0cmluZyA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gZCAmJiBkLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nID8gZC50b1N0cmluZygpIDogc3RyaW5nc18xLnN0cmluZ2lmeShkKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGRldGFpbCA9IGRldGFpbFN0cmluZyh0aGlzLmRldGFpbCk7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsICRpZCA9IF9hLiRpZCwgdHlwZSA9IF9hLnR5cGUsIG1lc3NhZ2UgPSBfYS5tZXNzYWdlO1xuICAgICAgICByZXR1cm4gXCJUcmFuc2l0aW9uIFJlamVjdGlvbigkaWQ6IFwiICsgJGlkICsgXCIgdHlwZTogXCIgKyB0eXBlICsgXCIsIG1lc3NhZ2U6IFwiICsgbWVzc2FnZSArIFwiLCBkZXRhaWw6IFwiICsgZGV0YWlsICsgXCIpXCI7XG4gICAgfTtcbiAgICBSZWplY3Rpb24ucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmV4dGVuZChjb21tb25fMS5zaWxlbnRSZWplY3Rpb24odGhpcyksIHsgX3RyYW5zaXRpb25SZWplY3Rpb246IHRoaXMgfSk7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0cnVlIGlmIHRoZSBvYmogaXMgYSByZWplY3RlZCBwcm9taXNlIGNyZWF0ZWQgZnJvbSB0aGUgYGFzUHJvbWlzZWAgZmFjdG9yeSAqL1xuICAgIFJlamVjdGlvbi5pc1JlamVjdGlvblByb21pc2UgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgKHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJykgJiYgaG9mXzEuaXMoUmVqZWN0aW9uKShvYmouX3RyYW5zaXRpb25SZWplY3Rpb24pO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgYSBSZWplY3Rpb24gZHVlIHRvIHRyYW5zaXRpb24gc3VwZXJzZWRlZCAqL1xuICAgIFJlamVjdGlvbi5zdXBlcnNlZGVkID0gZnVuY3Rpb24gKGRldGFpbCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgbWVzc2FnZSA9IFwiVGhlIHRyYW5zaXRpb24gaGFzIGJlZW4gc3VwZXJzZWRlZCBieSBhIGRpZmZlcmVudCB0cmFuc2l0aW9uXCI7XG4gICAgICAgIHZhciByZWplY3Rpb24gPSBuZXcgUmVqZWN0aW9uKFJlamVjdFR5cGUuU1VQRVJTRURFRCwgbWVzc2FnZSwgZGV0YWlsKTtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWRpcmVjdGVkKSB7XG4gICAgICAgICAgICByZWplY3Rpb24ucmVkaXJlY3RlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlamVjdGlvbjtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIGEgUmVqZWN0aW9uIGR1ZSB0byByZWRpcmVjdGVkIHRyYW5zaXRpb24gKi9cbiAgICBSZWplY3Rpb24ucmVkaXJlY3RlZCA9IGZ1bmN0aW9uIChkZXRhaWwpIHtcbiAgICAgICAgcmV0dXJuIFJlamVjdGlvbi5zdXBlcnNlZGVkKGRldGFpbCwgeyByZWRpcmVjdGVkOiB0cnVlIH0pO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgYSBSZWplY3Rpb24gZHVlIHRvIGludmFsaWQgdHJhbnNpdGlvbiAqL1xuICAgIFJlamVjdGlvbi5pbnZhbGlkID0gZnVuY3Rpb24gKGRldGFpbCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9IFwiVGhpcyB0cmFuc2l0aW9uIGlzIGludmFsaWRcIjtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWplY3Rpb24oUmVqZWN0VHlwZS5JTlZBTElELCBtZXNzYWdlLCBkZXRhaWwpO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgYSBSZWplY3Rpb24gZHVlIHRvIGlnbm9yZWQgdHJhbnNpdGlvbiAqL1xuICAgIFJlamVjdGlvbi5pZ25vcmVkID0gZnVuY3Rpb24gKGRldGFpbCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9IFwiVGhlIHRyYW5zaXRpb24gd2FzIGlnbm9yZWRcIjtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWplY3Rpb24oUmVqZWN0VHlwZS5JR05PUkVELCBtZXNzYWdlLCBkZXRhaWwpO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgYSBSZWplY3Rpb24gZHVlIHRvIGFib3J0ZWQgdHJhbnNpdGlvbiAqL1xuICAgIFJlamVjdGlvbi5hYm9ydGVkID0gZnVuY3Rpb24gKGRldGFpbCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9IFwiVGhlIHRyYW5zaXRpb24gaGFzIGJlZW4gYWJvcnRlZFwiO1xuICAgICAgICByZXR1cm4gbmV3IFJlamVjdGlvbihSZWplY3RUeXBlLkFCT1JURUQsIG1lc3NhZ2UsIGRldGFpbCk7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyBhIFJlamVjdGlvbiBkdWUgdG8gYWJvcnRlZCB0cmFuc2l0aW9uICovXG4gICAgUmVqZWN0aW9uLmVycm9yZWQgPSBmdW5jdGlvbiAoZGV0YWlsKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gXCJUaGUgdHJhbnNpdGlvbiBlcnJvcmVkXCI7XG4gICAgICAgIHJldHVybiBuZXcgUmVqZWN0aW9uKFJlamVjdFR5cGUuRVJST1IsIG1lc3NhZ2UsIGRldGFpbCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgUmVqZWN0aW9uXG4gICAgICpcbiAgICAgKiBOb3JtYWxpemVzIGEgdmFsdWUgYXMgYSBSZWplY3Rpb24uXG4gICAgICogSWYgdGhlIHZhbHVlIGlzIGFscmVhZHkgYSBSZWplY3Rpb24sIHJldHVybnMgaXQuXG4gICAgICogT3RoZXJ3aXNlLCB3cmFwcyBhbmQgcmV0dXJucyB0aGUgdmFsdWUgYXMgYSBSZWplY3Rpb24gKFJlamVjdGlvbiB0eXBlOiBFUlJPUikuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBgZGV0YWlsYCBpZiBpdCBpcyBhbHJlYWR5IGEgYFJlamVjdGlvbmAsIGVsc2UgcmV0dXJucyBhbiBFUlJPUiBSZWplY3Rpb24uXG4gICAgICovXG4gICAgUmVqZWN0aW9uLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChkZXRhaWwpIHtcbiAgICAgICAgcmV0dXJuIGhvZl8xLmlzKFJlamVjdGlvbikoZGV0YWlsKSA/IGRldGFpbCA6IFJlamVjdGlvbi5lcnJvcmVkKGRldGFpbCk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVqZWN0aW9uO1xufSgpKTtcbmV4cG9ydHMuUmVqZWN0aW9uID0gUmVqZWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVqZWN0RmFjdG9yeS5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3RyYW5zaXRpb24vcmVqZWN0RmFjdG9yeS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nvar interface_1 = __webpack_require__(8);\nvar common_1 = __webpack_require__(0);\nvar strings_1 = __webpack_require__(5);\nvar predicates_1 = __webpack_require__(1);\nvar hof_1 = __webpack_require__(2);\nvar trace_1 = __webpack_require__(6);\nvar coreservices_1 = __webpack_require__(3);\nvar rejectFactory_1 = __webpack_require__(11);\nvar targetState_1 = __webpack_require__(7);\nvar defaultOptions = {\n    current: common_1.noop,\n    transition: null,\n    traceData: {},\n    bind: null\n};\n/** @hidden */\nvar TransitionHook = function () {\n    function TransitionHook(transition, stateContext, registeredHook, options) {\n        var _this = this;\n        this.transition = transition;\n        this.stateContext = stateContext;\n        this.registeredHook = registeredHook;\n        this.options = options;\n        this.isSuperseded = function () {\n            return _this.type.hookPhase === interface_1.TransitionHookPhase.RUN && !_this.options.transition.isActive();\n        };\n        this.options = common_1.defaults(options, defaultOptions);\n        this.type = registeredHook.eventType;\n    }\n    TransitionHook.prototype.logError = function (err) {\n        this.transition.router.stateService.defaultErrorHandler()(err);\n    };\n    TransitionHook.prototype.invokeHook = function () {\n        var _this = this;\n        var hook = this.registeredHook;\n        if (hook._deregistered) return;\n        var notCurrent = this.getNotCurrentRejection();\n        if (notCurrent) return notCurrent;\n        var options = this.options;\n        trace_1.trace.traceHookInvocation(this, this.transition, options);\n        var invokeCallback = function invokeCallback() {\n            return hook.callback.call(options.bind, _this.transition, _this.stateContext);\n        };\n        var normalizeErr = function normalizeErr(err) {\n            return rejectFactory_1.Rejection.normalize(err).toPromise();\n        };\n        var handleError = function handleError(err) {\n            return hook.eventType.getErrorHandler(_this)(err);\n        };\n        var handleResult = function handleResult(result) {\n            return hook.eventType.getResultHandler(_this)(result);\n        };\n        try {\n            var result = invokeCallback();\n            if (!this.type.synchronous && predicates_1.isPromise(result)) {\n                return result.catch(normalizeErr).then(handleResult, handleError);\n            } else {\n                return handleResult(result);\n            }\n        } catch (err) {\n            // If callback throws (synchronously)\n            return handleError(rejectFactory_1.Rejection.normalize(err));\n        }\n    };\n    /**\n     * This method handles the return value of a Transition Hook.\n     *\n     * A hook can return false (cancel), a TargetState (redirect),\n     * or a promise (which may later resolve to false or a redirect)\n     *\n     * This also handles "transition superseded" -- when a new transition\n     * was started while the hook was still running\n     */\n    TransitionHook.prototype.handleHookResult = function (result) {\n        var _this = this;\n        var notCurrent = this.getNotCurrentRejection();\n        if (notCurrent) return notCurrent;\n        // Hook returned a promise\n        if (predicates_1.isPromise(result)) {\n            // Wait for the promise, then reprocess with the resulting value\n            return result.then(function (val) {\n                return _this.handleHookResult(val);\n            });\n        }\n        trace_1.trace.traceHookResult(result, this.transition, this.options);\n        // Hook returned false\n        if (result === false) {\n            // Abort this Transition\n            return rejectFactory_1.Rejection.aborted("Hook aborted transition").toPromise();\n        }\n        var isTargetState = hof_1.is(targetState_1.TargetState);\n        // hook returned a TargetState\n        if (isTargetState(result)) {\n            // Halt the current Transition and redirect (a new Transition) to the TargetState.\n            return rejectFactory_1.Rejection.redirected(result).toPromise();\n        }\n    };\n    /**\n     * Return a Rejection promise if the transition is no longer current due\n     * to a stopped router (disposed), or a new transition has started and superseded this one.\n     */\n    TransitionHook.prototype.getNotCurrentRejection = function () {\n        var router = this.transition.router;\n        // The router is stopped\n        if (router._disposed) {\n            return rejectFactory_1.Rejection.aborted("UIRouter instance #" + router.$id + " has been stopped (disposed)").toPromise();\n        }\n        if (this.transition._aborted) {\n            return rejectFactory_1.Rejection.aborted().toPromise();\n        }\n        // This transition is no longer current.\n        // Another transition started while this hook was still running.\n        if (this.isSuperseded()) {\n            // Abort this transition\n            return rejectFactory_1.Rejection.superseded(this.options.current()).toPromise();\n        }\n    };\n    TransitionHook.prototype.toString = function () {\n        var _a = this,\n            options = _a.options,\n            registeredHook = _a.registeredHook;\n        var event = hof_1.parse("traceData.hookType")(options) || "internal",\n            context = hof_1.parse("traceData.context.state.name")(options) || hof_1.parse("traceData.context")(options) || "unknown",\n            name = strings_1.fnToString(registeredHook.callback);\n        return event + " context: " + context + ", " + strings_1.maxLength(200, name);\n    };\n    /**\n     * Chains together an array of TransitionHooks.\n     *\n     * Given a list of [[TransitionHook]] objects, chains them together.\n     * Each hook is invoked after the previous one completes.\n     *\n     * #### Example:\n     * ```js\n     * var hooks: TransitionHook[] = getHooks();\n     * let promise: Promise<any> = TransitionHook.chain(hooks);\n     *\n     * promise.then(handleSuccess, handleError);\n     * ```\n     *\n     * @param hooks the list of hooks to chain together\n     * @param waitFor if provided, the chain is `.then()`\'ed off this promise\n     * @returns a `Promise` for sequentially invoking the hooks (in order)\n     */\n    TransitionHook.chain = function (hooks, waitFor) {\n        // Chain the next hook off the previous\n        var createHookChainR = function createHookChainR(prev, nextHook) {\n            return prev.then(function () {\n                return nextHook.invokeHook();\n            });\n        };\n        return hooks.reduce(createHookChainR, waitFor || coreservices_1.services.$q.when());\n    };\n    /**\n     * Invokes all the provided TransitionHooks, in order.\n     * Each hook\'s return value is checked.\n     * If any hook returns a promise, then the rest of the hooks are chained off that promise, and the promise is returned.\n     * If no hook returns a promise, then all hooks are processed synchronously.\n     *\n     * @param hooks the list of TransitionHooks to invoke\n     * @param doneCallback a callback that is invoked after all the hooks have successfully completed\n     *\n     * @returns a promise for the async result, or the result of the callback\n     */\n    TransitionHook.invokeHooks = function (hooks, doneCallback) {\n        for (var idx = 0; idx < hooks.length; idx++) {\n            var hookResult = hooks[idx].invokeHook();\n            if (predicates_1.isPromise(hookResult)) {\n                var remainingHooks = hooks.slice(idx + 1);\n                return TransitionHook.chain(remainingHooks, hookResult).then(doneCallback);\n            }\n        }\n        return doneCallback();\n    };\n    /**\n     * Run all TransitionHooks, ignoring their return value.\n     */\n    TransitionHook.runAllHooks = function (hooks) {\n        hooks.forEach(function (hook) {\n            return hook.invokeHook();\n        });\n    };\n    return TransitionHook;\n}();\n/**\n * These GetResultHandler(s) are used by [[invokeHook]] below\n * Each HookType chooses a GetResultHandler (See: [[TransitionService._defineCoreEvents]])\n */\nTransitionHook.HANDLE_RESULT = function (hook) {\n    return function (result) {\n        return hook.handleHookResult(result);\n    };\n};\n/**\n * If the result is a promise rejection, log it.\n * Otherwise, ignore the result.\n */\nTransitionHook.LOG_REJECTED_RESULT = function (hook) {\n    return function (result) {\n        predicates_1.isPromise(result) && result.catch(function (err) {\n            return hook.logError(rejectFactory_1.Rejection.normalize(err));\n        });\n        return undefined;\n    };\n};\n/**\n * These GetErrorHandler(s) are used by [[invokeHook]] below\n * Each HookType chooses a GetErrorHandler (See: [[TransitionService._defineCoreEvents]])\n */\nTransitionHook.LOG_ERROR = function (hook) {\n    return function (error) {\n        return hook.logError(error);\n    };\n};\nTransitionHook.REJECT_ERROR = function (hook) {\n    return function (error) {\n        return common_1.silentRejection(error);\n    };\n};\nTransitionHook.THROW_ERROR = function (hook) {\n    return function (error) {\n        throw error;\n    };\n};\nexports.TransitionHook = TransitionHook;\n//# sourceMappingURL=transitionHook.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @coreapi\n * @module resolve\n */ /** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar coreservices_1 = __webpack_require__(3);\nvar trace_1 = __webpack_require__(6);\nvar strings_1 = __webpack_require__(5);\nvar predicates_1 = __webpack_require__(1);\n// TODO: explicitly make this user configurable\nexports.defaultResolvePolicy = {\n    when: "LAZY",\n    async: "WAIT"\n};\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state\'s resolve\'s resolveFn, the resolveFn\'s declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable\'s existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nvar Resolvable = function () {\n    function Resolvable(arg1, resolveFn, deps, policy, data) {\n        this.resolved = false;\n        this.promise = undefined;\n        if (arg1 instanceof Resolvable) {\n            common_1.extend(this, arg1);\n        } else if (predicates_1.isFunction(resolveFn)) {\n            if (arg1 == null || arg1 == undefined) throw new Error("new Resolvable(): token argument is required");\n            if (!predicates_1.isFunction(resolveFn)) throw new Error("new Resolvable(): resolveFn argument must be a function");\n            this.token = arg1;\n            this.policy = policy;\n            this.resolveFn = resolveFn;\n            this.deps = deps || [];\n            this.data = data;\n            this.resolved = data !== undefined;\n            this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;\n        } else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {\n            var literal = arg1;\n            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n        }\n    }\n    Resolvable.prototype.getPolicy = function (state) {\n        var thisPolicy = this.policy || {};\n        var statePolicy = state && state.resolvePolicy || {};\n        return {\n            when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,\n            async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async\n        };\n    };\n    /**\n     * Asynchronously resolve this Resolvable\'s data\n     *\n     * Given a ResolveContext that this Resolvable is found in:\n     * Wait for this Resolvable\'s dependencies, then invoke this Resolvable\'s function\n     * and update the Resolvable\'s state\n     */\n    Resolvable.prototype.resolve = function (resolveContext, trans) {\n        var _this = this;\n        var $q = coreservices_1.services.$q;\n        // Gets all dependencies from ResolveContext and wait for them to be resolved\n        var getResolvableDependencies = function getResolvableDependencies() {\n            return $q.all(resolveContext.getDependencies(_this).map(function (resolvable) {\n                return resolvable.get(resolveContext, trans);\n            }));\n        };\n        // Invokes the resolve function passing the resolved dependencies as arguments\n        var invokeResolveFn = function invokeResolveFn(resolvedDeps) {\n            return _this.resolveFn.apply(null, resolvedDeps);\n        };\n        /**\n         * For RXWAIT policy:\n         *\n         * Given an observable returned from a resolve function:\n         * - enables .cache() mode (this allows multicast subscribers)\n         * - then calls toPromise() (this triggers subscribe() and thus fetches)\n         * - Waits for the promise, then return the cached observable (not the first emitted value).\n         */\n        var waitForRx = function waitForRx(observable$) {\n            var cached = observable$.cache(1);\n            return cached.take(1).toPromise().then(function () {\n                return cached;\n            });\n        };\n        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n        var node = resolveContext.findNode(this);\n        var state = node && node.state;\n        var maybeWaitForRx = this.getPolicy(state).async === "RXWAIT" ? waitForRx : common_1.identity;\n        // After the final value has been resolved, update the state of the Resolvable\n        var applyResolvedValue = function applyResolvedValue(resolvedValue) {\n            _this.data = resolvedValue;\n            _this.resolved = true;\n            trace_1.trace.traceResolvableResolved(_this, trans);\n            return _this.data;\n        };\n        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n        return this.promise = $q.when().then(getResolvableDependencies).then(invokeResolveFn).then(maybeWaitForRx).then(applyResolvedValue);\n    };\n    /**\n     * Gets a promise for this Resolvable\'s data.\n     *\n     * Fetches the data and returns a promise.\n     * Returns the existing promise if it has already been fetched once.\n     */\n    Resolvable.prototype.get = function (resolveContext, trans) {\n        return this.promise || this.resolve(resolveContext, trans);\n    };\n    Resolvable.prototype.toString = function () {\n        return "Resolvable(token: " + strings_1.stringify(this.token) + ", requires: [" + this.deps.map(strings_1.stringify) + "])";\n    };\n    Resolvable.prototype.clone = function () {\n        return new Resolvable(this);\n    };\n    return Resolvable;\n}();\nResolvable.fromData = function (token, data) {\n    return new Resolvable(token, function () {\n        return data;\n    }, null, null, data);\n};\nexports.Resolvable = Resolvable;\n//# sourceMappingURL=resolvable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar index_1 = __webpack_require__(15);\nvar common_1 = __webpack_require__(0);\nvar beforeAfterSubstr = function beforeAfterSubstr(char) {\n    return function (str) {\n        if (!str) return ["", ""];\n        var idx = str.indexOf(char);\n        if (idx === -1) return [str, ""];\n        return [str.substr(0, idx), str.substr(idx + 1)];\n    };\n};\nexports.splitHash = beforeAfterSubstr("#");\nexports.splitQuery = beforeAfterSubstr("?");\nexports.splitEqual = beforeAfterSubstr("=");\nexports.trimHashVal = function (str) {\n    return str ? str.replace(/^#/, "") : "";\n};\nexports.keyValsToObjectR = function (accum, _a) {\n    var key = _a[0],\n        val = _a[1];\n    if (!accum.hasOwnProperty(key)) {\n        accum[key] = val;\n    } else if (index_1.isArray(accum[key])) {\n        accum[key].push(val);\n    } else {\n        accum[key] = [accum[key], val];\n    }\n    return accum;\n};\nexports.getParams = function (queryString) {\n    return queryString.split("&").filter(common_1.identity).map(exports.splitEqual).reduce(exports.keyValsToObjectR, {});\n};\nfunction parseUrl(url) {\n    var orEmptyString = function orEmptyString(x) {\n        return x || "";\n    };\n    var _a = exports.splitHash(url).map(orEmptyString),\n        beforehash = _a[0],\n        hash = _a[1];\n    var _b = exports.splitQuery(beforehash).map(orEmptyString),\n        path = _b[0],\n        search = _b[1];\n    return { path: path, search: search, hash: hash, url: url };\n}\nexports.parseUrl = parseUrl;\nexports.buildUrl = function (loc) {\n    var path = loc.path();\n    var searchObject = loc.search();\n    var hash = loc.hash();\n    var search = Object.keys(searchObject).map(function (key) {\n        var param = searchObject[key];\n        var vals = index_1.isArray(param) ? param : [param];\n        return vals.map(function (val) {\n            return key + "=" + val;\n        });\n    }).reduce(common_1.unnestR, []).join("&");\n    return path + (search ? "?" + search : "") + (hash ? "#" + hash : "");\n};\nfunction locationPluginFactory(name, isHtml5, serviceClass, configurationClass) {\n    return function (router) {\n        var service = router.locationService = new serviceClass(router);\n        var configuration = router.locationConfig = new configurationClass(router, isHtml5);\n        function dispose(router) {\n            router.dispose(service);\n            router.dispose(configuration);\n        }\n        return { name: name, service: service, configuration: configuration, dispose: dispose };\n    };\n}\nexports.locationPluginFactory = locationPluginFactory;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvdXRpbHMuanM/OWI3ZiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluZGV4XzEiLCJyZXF1aXJlIiwiY29tbW9uXzEiLCJiZWZvcmVBZnRlclN1YnN0ciIsImNoYXIiLCJzdHIiLCJpZHgiLCJpbmRleE9mIiwic3Vic3RyIiwic3BsaXRIYXNoIiwic3BsaXRRdWVyeSIsInNwbGl0RXF1YWwiLCJ0cmltSGFzaFZhbCIsInJlcGxhY2UiLCJrZXlWYWxzVG9PYmplY3RSIiwiYWNjdW0iLCJfYSIsImtleSIsInZhbCIsImhhc093blByb3BlcnR5IiwiaXNBcnJheSIsInB1c2giLCJnZXRQYXJhbXMiLCJxdWVyeVN0cmluZyIsInNwbGl0IiwiZmlsdGVyIiwiaWRlbnRpdHkiLCJtYXAiLCJyZWR1Y2UiLCJwYXJzZVVybCIsInVybCIsIm9yRW1wdHlTdHJpbmciLCJ4IiwiYmVmb3JlaGFzaCIsImhhc2giLCJfYiIsInBhdGgiLCJzZWFyY2giLCJidWlsZFVybCIsImxvYyIsInNlYXJjaE9iamVjdCIsImtleXMiLCJwYXJhbSIsInZhbHMiLCJ1bm5lc3RSIiwiam9pbiIsImxvY2F0aW9uUGx1Z2luRmFjdG9yeSIsIm5hbWUiLCJpc0h0bWw1Iiwic2VydmljZUNsYXNzIiwiY29uZmlndXJhdGlvbkNsYXNzIiwicm91dGVyIiwic2VydmljZSIsImxvY2F0aW9uU2VydmljZSIsImNvbmZpZ3VyYXRpb24iLCJsb2NhdGlvbkNvbmZpZyIsImRpc3Bvc2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQTs7OztBQUlBO0FBQ0EsSUFBSUMsVUFBVSxtQkFBQUMsQ0FBUSxFQUFSLENBQWQ7QUFDQSxJQUFJ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Q0FBZUosT0FBZjtBQUNBRCxtQkFBT0ssT0FBUCxDQUFlRixhQUFmO0FBQ0g7QUFDRCxlQUFPLEVBQUVQLE1BQU1BLElBQVIsRUFBY0ssU0FBU0EsT0FBdkIsRUFBZ0NFLGVBQWVBLGFBQS9DLEVBQThERSxTQUFTQSxPQUF2RSxFQUFQO0FBQ0gsS0FSRDtBQVNIO0FBQ0QxRCxRQUFRZ0QscUJBQVIsR0FBZ0NBLHFCQUFoQztBQUNBIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBpbnRlcm5hbGFwaVxuICogQG1vZHVsZSB2YW5pbGxhXG4gKi9cbi8qKiAqL1xudmFyIGluZGV4XzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2luZGV4XCIpO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb21tb25cIik7XG52YXIgYmVmb3JlQWZ0ZXJTdWJzdHIgPSBmdW5jdGlvbiAoY2hhcikgeyByZXR1cm4gZnVuY3Rpb24gKHN0cikge1xuICAgIGlmICghc3RyKVxuICAgICAgICByZXR1cm4gW1wiXCIsIFwiXCJdO1xuICAgIHZhciBpZHggPSBzdHIuaW5kZXhPZihjaGFyKTtcbiAgICBpZiAoaWR4ID09PSAtMSlcbiAgICAgICAgcmV0dXJuIFtzdHIsIFwiXCJdO1xuICAgIHJldHVybiBbc3RyLnN1YnN0cigwLCBpZHgpLCBzdHIuc3Vic3RyKGlkeCArIDEpXTtcbn07IH07XG5leHBvcnRzLnNwbGl0SGFzaCA9IGJlZm9yZUFmdGVyU3Vic3RyKFwiI1wiKTtcbmV4cG9ydHMuc3BsaXRRdWVyeSA9IGJlZm9yZUFmdGVyU3Vic3RyKFwiP1wiKTtcbmV4cG9ydHMuc3BsaXRFcXVhbCA9IGJlZm9yZUFmdGVyU3Vic3RyKFwiPVwiKTtcbmV4cG9ydHMudHJpbUhhc2hWYWwgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHIgPyBzdHIucmVwbGFjZSgvXiMvLCBcIlwiKSA6IFwiXCI7IH07XG5leHBvcnRzLmtleVZhbHNUb09iamVjdFIgPSBmdW5jdGlvbiAoYWNjdW0sIF9hKSB7XG4gICAgdmFyIGtleSA9IF9hWzBdLCB2YWwgPSBfYVsxXTtcbiAgICBpZiAoIWFjY3VtLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgYWNjdW1ba2V5XSA9IHZhbDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaW5kZXhfMS5pc0FycmF5KGFjY3VtW2tleV0pKSB7XG4gICAgICAgIGFjY3VtW2tleV0ucHVzaCh2YWwpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYWNjdW1ba2V5XSA9IFthY2N1bVtrZXldLCB2YWxdO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW07XG59O1xuZXhwb3J0cy5nZXRQYXJhbXMgPSBmdW5jdGlvbiAocXVlcnlTdHJpbmcpIHtcbiAgICByZXR1cm4gcXVlcnlTdHJpbmcuc3BsaXQoXCImXCIpLmZpbHRlcihjb21tb25fMS5pZGVudGl0eSkubWFwKGV4cG9ydHMuc3BsaXRFcXVhbCkucmVkdWNlKGV4cG9ydHMua2V5VmFsc1RvT2JqZWN0Uiwge30pO1xufTtcbmZ1bmN0aW9uIHBhcnNlVXJsKHVybCkge1xuICAgIHZhciBvckVtcHR5U3RyaW5nID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggfHwgXCJcIjsgfTtcbiAgICB2YXIgX2EgPSBleHBvcnRzLnNwbGl0SGFzaCh1cmwpLm1hcChvckVtcHR5U3RyaW5nKSwgYmVmb3JlaGFzaCA9IF9hWzBdLCBoYXNoID0gX2FbMV07XG4gICAgdmFyIF9iID0gZXhwb3J0cy5zcGxpdFF1ZXJ5KGJlZm9yZWhhc2gpLm1hcChvckVtcHR5U3RyaW5nKSwgcGF0aCA9IF9iWzBdLCBzZWFyY2ggPSBfYlsxXTtcbiAgICByZXR1cm4geyBwYXRoOiBwYXRoLCBzZWFyY2g6IHNlYXJjaCwgaGFzaDogaGFzaCwgdXJsOiB1cmwgfTtcbn1cbmV4cG9ydHMucGFyc2VVcmwgPSBwYXJzZVVybDtcbmV4cG9ydHMuYnVpbGRVcmwgPSBmdW5jdGlvbiAobG9jKSB7XG4gICAgdmFyIHBhdGggPSBsb2MucGF0aCgpO1xuICAgIHZhciBzZWFyY2hPYmplY3QgPSBsb2Muc2VhcmNoKCk7XG4gICAgdmFyIGhhc2ggPSBsb2MuaGFzaCgpO1xuICAgIHZhciBzZWFyY2ggPSBPYmplY3Qua2V5cyhzZWFyY2hPYmplY3QpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHNlYXJjaE9iamVjdFtrZXldO1xuICAgICAgICB2YXIgdmFscyA9IGluZGV4XzEuaXNBcnJheShwYXJhbSkgPyBwYXJhbSA6IFtwYXJhbV07XG4gICAgICAgIHJldHVybiB2YWxzLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiBrZXkgKyBcIj1cIiArIHZhbDsgfSk7XG4gICAgfSkucmVkdWNlKGNvbW1vbl8xLnVubmVzdFIsIFtdKS5qb2luKFwiJlwiKTtcbiAgICByZXR1cm4gcGF0aCArIChzZWFyY2ggPyBcIj9cIiArIHNlYXJjaCA6IFwiXCIpICsgKGhhc2ggPyBcIiNcIiArIGhhc2ggOiBcIlwiKTtcbn07XG5mdW5jdGlvbiBsb2NhdGlvblBsdWdpbkZhY3RvcnkobmFtZSwgaXNIdG1sNSwgc2VydmljZUNsYXNzLCBjb25maWd1cmF0aW9uQ2xhc3MpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJvdXRlcikge1xuICAgICAgICB2YXIgc2VydmljZSA9IHJvdXRlci5sb2NhdGlvblNlcnZpY2UgPSBuZXcgc2VydmljZUNsYXNzKHJvdXRlcik7XG4gICAgICAgIHZhciBjb25maWd1cmF0aW9uID0gcm91dGVyLmxvY2F0aW9uQ29uZmlnID0gbmV3IGNvbmZpZ3VyYXRpb25DbGFzcyhyb3V0ZXIsIGlzSHRtbDUpO1xuICAgICAgICBmdW5jdGlvbiBkaXNwb3NlKHJvdXRlcikge1xuICAgICAgICAgICAgcm91dGVyLmRpc3Bvc2Uoc2VydmljZSk7XG4gICAgICAgICAgICByb3V0ZXIuZGlzcG9zZShjb25maWd1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBuYW1lOiBuYW1lLCBzZXJ2aWNlOiBzZXJ2aWNlLCBjb25maWd1cmF0aW9uOiBjb25maWd1cmF0aW9uLCBkaXNwb3NlOiBkaXNwb3NlIH07XG4gICAgfTtcbn1cbmV4cG9ydHMubG9jYXRpb25QbHVnaW5GYWN0b3J5ID0gbG9jYXRpb25QbHVnaW5GYWN0b3J5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi92YW5pbGxhL3V0aWxzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction __export(m) {\n    for (var p in m) {\n        if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @module common */ /** for typedoc */\n__export(__webpack_require__(0));\n__export(__webpack_require__(3));\n__export(__webpack_require__(16));\n__export(__webpack_require__(2));\n__export(__webpack_require__(1));\n__export(__webpack_require__(23));\n__export(__webpack_require__(5));\n__export(__webpack_require__(6));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2NvbW1vbi9pbmRleC5qcz85MTk5Il0sIm5hbWVzIjpbIl9fZXhwb3J0IiwibSIsInAiLCJleHBvcnRzIiwiaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsU0FBU0EsUUFBVCxDQUFrQkMsQ0FBbEIsRUFBcUI7QUFDakIsU0FBSyxJQUFJQyxDQUFULElBQWNELENBQWQ7QUFBaUIsWUFBSSxDQUFDRSxRQUFRQyxjQUFSLENBQXVCRixDQUF2QixDQUFMLEVBQWdDQyxRQUFRRCxDQUFSLElBQWFELEVBQUVDLENBQUYsQ0FBYjtBQUFqRDtBQUNIO0FBQ0RHLE9BQU9DLGNBQVAsQ0FBc0JILE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVJLE9BQU8sSUFBVCxFQUE3QztBQUNBLHFCLENBQXNCO0FBQ3RCUCxTQUFTLG1CQUFBUSxDQUFRLENBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLENBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLEVBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLENBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLENBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLEVBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLENBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLENBQVIsQ0FBVDtBQUNBIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqIEBtb2R1bGUgY29tbW9uICovIC8qKiBmb3IgdHlwZWRvYyAqL1xuX19leHBvcnQocmVxdWlyZShcIi4vY29tbW9uXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2NvcmVzZXJ2aWNlc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9nbG9iXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2hvZlwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9wcmVkaWNhdGVzXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3F1ZXVlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3N0cmluZ3NcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vdHJhY2VcIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi9jb21tb24vaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module core\n */\n/**\n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - The first argument to Hook Registration functions like [[TransitionService.onStart]]\n *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n */\nvar Glob = function () {\n    function Glob(text) {\n        this.text = text;\n        this.glob = text.split('.');\n        var regexpString = this.text.split('.').map(function (seg) {\n            if (seg === '**') return '(?:|(?:\\\\.[^.]*)*)';\n            if (seg === '*') return '\\\\.[^.]*';\n            return '\\\\.' + seg;\n        }).join('');\n        this.regexp = new RegExp(\"^\" + regexpString + \"$\");\n    }\n    Glob.prototype.matches = function (name) {\n        return this.regexp.test('.' + name);\n    };\n    /** Returns true if the string has glob-like characters in it */\n    Glob.is = function (text) {\n        return !!/[!,*]+/.exec(text);\n    };\n    /** Returns a glob from the string, or null if the string isn't Glob-like */\n    Glob.fromString = function (text) {\n        return Glob.is(text) ? new Glob(text) : null;\n    };\n    return Glob;\n}();\nexports.Glob = Glob;\n//# sourceMappingURL=glob.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2NvbW1vbi9nbG9iLmpzP2I0ODkiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJHbG9iIiwidGV4dCIsImdsb2IiLCJzcGxpdCIsInJlZ2V4cFN0cmluZyIsIm1hcCIsInNlZyIsImpvaW4iLCJyZWdleHAiLCJSZWdFeHAiLCJwcm90b3R5cGUiLCJtYXRjaGVzIiwibmFtZSIsInRlc3QiLCJpcyIsImV4ZWMiLCJmcm9tU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0E7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0RBLElBQUlDLE9BQVEsWUFBWTtBQUNwQixhQUFTQSxJQUFULENBQWNDLElBQWQsRUFBb0I7QUFDaEIsYUFBS0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsYUFBS0MsSUFBTCxHQUFZRCxLQUFLRSxLQUFMLENBQVcsR0FBWCxDQUFaO0FBQ0EsWUFBSUMsZUFBZSxLQUFLSCxJQUFMLENBQVVFLEtBQVYsQ0FBZ0IsR0FBaEIsRUFDZEUsR0FEYyxDQUNWLFVBQVVDLEdBQVYsRUFBZTtBQUNwQixnQkFBSUEsUUFBUSxJQUFaLEVBQ0ksT0FBTyxvQkFBUDtBQUNKLGdCQUFJQSxRQUFRLEdBQVosRUFDSSxPQUFPLFVBQVA7QUFDSixtQkFBTyxRQUFRQSxHQUFmO0FBQ0gsU0FQa0IsRUFPaEJDLElBUGdCLENBT1gsRUFQVyxDQUFuQjtBQVFBLGFBQUtDLE1BQUwsR0FBYyxJQUFJQyxNQUFKLENBQVcsTUFBTUwsWUFBTixHQUFxQixHQUFoQyxDQUFkO0FBQ0g7QUFDREosU0FBS1UsU0FBTCxDQUFlQyxPQUFmLEdBQXlCLFVBQVVDLElBQVYsRUFBZ0I7QUFDckMsZUFBTyxLQUFLSixNQUFMLENBQVlLLElBQVosQ0FBaUIsTUFBTUQsSUFBdkIsQ0FBUDtBQUNILEtBRkQ7QUFHQTtBQUNBWixTQUFLYyxFQUFMLEdBQVUsVUFBVWIsSUFBVixFQUFnQjtBQUN0QixlQUFPLENBQUMsQ0FBQyxTQUFTYyxJQUFULENBQWNkLElBQWQsQ0FBVDtBQUNILEtBRkQ7QUFHQTtBQUNBRCxTQUFLZ0IsVUFBTCxHQUFrQixVQUFVZixJQUFWLEVBQWdCO0FBQzlCLGVBQU9ELEtBQUtjLEVBQUwsQ0FBUWIsSUFBUixJQUFnQixJQUFJRCxJQUFKLENBQVNDLElBQVQsQ0FBaEIsR0FBaUMsSUFBeEM7QUFDSCxLQUZEO0FBR0EsV0FBT0QsSUFBUDtBQUNILENBMUJXLEVBQVo7QUEyQkFGLFFBQVFFLElBQVIsR0FBZUEsSUFBZjtBQUNBIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBjb3JlYXBpXG4gKiBAbW9kdWxlIGNvcmVcbiAqL1xuLyoqXG4gKiBNYXRjaGVzIHN0YXRlIG5hbWVzIHVzaW5nIGdsb2ItbGlrZSBwYXR0ZXJuIHN0cmluZ3MuXG4gKlxuICogR2xvYnMgY2FuIGJlIHVzZWQgaW4gc3BlY2lmaWMgQVBJcyBpbmNsdWRpbmc6XG4gKlxuICogLSBbW1N0YXRlU2VydmljZS5pc11dXG4gKiAtIFtbU3RhdGVTZXJ2aWNlLmluY2x1ZGVzXV1cbiAqIC0gVGhlIGZpcnN0IGFyZ3VtZW50IHRvIEhvb2sgUmVnaXN0cmF0aW9uIGZ1bmN0aW9ucyBsaWtlIFtbVHJhbnNpdGlvblNlcnZpY2Uub25TdGFydF1dXG4gKiAgICAtIFtbSG9va01hdGNoQ3JpdGVyaWFdXSBhbmQgW1tIb29rTWF0Y2hDcml0ZXJpb25dXVxuICpcbiAqIEEgYEdsb2JgIHN0cmluZyBpcyBhIHBhdHRlcm4gd2hpY2ggbWF0Y2hlcyBzdGF0ZSBuYW1lcy5cbiAqIE5lc3RlZCBzdGF0ZSBuYW1lcyBhcmUgc3BsaXQgaW50byBzZWdtZW50cyAoc2VwYXJhdGVkIGJ5IGEgZG90KSB3aGVuIHByb2Nlc3NpbmcuXG4gKiBUaGUgc3RhdGUgbmFtZWQgYGZvby5iYXIuYmF6YCBpcyBzcGxpdCBpbnRvIHRocmVlIHNlZ21lbnRzIFsnZm9vJywgJ2JhcicsICdiYXonXVxuICpcbiAqIEdsb2JzIHdvcmsgYWNjb3JkaW5nIHRvIHRoZSBmb2xsb3dpbmcgcnVsZXM6XG4gKlxuICogIyMjIEV4YWN0IG1hdGNoOlxuICpcbiAqIFRoZSBnbG9iIGAnQS5CJ2AgbWF0Y2hlcyB0aGUgc3RhdGUgbmFtZWQgZXhhY3RseSBgJ0EuQidgLlxuICpcbiAqIHwgR2xvYiAgICAgICAgfE1hdGNoZXMgc3RhdGVzIG5hbWVkfERvZXMgbm90IG1hdGNoIHN0YXRlIG5hbWVkfFxuICogfDotLS0tLS0tLS0tLS18Oi0tLS0tLS0tLS0tLS0tLS0tLS0tfDotLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IGAnQSdgICAgICAgIHwgYCdBJ2AgICAgICAgICAgICAgICB8IGAnQidgICwgYCdBLkMnYCAgICAgIHxcbiAqIHwgYCdBLkInYCAgICAgfCBgJ0EuQidgICAgICAgICAgICAgIHwgYCdBJ2AgLCBgJ0EuQi5DJ2AgICAgfFxuICogfCBgJ2ZvbydgICAgICB8IGAnZm9vJ2AgICAgICAgICAgICAgfCBgJ0ZPTydgICwgYCdmb28uYmFyJ2B8XG4gKlxuICogIyMjIFNpbmdsZSBzdGFyIChgKmApXG4gKlxuICogQSBzaW5nbGUgc3RhciAoYCpgKSBpcyBhIHdpbGRjYXJkIHRoYXQgbWF0Y2hlcyBleGFjdGx5IG9uZSBzZWdtZW50LlxuICpcbiAqIHwgR2xvYiAgICAgICAgfE1hdGNoZXMgc3RhdGVzIG5hbWVkICB8RG9lcyBub3QgbWF0Y2ggc3RhdGUgbmFtZWQgfFxuICogfDotLS0tLS0tLS0tLS18Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLXw6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IGAnKidgICAgICAgIHwgYCdBJ2AgLCBgJ1onYCAgICAgICAgfCBgJ0EuQidgICwgYCdaLlkuWCdgICAgICAgIHxcbiAqIHwgYCdBLionYCAgICAgfCBgJ0EuQidgICwgYCdBLkMnYCAgICB8IGAnQSdgICwgYCdBLkIuQydgICAgICAgICAgfFxuICogfCBgJ0EuKi4qJ2AgICB8IGAnQS5CLkMnYCAsIGAnQS5YLlknYHwgYCdBJ2AsIGAnQS5CJ2AgLCBgJ1ouWS5YJ2B8XG4gKlxuICogIyMjIERvdWJsZSBzdGFyIChgKipgKVxuICpcbiAqIEEgZG91YmxlIHN0YXIgKGAnKionYCkgaXMgYSB3aWxkY2FyZCB0aGF0IG1hdGNoZXMgKnplcm8gb3IgbW9yZSBzZWdtZW50cypcbiAqXG4gKiB8IEdsb2IgICAgICAgIHxNYXRjaGVzIHN0YXRlcyBuYW1lZCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxEb2VzIG5vdCBtYXRjaCBzdGF0ZSBuYW1lZCAgICAgICAgIHxcbiAqIHw6LS0tLS0tLS0tLS0tfDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCBgJyoqJ2AgICAgICB8IGAnQSdgICwgYCdBLkInYCwgYCdaLlkuWCdgICAgICAgICAgICAgICAgICAgICB8IChtYXRjaGVzIGFsbCBzdGF0ZXMpICAgICAgICAgICAgICB8XG4gKiB8IGAnQS4qKidgICAgIHwgYCdBJ2AgLCBgJ0EuQidgICwgYCdBLkMuWCdgICAgICAgICAgICAgICAgICAgIHwgYCdaLlkuWCdgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCcqKi5YJ2AgICAgfCBgJ1gnYCAsIGAnQS5YJ2AgLCBgJ1ouWS5YJ2AgICAgICAgICAgICAgICAgICAgfCBgJ0EnYCAsIGAnQS5sb2dpbi5aJ2AgICAgICAgICAgICAgfFxuICogfCBgJ0EuKiouWCdgICB8IGAnQS5YJ2AgLCBgJ0EuQi5YJ2AgLCBgJ0EuQi5DLlgnYCAgICAgICAgICAgICB8IGAnQSdgICwgYCdBLkIuQydgICAgICAgICAgICAgICAgICB8XG4gKlxuICovXG52YXIgR2xvYiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR2xvYih0ZXh0KSB7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMuZ2xvYiA9IHRleHQuc3BsaXQoJy4nKTtcbiAgICAgICAgdmFyIHJlZ2V4cFN0cmluZyA9IHRoaXMudGV4dC5zcGxpdCgnLicpXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzZWcpIHtcbiAgICAgICAgICAgIGlmIChzZWcgPT09ICcqKicpXG4gICAgICAgICAgICAgICAgcmV0dXJuICcoPzp8KD86XFxcXC5bXi5dKikqKSc7XG4gICAgICAgICAgICBpZiAoc2VnID09PSAnKicpXG4gICAgICAgICAgICAgICAgcmV0dXJuICdcXFxcLlteLl0qJztcbiAgICAgICAgICAgIHJldHVybiAnXFxcXC4nICsgc2VnO1xuICAgICAgICB9KS5qb2luKCcnKTtcbiAgICAgICAgdGhpcy5yZWdleHAgPSBuZXcgUmVnRXhwKFwiXlwiICsgcmVnZXhwU3RyaW5nICsgXCIkXCIpO1xuICAgIH1cbiAgICBHbG9iLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnZXhwLnRlc3QoJy4nICsgbmFtZSk7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0cnVlIGlmIHRoZSBzdHJpbmcgaGFzIGdsb2ItbGlrZSBjaGFyYWN0ZXJzIGluIGl0ICovXG4gICAgR2xvYi5pcyA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIHJldHVybiAhIS9bISwqXSsvLmV4ZWModGV4dCk7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyBhIGdsb2IgZnJvbSB0aGUgc3RyaW5nLCBvciBudWxsIGlmIHRoZSBzdHJpbmcgaXNuJ3QgR2xvYi1saWtlICovXG4gICAgR2xvYi5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIEdsb2IuaXModGV4dCkgPyBuZXcgR2xvYih0ZXh0KSA6IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gR2xvYjtcbn0oKSk7XG5leHBvcnRzLkdsb2IgPSBHbG9iO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYi5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2NvbW1vbi9nbG9iLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nvar trace_1 = __webpack_require__(6);\nvar coreservices_1 = __webpack_require__(3);\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\nvar hof_1 = __webpack_require__(2);\nvar interface_1 = __webpack_require__(8); // has or is using\nvar transitionHook_1 = __webpack_require__(12);\nvar hookRegistry_1 = __webpack_require__(24);\nvar hookBuilder_1 = __webpack_require__(30);\nvar pathFactory_1 = __webpack_require__(18);\nvar targetState_1 = __webpack_require__(7);\nvar param_1 = __webpack_require__(9);\nvar resolvable_1 = __webpack_require__(13);\nvar resolveContext_1 = __webpack_require__(19);\n/** @hidden */\nvar stateSelf = hof_1.prop(\"self\");\n/**\n * Represents a transition between two states.\n *\n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n *\n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nvar Transition = function () {\n    /**\n     * Creates a new Transition object.\n     *\n     * If the target state is not valid, an error is thrown.\n     *\n     * @internalapi\n     *\n     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n     *        encapsulates the \"from state\".\n     * @param targetState The target state and parameters being transitioned to (also, the transition options)\n     * @param router The [[UIRouter]] instance\n     */\n    function Transition(fromPath, targetState, router) {\n        var _this = this;\n        /** @hidden */\n        this._deferred = coreservices_1.services.$q.defer();\n        /**\n         * This promise is resolved or rejected based on the outcome of the Transition.\n         *\n         * When the transition is successful, the promise is resolved\n         * When the transition is unsuccessful, the promise is rejected with the [[Rejection]] or javascript error\n         */\n        this.promise = this._deferred.promise;\n        /** @hidden Holds the hook registration functions such as those passed to Transition.onStart() */\n        this._registeredHooks = {};\n        /** @hidden */\n        this._hookBuilder = new hookBuilder_1.HookBuilder(this);\n        /** Checks if this transition is currently active/running. */\n        this.isActive = function () {\n            return _this.router.globals.transition === _this;\n        };\n        this.router = router;\n        this._targetState = targetState;\n        if (!targetState.valid()) {\n            throw new Error(targetState.error());\n        }\n        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());\n        this.$id = router.transitionService._transitionCount++;\n        var toPath = pathFactory_1.PathUtils.buildToPath(fromPath, targetState);\n        this._treeChanges = pathFactory_1.PathUtils.treeChanges(fromPath, toPath, this._options.reloadState);\n        this.createTransitionHookRegFns();\n        var onCreateHooks = this._hookBuilder.buildHooksForPhase(interface_1.TransitionHookPhase.CREATE);\n        transitionHook_1.TransitionHook.invokeHooks(onCreateHooks, function () {\n            return null;\n        });\n        this.applyViewConfigs(router);\n    }\n    /** @hidden */\n    Transition.prototype.onBefore = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onStart = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onExit = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onRetain = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onEnter = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onFinish = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onSuccess = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onError = function (criteria, callback, options) {\n        return;\n    };\n    /** @hidden\n     * Creates the transition-level hook registration functions\n     * (which can then be used to register hooks)\n     */\n    Transition.prototype.createTransitionHookRegFns = function () {\n        var _this = this;\n        this.router.transitionService._pluginapi._getEvents().filter(function (type) {\n            return type.hookPhase !== interface_1.TransitionHookPhase.CREATE;\n        }).forEach(function (type) {\n            return hookRegistry_1.makeEvent(_this, _this.router.transitionService, type);\n        });\n    };\n    /** @internalapi */\n    Transition.prototype.getHooks = function (hookName) {\n        return this._registeredHooks[hookName];\n    };\n    Transition.prototype.applyViewConfigs = function (router) {\n        var enteringStates = this._treeChanges.entering.map(function (node) {\n            return node.state;\n        });\n        pathFactory_1.PathUtils.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n    };\n    /**\n     * @internalapi\n     *\n     * @returns the internal from [State] object\n     */\n    Transition.prototype.$from = function () {\n        return common_1.tail(this._treeChanges.from).state;\n    };\n    /**\n     * @internalapi\n     *\n     * @returns the internal to [State] object\n     */\n    Transition.prototype.$to = function () {\n        return common_1.tail(this._treeChanges.to).state;\n    };\n    /**\n     * Returns the \"from state\"\n     *\n     * Returns the state that the transition is coming *from*.\n     *\n     * @returns The state declaration object for the Transition's (\"from state\").\n     */\n    Transition.prototype.from = function () {\n        return this.$from().self;\n    };\n    /**\n     * Returns the \"to state\"\n     *\n     * Returns the state that the transition is going *to*.\n     *\n     * @returns The state declaration object for the Transition's target state (\"to state\").\n     */\n    Transition.prototype.to = function () {\n        return this.$to().self;\n    };\n    /**\n     * Gets the Target State\n     *\n     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]] as a single object.\n     *\n     * @returns the [[TargetState]] of this Transition\n     */\n    Transition.prototype.targetState = function () {\n        return this._targetState;\n    };\n    /**\n     * Determines whether two transitions are equivalent.\n     * @deprecated\n     */\n    Transition.prototype.is = function (compare) {\n        if (compare instanceof Transition) {\n            // TODO: Also compare parameters\n            return this.is({ to: compare.$to().name, from: compare.$from().name });\n        }\n        return !(compare.to && !hookRegistry_1.matchState(this.$to(), compare.to) || compare.from && !hookRegistry_1.matchState(this.$from(), compare.from));\n    };\n    Transition.prototype.params = function (pathname) {\n        if (pathname === void 0) {\n            pathname = \"to\";\n        }\n        return Object.freeze(this._treeChanges[pathname].map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {}));\n    };\n    /**\n     * Creates a [[UIInjector]] Dependency Injector\n     *\n     * Returns a Dependency Injector for the Transition's target state (to state).\n     * The injector provides resolve values which the target state has access to.\n     *\n     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n     *\n     * #### Example:\n     * ```js\n     * .onEnter({ entering: 'myState' }, trans => {\n     *   var myResolveValue = trans.injector().get('myResolve');\n     *   // Inject a global service from the global/native injector (if it exists)\n     *   var MyService = trans.injector().get('MyService');\n     * })\n     * ```\n     *\n     * In some cases (such as `onBefore`), you may need access to some resolve data but it has not yet been fetched.\n     * You can use [[UIInjector.getAsync]] to get a promise for the data.\n     * #### Example:\n     * ```js\n     * .onBefore({}, trans => {\n     *   return trans.injector().getAsync('myResolve').then(myResolveValue =>\n     *     return myResolveValue !== 'ABORT';\n     *   });\n     * });\n     * ```\n     *\n     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n     * This can be useful if both a parent state `foo` and a child state `foo.bar` have both defined a resolve such as `data`.\n     * #### Example:\n     * ```js\n     * .onEnter({ to: 'foo.bar' }, trans => {\n     *   // returns result of `foo` state's `data` resolve\n     *   // even though `foo.bar` also has a `data` resolve\n     *   var fooData = trans.injector('foo').get('data');\n     * });\n     * ```\n     *\n     * If you need resolve data from the exiting states, pass `'from'` as `pathName`.\n     * The resolve data from the `from` path will be returned.\n     * #### Example:\n     * ```js\n     * .onExit({ exiting: 'foo.bar' }, trans => {\n     *   // Gets the resolve value of `data` from the exiting state.\n     *   var fooData = trans.injector(null, 'foo.bar').get('data');\n     * });\n     * ```\n     *\n     *\n     * @param state Limits the resolves provided to only the resolves the provided state has access to.\n     * @param pathName Default: `'to'`: Chooses the path for which to create the injector. Use this to access resolves for `exiting` states.\n     *\n     * @returns a [[UIInjector]]\n     */\n    Transition.prototype.injector = function (state, pathName) {\n        if (pathName === void 0) {\n            pathName = \"to\";\n        }\n        var path = this._treeChanges[pathName];\n        if (state) path = pathFactory_1.PathUtils.subPath(path, function (node) {\n            return node.state === state || node.state.name === state;\n        });\n        return new resolveContext_1.ResolveContext(path).injector();\n    };\n    /**\n     * Gets all available resolve tokens (keys)\n     *\n     * This method can be used in conjunction with [[injector]] to inspect the resolve values\n     * available to the Transition.\n     *\n     * This returns all the tokens defined on [[StateDeclaration.resolve]] blocks, for the states\n     * in the Transition's [[TreeChanges.to]] path.\n     *\n     * #### Example:\n     * This example logs all resolve values\n     * ```js\n     * let tokens = trans.getResolveTokens();\n     * tokens.forEach(token => console.log(token + \" = \" + trans.injector().get(token)));\n     * ```\n     *\n     * #### Example:\n     * This example creates promises for each resolve value.\n     * This triggers fetches of resolves (if any have not yet been fetched).\n     * When all promises have all settled, it logs the resolve values.\n     * ```js\n     * let tokens = trans.getResolveTokens();\n     * let promise = tokens.map(token => trans.injector().getAsync(token));\n     * Promise.all(promises).then(values => console.log(\"Resolved values: \" + values));\n     * ```\n     *\n     * Note: Angular 1 users whould use `$q.all()`\n     *\n     * @param pathname resolve context's path name (e.g., `to` or `from`)\n     *\n     * @returns an array of resolve tokens (keys)\n     */\n    Transition.prototype.getResolveTokens = function (pathname) {\n        if (pathname === void 0) {\n            pathname = \"to\";\n        }\n        return new resolveContext_1.ResolveContext(this._treeChanges[pathname]).getTokens();\n    };\n    /**\n     * Dynamically adds a new [[Resolvable]] (i.e., [[StateDeclaration.resolve]]) to this transition.\n     *\n     * #### Example:\n     * ```js\n     * transitionService.onBefore({}, transition => {\n     *   transition.addResolvable({\n     *     token: 'myResolve',\n     *     deps: ['MyService'],\n     *     resolveFn: myService => myService.getData()\n     *   });\n     * });\n     * ```\n     *\n     * @param resolvable a [[ResolvableLiteral]] object (or a [[Resolvable]])\n     * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n     */\n    Transition.prototype.addResolvable = function (resolvable, state) {\n        if (state === void 0) {\n            state = \"\";\n        }\n        resolvable = hof_1.is(resolvable_1.Resolvable)(resolvable) ? resolvable : new resolvable_1.Resolvable(resolvable);\n        var stateName = typeof state === \"string\" ? state : state.name;\n        var topath = this._treeChanges.to;\n        var targetNode = common_1.find(topath, function (node) {\n            return node.state.name === stateName;\n        });\n        var resolveContext = new resolveContext_1.ResolveContext(topath);\n        resolveContext.addResolvables([resolvable], targetNode.state);\n    };\n    /**\n     * Gets the transition from which this transition was redirected.\n     *\n     * If the current transition is a redirect, this method returns the transition that was redirected.\n     *\n     * #### Example:\n     * ```js\n     * let transitionA = $state.go('A').transition\n     * transitionA.onStart({}, () => $state.target('B'));\n     * $transitions.onSuccess({ to: 'B' }, (trans) => {\n     *   trans.to().name === 'B'; // true\n     *   trans.redirectedFrom() === transitionA; // true\n     * });\n     * ```\n     *\n     * @returns The previous Transition, or null if this Transition is not the result of a redirection\n     */\n    Transition.prototype.redirectedFrom = function () {\n        return this._options.redirectedFrom || null;\n    };\n    /**\n     * Gets the original transition in a redirect chain\n     *\n     * A transition might belong to a long chain of multiple redirects.\n     * This method walks the [[redirectedFrom]] chain back to the original (first) transition in the chain.\n     *\n     * #### Example:\n     * ```js\n     * // states\n     * registry.register({ name: 'A', redirectTo: 'B' });\n     * registry.register({ name: 'B', redirectTo: 'C' });\n     * registry.register({ name: 'C', redirectTo: 'D' });\n     * registry.register({ name: 'D' });\n     *\n     * let transitionA = $state.go('A').transition\n     *\n     * $transitions.onSuccess({ to: 'D' }, (trans) => {\n     *   trans.to().name === 'D'; // true\n     *   trans.redirectedFrom().to().name === 'C'; // true\n     *   trans.originalTransition() === transitionA; // true\n     *   trans.originalTransition().to().name === 'A'; // true\n     * });\n     * ```\n     *\n     * @returns The original Transition that started a redirect chain\n     */\n    Transition.prototype.originalTransition = function () {\n        var rf = this.redirectedFrom();\n        return rf && rf.originalTransition() || this;\n    };\n    /**\n     * Get the transition options\n     *\n     * @returns the options for this Transition.\n     */\n    Transition.prototype.options = function () {\n        return this._options;\n    };\n    /**\n     * Gets the states being entered.\n     *\n     * @returns an array of states that will be entered during this transition.\n     */\n    Transition.prototype.entering = function () {\n        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);\n    };\n    /**\n     * Gets the states being exited.\n     *\n     * @returns an array of states that will be exited during this transition.\n     */\n    Transition.prototype.exiting = function () {\n        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();\n    };\n    /**\n     * Gets the states being retained.\n     *\n     * @returns an array of states that are already entered from a previous Transition, that will not be\n     *    exited during this Transition\n     */\n    Transition.prototype.retained = function () {\n        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);\n    };\n    /**\n     * Get the [[ViewConfig]]s associated with this Transition\n     *\n     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n     *\n     * @param pathname the name of the path to fetch views for:\n     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n     * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n     *\n     * @returns a list of ViewConfig objects for the given path.\n     */\n    Transition.prototype.views = function (pathname, state) {\n        if (pathname === void 0) {\n            pathname = \"entering\";\n        }\n        var path = this._treeChanges[pathname];\n        path = !state ? path : path.filter(hof_1.propEq('state', state));\n        return path.map(hof_1.prop(\"views\")).filter(common_1.identity).reduce(common_1.unnestR, []);\n    };\n    Transition.prototype.treeChanges = function (pathname) {\n        return pathname ? this._treeChanges[pathname] : this._treeChanges;\n    };\n    /**\n     * Creates a new transition that is a redirection of the current one.\n     *\n     * This transition can be returned from a [[TransitionService]] hook to\n     * redirect a transition to a new state and/or set of parameters.\n     *\n     * @internalapi\n     *\n     * @returns Returns a new [[Transition]] instance.\n     */\n    Transition.prototype.redirect = function (targetState) {\n        var redirects = 1,\n            trans = this;\n        while ((trans = trans.redirectedFrom()) != null) {\n            if (++redirects > 20) throw new Error(\"Too many consecutive Transition redirects (20+)\");\n        }\n        var redirectOpts = { redirectedFrom: this, source: \"redirect\" };\n        // If the original transition was caused by URL sync, then use { location: 'replace' }\n        // on the new transition (unless the target state explicitly specifies location: false).\n        // This causes the original url to be replaced with the url for the redirect target\n        // so the original url disappears from the browser history.\n        if (this.options().source === 'url' && targetState.options().location !== false) {\n            redirectOpts.location = 'replace';\n        }\n        var newOptions = common_1.extend({}, this.options(), targetState.options(), redirectOpts);\n        targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n        var originalEnteringNodes = this._treeChanges.entering;\n        var redirectEnteringNodes = newTransition._treeChanges.entering;\n        // --- Re-use resolve data from original transition ---\n        // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n        // (because of the redirect), the resolves fetched by the original transition are still valid in the\n        // redirected transition.\n        //\n        // This allows you to define a redirect on a parent state which depends on an async resolve value.\n        // You can wait for the resolve, then redirect to a child state based on the result.\n        // The redirected transition does not have to re-fetch the resolve.\n        // ---------------------------------------------------------\n        var nodeIsReloading = function nodeIsReloading(reloadState) {\n            return function (node) {\n                return reloadState && node.state.includes[reloadState.name];\n            };\n        };\n        // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n        var matchingEnteringNodes = pathFactory_1.PathUtils.matching(redirectEnteringNodes, originalEnteringNodes, pathFactory_1.PathUtils.nonDynamicParams).filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));\n        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n        matchingEnteringNodes.forEach(function (node, idx) {\n            node.resolvables = originalEnteringNodes[idx].resolvables;\n        });\n        return newTransition;\n    };\n    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n    Transition.prototype._changedParams = function () {\n        var tc = this._treeChanges;\n        /** Return undefined if it's not a \"dynamic\" transition, for the following reasons */\n        // If user explicitly wants a reload\n        if (this._options.reload) return undefined;\n        // If any states are exiting or entering\n        if (tc.exiting.length || tc.entering.length) return undefined;\n        // If to/from path lengths differ\n        if (tc.to.length !== tc.from.length) return undefined;\n        // If the to/from paths are different\n        var pathsDiffer = common_1.arrayTuples(tc.to, tc.from).map(function (tuple) {\n            return tuple[0].state !== tuple[1].state;\n        }).reduce(common_1.anyTrueR, false);\n        if (pathsDiffer) return undefined;\n        // Find any parameter values that differ\n        var nodeSchemas = tc.to.map(function (node) {\n            return node.paramSchema;\n        });\n        var _a = [tc.to, tc.from].map(function (path) {\n            return path.map(function (x) {\n                return x.paramValues;\n            });\n        }),\n            toValues = _a[0],\n            fromValues = _a[1];\n        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);\n        return tuples.map(function (_a) {\n            var schema = _a[0],\n                toVals = _a[1],\n                fromVals = _a[2];\n            return param_1.Param.changed(schema, toVals, fromVals);\n        }).reduce(common_1.unnestR, []);\n    };\n    /**\n     * Returns true if the transition is dynamic.\n     *\n     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n     *\n     * @returns true if the Transition is dynamic\n     */\n    Transition.prototype.dynamic = function () {\n        var changes = this._changedParams();\n        return !changes ? false : changes.map(function (x) {\n            return x.dynamic;\n        }).reduce(common_1.anyTrueR, false);\n    };\n    /**\n     * Returns true if the transition is ignored.\n     *\n     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n     *\n     * @returns true if the Transition is ignored.\n     */\n    Transition.prototype.ignored = function () {\n        return !!this._ignoredReason();\n    };\n    /** @hidden */\n    Transition.prototype._ignoredReason = function () {\n        var pending = this.router.globals.transition;\n        var reloadState = this._options.reloadState;\n        var same = function same(pathA, pathB) {\n            if (pathA.length !== pathB.length) return false;\n            var matching = pathFactory_1.PathUtils.matching(pathA, pathB);\n            return pathA.length === matching.filter(function (node) {\n                return !reloadState || !node.state.includes[reloadState.name];\n            }).length;\n        };\n        var newTC = this.treeChanges();\n        var pendTC = pending && pending.treeChanges();\n        if (pendTC && same(pendTC.to, newTC.to) && same(pendTC.exiting, newTC.exiting)) return \"SameAsPending\";\n        if (newTC.exiting.length === 0 && newTC.entering.length === 0 && same(newTC.from, newTC.to)) return \"SameAsCurrent\";\n    };\n    /**\n     * Runs the transition\n     *\n     * This method is generally called from the [[StateService.transitionTo]]\n     *\n     * @internalapi\n     *\n     * @returns a promise for a successful transition.\n     */\n    Transition.prototype.run = function () {\n        var _this = this;\n        var runAllHooks = transitionHook_1.TransitionHook.runAllHooks;\n        // Gets transition hooks array for the given phase\n        var getHooksFor = function getHooksFor(phase) {\n            return _this._hookBuilder.buildHooksForPhase(phase);\n        };\n        // When the chain is complete, then resolve or reject the deferred\n        var transitionSuccess = function transitionSuccess() {\n            trace_1.trace.traceSuccess(_this.$to(), _this);\n            _this.success = true;\n            _this._deferred.resolve(_this.to());\n            runAllHooks(getHooksFor(interface_1.TransitionHookPhase.SUCCESS));\n        };\n        var transitionError = function transitionError(reason) {\n            trace_1.trace.traceError(reason, _this);\n            _this.success = false;\n            _this._deferred.reject(reason);\n            _this._error = reason;\n            runAllHooks(getHooksFor(interface_1.TransitionHookPhase.ERROR));\n        };\n        var runTransition = function runTransition() {\n            // Wait to build the RUN hook chain until the BEFORE hooks are done\n            // This allows a BEFORE hook to dynamically add additional RUN hooks via the Transition object.\n            var allRunHooks = getHooksFor(interface_1.TransitionHookPhase.RUN);\n            var done = function done() {\n                return coreservices_1.services.$q.when(undefined);\n            };\n            return transitionHook_1.TransitionHook.invokeHooks(allRunHooks, done);\n        };\n        var startTransition = function startTransition() {\n            var globals = _this.router.globals;\n            globals.lastStartedTransitionId = _this.$id;\n            globals.transition = _this;\n            globals.transitionHistory.enqueue(_this);\n            trace_1.trace.traceTransitionStart(_this);\n            return coreservices_1.services.$q.when(undefined);\n        };\n        var allBeforeHooks = getHooksFor(interface_1.TransitionHookPhase.BEFORE);\n        transitionHook_1.TransitionHook.invokeHooks(allBeforeHooks, startTransition).then(runTransition).then(transitionSuccess, transitionError);\n        return this.promise;\n    };\n    /**\n     * Checks if the Transition is valid\n     *\n     * @returns true if the Transition is valid\n     */\n    Transition.prototype.valid = function () {\n        return !this.error() || this.success !== undefined;\n    };\n    /**\n     * Aborts this transition\n     *\n     * Imperative API to abort a Transition.\n     * This only applies to Transitions that are not yet complete.\n     */\n    Transition.prototype.abort = function () {\n        // Do not set flag if the transition is already complete\n        if (predicates_1.isUndefined(this.success)) {\n            this._aborted = true;\n        }\n    };\n    /**\n     * The Transition error reason.\n     *\n     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n     *\n     * @returns an error message explaining why the transition is invalid, or the reason the transition failed.\n     */\n    Transition.prototype.error = function () {\n        var state = this.$to();\n        if (state.self.abstract) return \"Cannot transition to abstract state '\" + state.name + \"'\";\n        if (!param_1.Param.validates(state.parameters(), this.params())) return \"Param values not valid for state '\" + state.name + \"'\";\n        if (this.success === false) return this._error;\n    };\n    /**\n     * A string representation of the Transition\n     *\n     * @returns A string representation of the Transition\n     */\n    Transition.prototype.toString = function () {\n        var fromStateOrName = this.from();\n        var toStateOrName = this.to();\n        var avoidEmptyHash = function avoidEmptyHash(params) {\n            return params[\"#\"] !== null && params[\"#\"] !== undefined ? params : common_1.omit(params, [\"#\"]);\n        };\n        // (X) means the to state is invalid.\n        var id = this.$id,\n            from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName,\n            fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))),\n            toValid = this.valid() ? \"\" : \"(X) \",\n            to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName,\n            toParams = common_1.toJson(avoidEmptyHash(this.params()));\n        return \"Transition#\" + id + \"( '\" + from + \"'\" + fromParams + \" -> \" + toValid + \"'\" + to + \"'\" + toParams + \" )\";\n    };\n    return Transition;\n}();\n/** @hidden */\nTransition.diToken = Transition;\nexports.Transition = Transition;\n//# sourceMappingURL=transition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcz82MTMzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHJhY2VfMSIsInJlcXVpcmUiLCJjb3Jlc2VydmljZXNfMSIsImNvbW1vbl8xIiwicHJlZGljYXRlc18xIiwiaG9mXzEiLCJpbnRlcmZhY2VfMSIsInRyYW5zaXRpb25Ib29rXzEiLCJob29rUmVnaXN0cnlfMSIsImhvb2tCdWlsZGVyXzEiLCJwYXRoRmFjdG9yeV8xIiwidGFyZ2V0U3RhdGVfMSIsInBhcmFtXzEiLCJyZXNvbHZhYmxlXzEiLCJyZXNvbHZlQ29udGV4dF8xIiwic3RhdGVTZWxmIiwicHJvcCIsIlRyYW5zaXRpb24iLCJmcm9tUGF0aCIsInRhcmdldFN0YXRlIiwicm91dGVyIiwiX3RoaXMiLCJfZGVmZXJyZWQiLCJzZXJ2aWNlcyIsIiRxIiwiZGVmZXIiLCJwcm9taXNlIiwiX3JlZ2lzdGVyZWRIb29rcyIsIl9ob29rQnVpbGRlciIsIkhvb2tCdWlsZGVyIiwiaXNBY3RpdmUiLCJnbG9iYWxzIiwidHJhbnNpdGlvbiIsIl90YXJnZXRTdGF0ZSIsInZhbGlkIiwiRXJyb3IiLCJlcnJvciIsIl9vcHRpb25zIiwiZXh0ZW5kIiwiY3VycmVudCIsInZhbCIsIm9wdGlvbnMiLCIkaWQiLCJ0cmFuc2l0aW9uU2VydmljZSIsIl90cmFuc2l0aW9uQ291bnQiLCJ0b1BhdGgiLCJQYXRoVXRpbHMiLCJidWlsZFRvUGF0aCIsIl90cmVlQ2hhbmdlcyIsInRyZWVDaGFuZ2VzIiwicmVsb2FkU3RhdGUiLCJjcmVhdGVUcmFuc2l0aW9uSG9va1JlZ0ZucyIsIm9uQ3JlYXRlSG9va3MiLCJidWlsZEhvb2tzRm9yUGhhc2UiLCJUcmFuc2l0aW9uSG9va1BoYXNlIiwiQ1JFQVRFIiwiVHJhbnNpdGlvbkhvb2siLCJpbnZva2VIb29rcyIsImFwcGx5Vmlld0NvbmZpZ3MiLCJwcm90b3R5cGUiLCJvbkJlZm9yZSIsImNyaXRlcmlhIiwiY2FsbGJhY2siLCJvblN0YXJ0Iiwib25FeGl0Iiwib25SZXRhaW4iLCJvbkVudGVyIiwib25GaW5pc2giLCJvblN1Y2Nlc3MiLCJvbkVycm9yIiwiX3BsdWdpbmFwaSIsIl9nZXRFdmVudHMiLCJmaWx0ZXIiLCJ0eXBlIiwiaG9va1BoYXNlIiwiZm9yRWFjaCIsIm1ha2VFdmVudCIsImdldEhvb2tzIiwiaG9va05hbWUiLCJlbnRlcmluZ1N0YXRlcyIsImVudGVyaW5nIiwibWFwIiwibm9kZSIsInN0YXRlIiwiJHZpZXciLCJ0byIsIiRmcm9tIiwidGFpbCIsImZyb20iLCIkdG8iLCJzZWxmIiwiaXMiLCJjb21wYXJlIiwibmFtZSIsIm1hdGNoU3RhdGUiLCJwYXJhbXMiLCJwYXRobmFtZSIsImZyZWV6ZSIsInJlZHVjZSIsIm1lcmdlUiIsImluamVjdG9yIiwicGF0aE5hbWUiLCJwYXRoIiwic3ViUGF0aCIsIlJlc29sdmVDb250ZXh0IiwiZ2V0UmVzb2x2ZVRva2VucyIsImdldFRva2VucyIsImFkZFJlc29sdmFibGUiLCJyZXNvbHZhYmxlIiwiUmVzb2x2YWJsZSIsInN0YXRlTmFtZSIsInRvcGF0aCIsInRhcmdldE5vZGUiLCJmaW5kIiwicmVzb2x2ZUNvbnRleHQiLCJhZGRSZXNvbHZhYmxlcyIsInJlZGlyZWN0ZWRGcm9tIiwib3JpZ2luYWxUcmFuc2l0aW9uIiwicmYiLCJleGl0aW5nIiwicmV2ZXJzZSIsInJldGFpbmVkIiwidmlld3MiLCJwcm9wRXEiLCJpZGVudGl0eSIsInVubmVzdFIiLCJyZWRpcmVjdCIsInJlZGlyZWN0cyIsInRyYW5zIiwicmVkaXJlY3RPcHRzIiwic291cmNlIiwibG9jYXRpb24iLCJuZXdPcHRpb25zIiwiVGFyZ2V0U3RhdGUiLCJpZGVudGlmaWVyIiwiJHN0YXRlIiwibmV3VHJhbnNpdGlvbiIsImNyZWF0ZSIsIm9yaWdpbmFsRW50ZXJpbmdOb2RlcyIsInJlZGlyZWN0RW50ZXJpbmdOb2RlcyIsIm5vZGVJc1JlbG9hZGluZyIsImluY2x1ZGVzIiwibWF0Y2hpbmdFbnRlcmluZ05vZGVzIiwibWF0Y2hpbmciLCJub25EeW5hbWljUGFyYW1zIiwibm90IiwiaWR4IiwicmVzb2x2YWJsZXMiLCJfY2hhbmdlZFBhcmFtcyIsInRjIiwicmVsb2FkIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwicGF0aHNEaWZmZXIiLCJhcnJheVR1cGxlcyIsInR1cGxlIiwiYW55VHJ1ZVIiLCJub2RlU2NoZW1hcyIsInBhcmFtU2NoZW1hIiwiX2EiLCJ4IiwicGFyYW1WYWx1ZXMiLCJ0b1ZhbHVlcyIsImZyb21WYWx1ZXMiLCJ0dXBsZXMiLCJzY2hlbWEiLCJ0b1ZhbHMiLCJmcm9tVmFscyIsIlBhcmFtIiwiY2hhbmdlZCIsImR5bmFtaWMiLCJjaGFuZ2VzIiwiaWdub3JlZCIsIl9pZ25vcmVkUmVhc29uIiwicGVuZGluZyIsInNhbWUiLCJwYXRoQSIsInBhdGhCIiwibmV3VEMiLCJwZW5kVEMiLCJydW4iLCJydW5BbGxIb29rcyIsImdldEhvb2tzRm9yIiwicGhhc2UiLCJ0cmFuc2l0aW9uU3VjY2VzcyIsInRyYWNlIiwidHJhY2VTdWNjZXNzIiwic3VjY2VzcyIsInJlc29sdmUiLCJTVUNDRVNTIiwidHJhbnNpdGlvbkVycm9yIiwicmVhc29uIiwidHJhY2VFcnJvciIsInJlamVjdCIsIl9lcnJvciIsIkVSUk9SIiwicnVuVHJhbnNpdGlvbiIsImFsbFJ1bkhvb2tzIiwiUlVOIiwiZG9uZSIsIndoZW4iLCJzdGFydFRyYW5zaXRpb24iLCJsYXN0U3RhcnRlZFRyYW5zaXRpb25JZCIsInRyYW5zaXRpb25IaXN0b3J5IiwiZW5xdWV1ZSIsInRyYWNlVHJhbnNpdGlvblN0YXJ0IiwiYWxsQmVmb3JlSG9va3MiLCJCRUZPUkUiLCJ0aGVuIiwiYWJvcnQiLCJpc1VuZGVmaW5lZCIsIl9hYm9ydGVkIiwiYWJzdHJhY3QiLCJ2YWxpZGF0ZXMiLCJwYXJhbWV0ZXJzIiwidG9TdHJpbmciLCJmcm9tU3RhdGVPck5hbWUiLCJ0b1N0YXRlT3JOYW1lIiwiYXZvaWRFbXB0eUhhc2giLCJvbWl0IiwiaWQiLCJpc09iamVjdCIsImZyb21QYXJhbXMiLCJ0b0pzb24iLCJ0b1ZhbGlkIiwidG9QYXJhbXMiLCJkaVRva2VuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0E7Ozs7QUFJQTtBQUNBLElBQUlDLFVBQVUsbUJBQUFDLENBQVEsQ0FBUixDQUFkO0FBQ0EsSUFBSUMsaUJBQWlCLG1CQUFBRCxDQUFRLENBQVIsQ0FBckI7QUFDQSxJQUFJRSxXQUFXLG1CQUFBRixDQUFRLENBQVIsQ0FBZjtBQUNBLElBQUlHLGVBQWUsbUJBQUFILENBQVEsQ0FBUixDQUFuQjtBQUNBLElBQUlJLFFBQVEsbUJBQUFKLENBQVEsQ0FBUixDQUFaO0FBQ0EsSUFBSUssY0FBYyxtQkFBQUwsQ0FBUSxDQUFSLENBQWxCLEMsQ0FBMEM7QUFDMUMsSUFBSU0sbUJBQW1CLG1CQUFBTixDQUFRLEVBQVIsQ0FBdkI7QUFDQSxJQUFJTyxpQkFBaUIsbUJBQUFQLENBQVEsRUFBUixDQUFyQjtBQUNBLElBQUlRLGdCQUFnQixtQkFBQVIsQ0FBUSxFQUFSLENBQXBCO0FBQ0EsSUFBSVMsZ0JBQWdCLG1CQUFBVCxDQUFRLEVBQVIsQ0FBcEI7QUFDQSxJQUFJVSxnQkFBZ0IsbUJBQUFWLENBQVEsQ0FBUixDQUFwQjtBQUNBLElBQUlXLFVBQVUsbUJBQUFYLENBQVEsQ0FBUixDQUFkO0FBQ0EsSUFBSVksZUFBZSxtQkFBQVosQ0FBUSxFQUFSLENBQW5CO0FBQ0EsSUFBSWEsbUJBQW1CLG1CQUFBYixDQUFRLEVBQVIsQ0FBdkI7QUFDQTtBQUNBLElBQUljLFlBQVlWLE1BQU1XLElBQU4sQ0FBVyxNQUFYLENBQWhCO0FBQ0E7Ozs7Ozs7O0FBUUEsSUFBSUMsYUFBYyxZQUFZO0FBQzFCOzs7Ozs7Ozs7Ozs7QUFZQSxh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LFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0EiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGNvcmVhcGlcbiAqIEBtb2R1bGUgdHJhbnNpdGlvblxuICovXG4vKiogZm9yIHR5cGVkb2MgKi9cbnZhciB0cmFjZV8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi90cmFjZVwiKTtcbnZhciBjb3Jlc2VydmljZXNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vY29yZXNlcnZpY2VzXCIpO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb21tb25cIik7XG52YXIgcHJlZGljYXRlc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9wcmVkaWNhdGVzXCIpO1xudmFyIGhvZl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9ob2ZcIik7XG52YXIgaW50ZXJmYWNlXzEgPSByZXF1aXJlKFwiLi9pbnRlcmZhY2VcIik7IC8vIGhhcyBvciBpcyB1c2luZ1xudmFyIHRyYW5zaXRpb25Ib29rXzEgPSByZXF1aXJlKFwiLi90cmFuc2l0aW9uSG9va1wiKTtcbnZhciBob29rUmVnaXN0cnlfMSA9IHJlcXVpcmUoXCIuL2hvb2tSZWdpc3RyeVwiKTtcbnZhciBob29rQnVpbGRlcl8xID0gcmVxdWlyZShcIi4vaG9va0J1aWxkZXJcIik7XG52YXIgcGF0aEZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuLi9wYXRoL3BhdGhGYWN0b3J5XCIpO1xudmFyIHRhcmdldFN0YXRlXzEgPSByZXF1aXJlKFwiLi4vc3RhdGUvdGFyZ2V0U3RhdGVcIik7XG52YXIgcGFyYW1fMSA9IHJlcXVpcmUoXCIuLi9wYXJhbXMvcGFyYW1cIik7XG52YXIgcmVzb2x2YWJsZV8xID0gcmVxdWlyZShcIi4uL3Jlc29sdmUvcmVzb2x2YWJsZVwiKTtcbnZhciByZXNvbHZlQ29udGV4dF8xID0gcmVxdWlyZShcIi4uL3Jlc29sdmUvcmVzb2x2ZUNvbnRleHRcIik7XG4vKiogQGhpZGRlbiAqL1xudmFyIHN0YXRlU2VsZiA9IGhvZl8xLnByb3AoXCJzZWxmXCIpO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgdHJhbnNpdGlvbiBiZXR3ZWVuIHR3byBzdGF0ZXMuXG4gKlxuICogV2hlbiBuYXZpZ2F0aW5nIHRvIGEgc3RhdGUsIHdlIGFyZSB0cmFuc2l0aW9uaW5nICoqZnJvbSoqIHRoZSBjdXJyZW50IHN0YXRlICoqdG8qKiB0aGUgbmV3IHN0YXRlLlxuICpcbiAqIFRoaXMgb2JqZWN0IGNvbnRhaW5zIGFsbCBjb250ZXh0dWFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0by9mcm9tIHN0YXRlcywgcGFyYW1ldGVycywgcmVzb2x2ZXMuXG4gKiBJdCBoYXMgaW5mb3JtYXRpb24gYWJvdXQgYWxsIHN0YXRlcyBiZWluZyBlbnRlcmVkIGFuZCBleGl0ZWQgYXMgYSByZXN1bHQgb2YgdGhlIHRyYW5zaXRpb24uXG4gKi9cbnZhciBUcmFuc2l0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFRyYW5zaXRpb24gb2JqZWN0LlxuICAgICAqXG4gICAgICogSWYgdGhlIHRhcmdldCBzdGF0ZSBpcyBub3QgdmFsaWQsIGFuIGVycm9yIGlzIHRocm93bi5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbGFwaVxuICAgICAqXG4gICAgICogQHBhcmFtIGZyb21QYXRoIFRoZSBwYXRoIG9mIFtbUGF0aE5vZGVdXXMgZnJvbSB3aGljaCB0aGUgdHJhbnNpdGlvbiBpcyBsZWF2aW5nLiAgVGhlIGxhc3Qgbm9kZSBpbiB0aGUgYGZyb21QYXRoYFxuICAgICAqICAgICAgICBlbmNhcHN1bGF0ZXMgdGhlIFwiZnJvbSBzdGF0ZVwiLlxuICAgICAqIEBwYXJhbSB0YXJnZXRTdGF0ZSBUaGUgdGFyZ2V0IHN0YXRlIGFuZCBwYXJhbWV0ZXJzIGJlaW5nIHRyYW5zaXRpb25lZCB0byAoYWxzbywgdGhlIHRyYW5zaXRpb24gb3B0aW9ucylcbiAgICAgKiBAcGFyYW0gcm91dGVyIFRoZSBbW1VJUm91dGVyXV0gaW5zdGFuY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBUcmFuc2l0aW9uKGZyb21QYXRoLCB0YXJnZXRTdGF0ZSwgcm91dGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8qKiBAaGlkZGVuICovXG4gICAgICAgIHRoaXMuX2RlZmVycmVkID0gY29yZXNlcnZpY2VzXzEuc2VydmljZXMuJHEuZGVmZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgcHJvbWlzZSBpcyByZXNvbHZlZCBvciByZWplY3RlZCBiYXNlZCBvbiB0aGUgb3V0Y29tZSBvZiB0aGUgVHJhbnNpdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogV2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBzdWNjZXNzZnVsLCB0aGUgcHJvbWlzZSBpcyByZXNvbHZlZFxuICAgICAgICAgKiBXaGVuIHRoZSB0cmFuc2l0aW9uIGlzIHVuc3VjY2Vzc2Z1bCwgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQgd2l0aCB0aGUgW1tSZWplY3Rpb25dXSBvciBqYXZhc2NyaXB0IGVycm9yXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnByb21pc2UgPSB0aGlzLl9kZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAvKiogQGhpZGRlbiBIb2xkcyB0aGUgaG9vayByZWdpc3RyYXRpb24gZnVuY3Rpb25zIHN1Y2ggYXMgdGhvc2UgcGFzc2VkIHRvIFRyYW5zaXRpb24ub25TdGFydCgpICovXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyZWRIb29rcyA9IHt9O1xuICAgICAgICAvKiogQGhpZGRlbiAqL1xuICAgICAgICB0aGlzLl9ob29rQnVpbGRlciA9IG5ldyBob29rQnVpbGRlcl8xLkhvb2tCdWlsZGVyKHRoaXMpO1xuICAgICAgICAvKiogQ2hlY2tzIGlmIHRoaXMgdHJhbnNpdGlvbiBpcyBjdXJyZW50bHkgYWN0aXZlL3J1bm5pbmcuICovXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucm91dGVyLmdsb2JhbHMudHJhbnNpdGlvbiA9PT0gX3RoaXM7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xuICAgICAgICB0aGlzLl90YXJnZXRTdGF0ZSA9IHRhcmdldFN0YXRlO1xuICAgICAgICBpZiAoIXRhcmdldFN0YXRlLnZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0YXJnZXRTdGF0ZS5lcnJvcigpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjdXJyZW50KCkgaXMgYXNzdW1lZCB0byBjb21lIGZyb20gdGFyZ2V0U3RhdGUub3B0aW9ucywgYnV0IHByb3ZpZGUgYSBuYWl2ZSBpbXBsZW1lbnRhdGlvbiBvdGhlcndpc2UuXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBjb21tb25fMS5leHRlbmQoeyBjdXJyZW50OiBob2ZfMS52YWwodGhpcykgfSwgdGFyZ2V0U3RhdGUub3B0aW9ucygpKTtcbiAgICAgICAgdGhpcy4kaWQgPSByb3V0ZXIudHJhbnNpdGlvblNlcnZpY2UuX3RyYW5zaXRpb25Db3VudCsrO1xuICAgICAgICB2YXIgdG9QYXRoID0gcGF0aEZhY3RvcnlfMS5QYXRoVXRpbHMuYnVpbGRUb1BhdGgoZnJvbVBhdGgsIHRhcmdldFN0YXRlKTtcbiAgICAgICAgdGhpcy5fdHJlZUNoYW5nZXMgPSBwYXRoRmFjdG9yeV8xLlBhdGhVdGlscy50cmVlQ2hhbmdlcyhmcm9tUGF0aCwgdG9QYXRoLCB0aGlzLl9vcHRpb25zLnJlbG9hZFN0YXRlKTtcbiAgICAgICAgdGhpcy5jcmVhdGVUcmFuc2l0aW9uSG9va1JlZ0ZucygpO1xuICAgICAgICB2YXIgb25DcmVhdGVIb29rcyA9IHRoaXMuX2hvb2tCdWlsZGVyLmJ1aWxkSG9va3NGb3JQaGFzZShpbnRlcmZhY2VfMS5UcmFuc2l0aW9uSG9va1BoYXNlLkNSRUFURSk7XG4gICAgICAgIHRyYW5zaXRpb25Ib29rXzEuVHJhbnNpdGlvbkhvb2suaW52b2tlSG9va3Mob25DcmVhdGVIb29rcywgZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSk7XG4gICAgICAgIHRoaXMuYXBwbHlWaWV3Q29uZmlncyhyb3V0ZXIpO1xuICAgIH1cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLm9uQmVmb3JlID0gZnVuY3Rpb24gKGNyaXRlcmlhLCBjYWxsYmFjaywgb3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqIEBpbmhlcml0ZG9jICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUub25TdGFydCA9IGZ1bmN0aW9uIChjcml0ZXJpYSwgY2FsbGJhY2ssIG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLm9uRXhpdCA9IGZ1bmN0aW9uIChjcml0ZXJpYSwgY2FsbGJhY2ssIG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLm9uUmV0YWluID0gZnVuY3Rpb24gKGNyaXRlcmlhLCBjYWxsYmFjaywgb3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqIEBpbmhlcml0ZG9jICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUub25FbnRlciA9IGZ1bmN0aW9uIChjcml0ZXJpYSwgY2FsbGJhY2ssIG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLm9uRmluaXNoID0gZnVuY3Rpb24gKGNyaXRlcmlhLCBjYWxsYmFjaywgb3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqIEBpbmhlcml0ZG9jICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUub25TdWNjZXNzID0gZnVuY3Rpb24gKGNyaXRlcmlhLCBjYWxsYmFjaywgb3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqIEBpbmhlcml0ZG9jICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChjcml0ZXJpYSwgY2FsbGJhY2ssIG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKiBAaGlkZGVuXG4gICAgICogQ3JlYXRlcyB0aGUgdHJhbnNpdGlvbi1sZXZlbCBob29rIHJlZ2lzdHJhdGlvbiBmdW5jdGlvbnNcbiAgICAgKiAod2hpY2ggY2FuIHRoZW4gYmUgdXNlZCB0byByZWdpc3RlciBob29rcylcbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uLnByb3RvdHlwZS5jcmVhdGVUcmFuc2l0aW9uSG9va1JlZ0ZucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5yb3V0ZXIudHJhbnNpdGlvblNlcnZpY2UuX3BsdWdpbmFwaS5fZ2V0RXZlbnRzKClcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIHR5cGUuaG9va1BoYXNlICE9PSBpbnRlcmZhY2VfMS5UcmFuc2l0aW9uSG9va1BoYXNlLkNSRUFURTsgfSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7IHJldHVybiBob29rUmVnaXN0cnlfMS5tYWtlRXZlbnQoX3RoaXMsIF90aGlzLnJvdXRlci50cmFuc2l0aW9uU2VydmljZSwgdHlwZSk7IH0pO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbGFwaSAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLmdldEhvb2tzID0gZnVuY3Rpb24gKGhvb2tOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWdpc3RlcmVkSG9va3NbaG9va05hbWVdO1xuICAgIH07XG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUuYXBwbHlWaWV3Q29uZmlncyA9IGZ1bmN0aW9uIChyb3V0ZXIpIHtcbiAgICAgICAgdmFyIGVudGVyaW5nU3RhdGVzID0gdGhpcy5fdHJlZUNoYW5nZXMuZW50ZXJpbmcubWFwKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlLnN0YXRlOyB9KTtcbiAgICAgICAgcGF0aEZhY3RvcnlfMS5QYXRoVXRpbHMuYXBwbHlWaWV3Q29uZmlncyhyb3V0ZXIudHJhbnNpdGlvblNlcnZpY2UuJHZpZXcsIHRoaXMuX3RyZWVDaGFuZ2VzLnRvLCBlbnRlcmluZ1N0YXRlcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxhcGlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHRoZSBpbnRlcm5hbCBmcm9tIFtTdGF0ZV0gb2JqZWN0XG4gICAgICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUuJGZyb20gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjb21tb25fMS50YWlsKHRoaXMuX3RyZWVDaGFuZ2VzLmZyb20pLnN0YXRlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGludGVybmFsYXBpXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0aGUgaW50ZXJuYWwgdG8gW1N0YXRlXSBvYmplY3RcbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uLnByb3RvdHlwZS4kdG8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjb21tb25fMS50YWlsKHRoaXMuX3RyZWVDaGFuZ2VzLnRvKS5zdGF0ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFwiZnJvbSBzdGF0ZVwiXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIHRoZSBzdGF0ZSB0aGF0IHRoZSB0cmFuc2l0aW9uIGlzIGNvbWluZyAqZnJvbSouXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc3RhdGUgZGVjbGFyYXRpb24gb2JqZWN0IGZvciB0aGUgVHJhbnNpdGlvbidzIChcImZyb20gc3RhdGVcIikuXG4gICAgICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUuZnJvbSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGZyb20oKS5zZWxmO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgXCJ0byBzdGF0ZVwiXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIHRoZSBzdGF0ZSB0aGF0IHRoZSB0cmFuc2l0aW9uIGlzIGdvaW5nICp0byouXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc3RhdGUgZGVjbGFyYXRpb24gb2JqZWN0IGZvciB0aGUgVHJhbnNpdGlvbidzIHRhcmdldCBzdGF0ZSAoXCJ0byBzdGF0ZVwiKS5cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHRvKCkuc2VsZjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIFRhcmdldCBTdGF0ZVxuICAgICAqXG4gICAgICogQSB0cmFuc2l0aW9uJ3MgW1tUYXJnZXRTdGF0ZV1dIGVuY2Fwc3VsYXRlcyB0aGUgW1t0b11dIHN0YXRlLCB0aGUgW1twYXJhbXNdXSwgYW5kIHRoZSBbW29wdGlvbnNdXSBhcyBhIHNpbmdsZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0aGUgW1tUYXJnZXRTdGF0ZV1dIG9mIHRoaXMgVHJhbnNpdGlvblxuICAgICAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLnRhcmdldFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0U3RhdGU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdHdvIHRyYW5zaXRpb25zIGFyZSBlcXVpdmFsZW50LlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUuaXMgPSBmdW5jdGlvbiAoY29tcGFyZSkge1xuICAgICAgICBpZiAoY29tcGFyZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIC8vIFRPRE86IEFsc28gY29tcGFyZSBwYXJhbWV0ZXJzXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pcyh7IHRvOiBjb21wYXJlLiR0bygpLm5hbWUsIGZyb206IGNvbXBhcmUuJGZyb20oKS5uYW1lIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhKChjb21wYXJlLnRvICYmICFob29rUmVnaXN0cnlfMS5tYXRjaFN0YXRlKHRoaXMuJHRvKCksIGNvbXBhcmUudG8pKSB8fFxuICAgICAgICAgICAgKGNvbXBhcmUuZnJvbSAmJiAhaG9va1JlZ2lzdHJ5XzEubWF0Y2hTdGF0ZSh0aGlzLiRmcm9tKCksIGNvbXBhcmUuZnJvbSkpKTtcbiAgICB9O1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLnBhcmFtcyA9IGZ1bmN0aW9uIChwYXRobmFtZSkge1xuICAgICAgICBpZiAocGF0aG5hbWUgPT09IHZvaWQgMCkgeyBwYXRobmFtZSA9IFwidG9cIjsgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh0aGlzLl90cmVlQ2hhbmdlc1twYXRobmFtZV0ubWFwKGhvZl8xLnByb3AoXCJwYXJhbVZhbHVlc1wiKSkucmVkdWNlKGNvbW1vbl8xLm1lcmdlUiwge30pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBbW1VJSW5qZWN0b3JdXSBEZXBlbmRlbmN5IEluamVjdG9yXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGEgRGVwZW5kZW5jeSBJbmplY3RvciBmb3IgdGhlIFRyYW5zaXRpb24ncyB0YXJnZXQgc3RhdGUgKHRvIHN0YXRlKS5cbiAgICAgKiBUaGUgaW5qZWN0b3IgcHJvdmlkZXMgcmVzb2x2ZSB2YWx1ZXMgd2hpY2ggdGhlIHRhcmdldCBzdGF0ZSBoYXMgYWNjZXNzIHRvLlxuICAgICAqXG4gICAgICogVGhlIGBVSUluamVjdG9yYCBjYW4gYWxzbyBwcm92aWRlIHZhbHVlcyBmcm9tIHRoZSBuYXRpdmUgcm9vdC9nbG9iYWwgaW5qZWN0b3IgKG5nMS9uZzIpLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogLm9uRW50ZXIoeyBlbnRlcmluZzogJ215U3RhdGUnIH0sIHRyYW5zID0+IHtcbiAgICAgKiAgIHZhciBteVJlc29sdmVWYWx1ZSA9IHRyYW5zLmluamVjdG9yKCkuZ2V0KCdteVJlc29sdmUnKTtcbiAgICAgKiAgIC8vIEluamVjdCBhIGdsb2JhbCBzZXJ2aWNlIGZyb20gdGhlIGdsb2JhbC9uYXRpdmUgaW5qZWN0b3IgKGlmIGl0IGV4aXN0cylcbiAgICAgKiAgIHZhciBNeVNlcnZpY2UgPSB0cmFucy5pbmplY3RvcigpLmdldCgnTXlTZXJ2aWNlJyk7XG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEluIHNvbWUgY2FzZXMgKHN1Y2ggYXMgYG9uQmVmb3JlYCksIHlvdSBtYXkgbmVlZCBhY2Nlc3MgdG8gc29tZSByZXNvbHZlIGRhdGEgYnV0IGl0IGhhcyBub3QgeWV0IGJlZW4gZmV0Y2hlZC5cbiAgICAgKiBZb3UgY2FuIHVzZSBbW1VJSW5qZWN0b3IuZ2V0QXN5bmNdXSB0byBnZXQgYSBwcm9taXNlIGZvciB0aGUgZGF0YS5cbiAgICAgKiAjIyMjIEV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiAub25CZWZvcmUoe30sIHRyYW5zID0+IHtcbiAgICAgKiAgIHJldHVybiB0cmFucy5pbmplY3RvcigpLmdldEFzeW5jKCdteVJlc29sdmUnKS50aGVuKG15UmVzb2x2ZVZhbHVlID0+XG4gICAgICogICAgIHJldHVybiBteVJlc29sdmVWYWx1ZSAhPT0gJ0FCT1JUJztcbiAgICAgKiAgIH0pO1xuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogSWYgYSBgc3RhdGVgIGlzIHByb3ZpZGVkLCB0aGUgaW5qZWN0b3IgdGhhdCBpcyByZXR1cm5lZCB3aWxsIGJlIGxpbWl0ZWQgdG8gcmVzb2x2ZSB2YWx1ZXMgdGhhdCB0aGUgcHJvdmlkZWQgc3RhdGUgaGFzIGFjY2VzcyB0by5cbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VmdWwgaWYgYm90aCBhIHBhcmVudCBzdGF0ZSBgZm9vYCBhbmQgYSBjaGlsZCBzdGF0ZSBgZm9vLmJhcmAgaGF2ZSBib3RoIGRlZmluZWQgYSByZXNvbHZlIHN1Y2ggYXMgYGRhdGFgLlxuICAgICAqICMjIyMgRXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIC5vbkVudGVyKHsgdG86ICdmb28uYmFyJyB9LCB0cmFucyA9PiB7XG4gICAgICogICAvLyByZXR1cm5zIHJlc3VsdCBvZiBgZm9vYCBzdGF0ZSdzIGBkYXRhYCByZXNvbHZlXG4gICAgICogICAvLyBldmVuIHRob3VnaCBgZm9vLmJhcmAgYWxzbyBoYXMgYSBgZGF0YWAgcmVzb2x2ZVxuICAgICAqICAgdmFyIGZvb0RhdGEgPSB0cmFucy5pbmplY3RvcignZm9vJykuZ2V0KCdkYXRhJyk7XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBJZiB5b3UgbmVlZCByZXNvbHZlIGRhdGEgZnJvbSB0aGUgZXhpdGluZyBzdGF0ZXMsIHBhc3MgYCdmcm9tJ2AgYXMgYHBhdGhOYW1lYC5cbiAgICAgKiBUaGUgcmVzb2x2ZSBkYXRhIGZyb20gdGhlIGBmcm9tYCBwYXRoIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICogIyMjIyBFeGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogLm9uRXhpdCh7IGV4aXRpbmc6ICdmb28uYmFyJyB9LCB0cmFucyA9PiB7XG4gICAgICogICAvLyBHZXRzIHRoZSByZXNvbHZlIHZhbHVlIG9mIGBkYXRhYCBmcm9tIHRoZSBleGl0aW5nIHN0YXRlLlxuICAgICAqICAgdmFyIGZvb0RhdGEgPSB0cmFucy5pbmplY3RvcihudWxsLCAnZm9vLmJhcicpLmdldCgnZGF0YScpO1xuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhdGUgTGltaXRzIHRoZSByZXNvbHZlcyBwcm92aWRlZCB0byBvbmx5IHRoZSByZXNvbHZlcyB0aGUgcHJvdmlkZWQgc3RhdGUgaGFzIGFjY2VzcyB0by5cbiAgICAgKiBAcGFyYW0gcGF0aE5hbWUgRGVmYXVsdDogYCd0bydgOiBDaG9vc2VzIHRoZSBwYXRoIGZvciB3aGljaCB0byBjcmVhdGUgdGhlIGluamVjdG9yLiBVc2UgdGhpcyB0byBhY2Nlc3MgcmVzb2x2ZXMgZm9yIGBleGl0aW5nYCBzdGF0ZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIFtbVUlJbmplY3Rvcl1dXG4gICAgICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUuaW5qZWN0b3IgPSBmdW5jdGlvbiAoc3RhdGUsIHBhdGhOYW1lKSB7XG4gICAgICAgIGlmIChwYXRoTmFtZSA9PT0gdm9pZCAwKSB7IHBhdGhOYW1lID0gXCJ0b1wiOyB9XG4gICAgICAgIHZhciBwYXRoID0gdGhpcy5fdHJlZUNoYW5nZXNbcGF0aE5hbWVdO1xuICAgICAgICBpZiAoc3RhdGUpXG4gICAgICAgICAgICBwYXRoID0gcGF0aEZhY3RvcnlfMS5QYXRoVXRpbHMuc3ViUGF0aChwYXRoLCBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZS5zdGF0ZSA9PT0gc3RhdGUgfHwgbm9kZS5zdGF0ZS5uYW1lID09PSBzdGF0ZTsgfSk7XG4gICAgICAgIHJldHVybiBuZXcgcmVzb2x2ZUNvbnRleHRfMS5SZXNvbHZlQ29udGV4dChwYXRoKS5pbmplY3RvcigpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYXZhaWxhYmxlIHJlc29sdmUgdG9rZW5zIChrZXlzKVxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgY2FuIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBbW2luamVjdG9yXV0gdG8gaW5zcGVjdCB0aGUgcmVzb2x2ZSB2YWx1ZXNcbiAgICAgKiBhdmFpbGFibGUgdG8gdGhlIFRyYW5zaXRpb24uXG4gICAgICpcbiAgICAgKiBUaGlzIHJldHVybnMgYWxsIHRoZSB0b2tlbnMgZGVmaW5lZCBvbiBbW1N0YXRlRGVjbGFyYXRpb24ucmVzb2x2ZV1dIGJsb2NrcywgZm9yIHRoZSBzdGF0ZXNcbiAgICAgKiBpbiB0aGUgVHJhbnNpdGlvbidzIFtbVHJlZUNoYW5nZXMudG9dXSBwYXRoLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlOlxuICAgICAqIFRoaXMgZXhhbXBsZSBsb2dzIGFsbCByZXNvbHZlIHZhbHVlc1xuICAgICAqIGBgYGpzXG4gICAgICogbGV0IHRva2VucyA9IHRyYW5zLmdldFJlc29sdmVUb2tlbnMoKTtcbiAgICAgKiB0b2tlbnMuZm9yRWFjaCh0b2tlbiA9PiBjb25zb2xlLmxvZyh0b2tlbiArIFwiID0gXCIgKyB0cmFucy5pbmplY3RvcigpLmdldCh0b2tlbikpKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZTpcbiAgICAgKiBUaGlzIGV4YW1wbGUgY3JlYXRlcyBwcm9taXNlcyBmb3IgZWFjaCByZXNvbHZlIHZhbHVlLlxuICAgICAqIFRoaXMgdHJpZ2dlcnMgZmV0Y2hlcyBvZiByZXNvbHZlcyAoaWYgYW55IGhhdmUgbm90IHlldCBiZWVuIGZldGNoZWQpLlxuICAgICAqIFdoZW4gYWxsIHByb21pc2VzIGhhdmUgYWxsIHNldHRsZWQsIGl0IGxvZ3MgdGhlIHJlc29sdmUgdmFsdWVzLlxuICAgICAqIGBgYGpzXG4gICAgICogbGV0IHRva2VucyA9IHRyYW5zLmdldFJlc29sdmVUb2tlbnMoKTtcbiAgICAgKiBsZXQgcHJvbWlzZSA9IHRva2Vucy5tYXAodG9rZW4gPT4gdHJhbnMuaW5qZWN0b3IoKS5nZXRBc3luYyh0b2tlbikpO1xuICAgICAqIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKHZhbHVlcyA9PiBjb25zb2xlLmxvZyhcIlJlc29sdmVkIHZhbHVlczogXCIgKyB2YWx1ZXMpKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIE5vdGU6IEFuZ3VsYXIgMSB1c2VycyB3aG91bGQgdXNlIGAkcS5hbGwoKWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRobmFtZSByZXNvbHZlIGNvbnRleHQncyBwYXRoIG5hbWUgKGUuZy4sIGB0b2Agb3IgYGZyb21gKVxuICAgICAqXG4gICAgICogQHJldHVybnMgYW4gYXJyYXkgb2YgcmVzb2x2ZSB0b2tlbnMgKGtleXMpXG4gICAgICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUuZ2V0UmVzb2x2ZVRva2VucyA9IGZ1bmN0aW9uIChwYXRobmFtZSkge1xuICAgICAgICBpZiAocGF0aG5hbWUgPT09IHZvaWQgMCkgeyBwYXRobmFtZSA9IFwidG9cIjsgfVxuICAgICAgICByZXR1cm4gbmV3IHJlc29sdmVDb250ZXh0XzEuUmVzb2x2ZUNvbnRleHQodGhpcy5fdHJlZUNoYW5nZXNbcGF0aG5hbWVdKS5nZXRUb2tlbnMoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIER5bmFtaWNhbGx5IGFkZHMgYSBuZXcgW1tSZXNvbHZhYmxlXV0gKGkuZS4sIFtbU3RhdGVEZWNsYXJhdGlvbi5yZXNvbHZlXV0pIHRvIHRoaXMgdHJhbnNpdGlvbi5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIHRyYW5zaXRpb25TZXJ2aWNlLm9uQmVmb3JlKHt9LCB0cmFuc2l0aW9uID0+IHtcbiAgICAgKiAgIHRyYW5zaXRpb24uYWRkUmVzb2x2YWJsZSh7XG4gICAgICogICAgIHRva2VuOiAnbXlSZXNvbHZlJyxcbiAgICAgKiAgICAgZGVwczogWydNeVNlcnZpY2UnXSxcbiAgICAgKiAgICAgcmVzb2x2ZUZuOiBteVNlcnZpY2UgPT4gbXlTZXJ2aWNlLmdldERhdGEoKVxuICAgICAqICAgfSk7XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVzb2x2YWJsZSBhIFtbUmVzb2x2YWJsZUxpdGVyYWxdXSBvYmplY3QgKG9yIGEgW1tSZXNvbHZhYmxlXV0pXG4gICAgICogQHBhcmFtIHN0YXRlIHRoZSBzdGF0ZSBpbiB0aGUgXCJ0byBwYXRoXCIgd2hpY2ggc2hvdWxkIHJlY2VpdmUgdGhlIG5ldyByZXNvbHZlIChvdGhlcndpc2UsIHRoZSByb290IHN0YXRlKVxuICAgICAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLmFkZFJlc29sdmFibGUgPSBmdW5jdGlvbiAocmVzb2x2YWJsZSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSBcIlwiOyB9XG4gICAgICAgIHJlc29sdmFibGUgPSBob2ZfMS5pcyhyZXNvbHZhYmxlXzEuUmVzb2x2YWJsZSkocmVzb2x2YWJsZSkgPyByZXNvbHZhYmxlIDogbmV3IHJlc29sdmFibGVfMS5SZXNvbHZhYmxlKHJlc29sdmFibGUpO1xuICAgICAgICB2YXIgc3RhdGVOYW1lID0gKHR5cGVvZiBzdGF0ZSA9PT0gXCJzdHJpbmdcIikgPyBzdGF0ZSA6IHN0YXRlLm5hbWU7XG4gICAgICAgIHZhciB0b3BhdGggPSB0aGlzLl90cmVlQ2hhbmdlcy50bztcbiAgICAgICAgdmFyIHRhcmdldE5vZGUgPSBjb21tb25fMS5maW5kKHRvcGF0aCwgZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIG5vZGUuc3RhdGUubmFtZSA9PT0gc3RhdGVOYW1lOyB9KTtcbiAgICAgICAgdmFyIHJlc29sdmVDb250ZXh0ID0gbmV3IHJlc29sdmVDb250ZXh0XzEuUmVzb2x2ZUNvbnRleHQodG9wYXRoKTtcbiAgICAgICAgcmVzb2x2ZUNvbnRleHQuYWRkUmVzb2x2YWJsZXMoW3Jlc29sdmFibGVdLCB0YXJnZXROb2RlLnN0YXRlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRyYW5zaXRpb24gZnJvbSB3aGljaCB0aGlzIHRyYW5zaXRpb24gd2FzIHJlZGlyZWN0ZWQuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgY3VycmVudCB0cmFuc2l0aW9uIGlzIGEgcmVkaXJlY3QsIHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIHRyYW5zaXRpb24gdGhhdCB3YXMgcmVkaXJlY3RlZC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGxldCB0cmFuc2l0aW9uQSA9ICRzdGF0ZS5nbygnQScpLnRyYW5zaXRpb25cbiAgICAgKiB0cmFuc2l0aW9uQS5vblN0YXJ0KHt9LCAoKSA9PiAkc3RhdGUudGFyZ2V0KCdCJykpO1xuICAgICAqICR0cmFuc2l0aW9ucy5vblN1Y2Nlc3MoeyB0bzogJ0InIH0sICh0cmFucykgPT4ge1xuICAgICAqICAgdHJhbnMudG8oKS5uYW1lID09PSAnQic7IC8vIHRydWVcbiAgICAgKiAgIHRyYW5zLnJlZGlyZWN0ZWRGcm9tKCkgPT09IHRyYW5zaXRpb25BOyAvLyB0cnVlXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgcHJldmlvdXMgVHJhbnNpdGlvbiwgb3IgbnVsbCBpZiB0aGlzIFRyYW5zaXRpb24gaXMgbm90IHRoZSByZXN1bHQgb2YgYSByZWRpcmVjdGlvblxuICAgICAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLnJlZGlyZWN0ZWRGcm9tID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5yZWRpcmVjdGVkRnJvbSB8fCBudWxsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgb3JpZ2luYWwgdHJhbnNpdGlvbiBpbiBhIHJlZGlyZWN0IGNoYWluXG4gICAgICpcbiAgICAgKiBBIHRyYW5zaXRpb24gbWlnaHQgYmVsb25nIHRvIGEgbG9uZyBjaGFpbiBvZiBtdWx0aXBsZSByZWRpcmVjdHMuXG4gICAgICogVGhpcyBtZXRob2Qgd2Fsa3MgdGhlIFtbcmVkaXJlY3RlZEZyb21dXSBjaGFpbiBiYWNrIHRvIHRoZSBvcmlnaW5hbCAoZmlyc3QpIHRyYW5zaXRpb24gaW4gdGhlIGNoYWluLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gc3RhdGVzXG4gICAgICogcmVnaXN0cnkucmVnaXN0ZXIoeyBuYW1lOiAnQScsIHJlZGlyZWN0VG86ICdCJyB9KTtcbiAgICAgKiByZWdpc3RyeS5yZWdpc3Rlcih7IG5hbWU6ICdCJywgcmVkaXJlY3RUbzogJ0MnIH0pO1xuICAgICAqIHJlZ2lzdHJ5LnJlZ2lzdGVyKHsgbmFtZTogJ0MnLCByZWRpcmVjdFRvOiAnRCcgfSk7XG4gICAgICogcmVnaXN0cnkucmVnaXN0ZXIoeyBuYW1lOiAnRCcgfSk7XG4gICAgICpcbiAgICAgKiBsZXQgdHJhbnNpdGlvbkEgPSAkc3RhdGUuZ28oJ0EnKS50cmFuc2l0aW9uXG4gICAgICpcbiAgICAgKiAkdHJhbnNpdGlvbnMub25TdWNjZXNzKHsgdG86ICdEJyB9LCAodHJhbnMpID0+IHtcbiAgICAgKiAgIHRyYW5zLnRvKCkubmFtZSA9PT0gJ0QnOyAvLyB0cnVlXG4gICAgICogICB0cmFucy5yZWRpcmVjdGVkRnJvbSgpLnRvKCkubmFtZSA9PT0gJ0MnOyAvLyB0cnVlXG4gICAgICogICB0cmFucy5vcmlnaW5hbFRyYW5zaXRpb24oKSA9PT0gdHJhbnNpdGlvbkE7IC8vIHRydWVcbiAgICAgKiAgIHRyYW5zLm9yaWdpbmFsVHJhbnNpdGlvbigpLnRvKCkubmFtZSA9PT0gJ0EnOyAvLyB0cnVlXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgb3JpZ2luYWwgVHJhbnNpdGlvbiB0aGF0IHN0YXJ0ZWQgYSByZWRpcmVjdCBjaGFpblxuICAgICAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLm9yaWdpbmFsVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJmID0gdGhpcy5yZWRpcmVjdGVkRnJvbSgpO1xuICAgICAgICByZXR1cm4gKHJmICYmIHJmLm9yaWdpbmFsVHJhbnNpdGlvbigpKSB8fCB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0cmFuc2l0aW9uIG9wdGlvbnNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHRoZSBvcHRpb25zIGZvciB0aGlzIFRyYW5zaXRpb24uXG4gICAgICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUub3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGF0ZXMgYmVpbmcgZW50ZXJlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGFuIGFycmF5IG9mIHN0YXRlcyB0aGF0IHdpbGwgYmUgZW50ZXJlZCBkdXJpbmcgdGhpcyB0cmFuc2l0aW9uLlxuICAgICAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLmVudGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY29tbW9uXzEubWFwKHRoaXMuX3RyZWVDaGFuZ2VzLmVudGVyaW5nLCBob2ZfMS5wcm9wKCdzdGF0ZScpKS5tYXAoc3RhdGVTZWxmKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YXRlcyBiZWluZyBleGl0ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhbiBhcnJheSBvZiBzdGF0ZXMgdGhhdCB3aWxsIGJlIGV4aXRlZCBkdXJpbmcgdGhpcyB0cmFuc2l0aW9uLlxuICAgICAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLmV4aXRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjb21tb25fMS5tYXAodGhpcy5fdHJlZUNoYW5nZXMuZXhpdGluZywgaG9mXzEucHJvcCgnc3RhdGUnKSkubWFwKHN0YXRlU2VsZikucmV2ZXJzZSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhdGVzIGJlaW5nIHJldGFpbmVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYW4gYXJyYXkgb2Ygc3RhdGVzIHRoYXQgYXJlIGFscmVhZHkgZW50ZXJlZCBmcm9tIGEgcHJldmlvdXMgVHJhbnNpdGlvbiwgdGhhdCB3aWxsIG5vdCBiZVxuICAgICAqICAgIGV4aXRlZCBkdXJpbmcgdGhpcyBUcmFuc2l0aW9uXG4gICAgICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUucmV0YWluZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjb21tb25fMS5tYXAodGhpcy5fdHJlZUNoYW5nZXMucmV0YWluZWQsIGhvZl8xLnByb3AoJ3N0YXRlJykpLm1hcChzdGF0ZVNlbGYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBbW1ZpZXdDb25maWddXXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgVHJhbnNpdGlvblxuICAgICAqXG4gICAgICogRWFjaCBzdGF0ZSBjYW4gZGVmaW5lIG9uZSBvciBtb3JlIHZpZXdzICh0ZW1wbGF0ZS9jb250cm9sbGVyKSwgd2hpY2ggYXJlIGVuY2Fwc3VsYXRlZCBhcyBgVmlld0NvbmZpZ2Agb2JqZWN0cy5cbiAgICAgKiBUaGlzIG1ldGhvZCBmZXRjaGVzIHRoZSBgVmlld0NvbmZpZ3NgIGZvciBhIGdpdmVuIHBhdGggaW4gdGhlIFRyYW5zaXRpb24gKGUuZy4sIFwidG9cIiBvciBcImVudGVyaW5nXCIpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGhuYW1lIHRoZSBuYW1lIG9mIHRoZSBwYXRoIHRvIGZldGNoIHZpZXdzIGZvcjpcbiAgICAgKiAgIChgJ3RvJ2AsIGAnZnJvbSdgLCBgJ2VudGVyaW5nJ2AsIGAnZXhpdGluZydgLCBgJ3JldGFpbmVkJ2ApXG4gICAgICogQHBhcmFtIHN0YXRlIElmIHByb3ZpZGVkLCBvbmx5IHJldHVybnMgdGhlIGBWaWV3Q29uZmlnYHMgZm9yIGEgc2luZ2xlIHN0YXRlIGluIHRoZSBwYXRoXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIGxpc3Qgb2YgVmlld0NvbmZpZyBvYmplY3RzIGZvciB0aGUgZ2l2ZW4gcGF0aC5cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uLnByb3RvdHlwZS52aWV3cyA9IGZ1bmN0aW9uIChwYXRobmFtZSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHBhdGhuYW1lID09PSB2b2lkIDApIHsgcGF0aG5hbWUgPSBcImVudGVyaW5nXCI7IH1cbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLl90cmVlQ2hhbmdlc1twYXRobmFtZV07XG4gICAgICAgIHBhdGggPSAhc3RhdGUgPyBwYXRoIDogcGF0aC5maWx0ZXIoaG9mXzEucHJvcEVxKCdzdGF0ZScsIHN0YXRlKSk7XG4gICAgICAgIHJldHVybiBwYXRoLm1hcChob2ZfMS5wcm9wKFwidmlld3NcIikpLmZpbHRlcihjb21tb25fMS5pZGVudGl0eSkucmVkdWNlKGNvbW1vbl8xLnVubmVzdFIsIFtdKTtcbiAgICB9O1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLnRyZWVDaGFuZ2VzID0gZnVuY3Rpb24gKHBhdGhuYW1lKSB7XG4gICAgICAgIHJldHVybiBwYXRobmFtZSA/IHRoaXMuX3RyZWVDaGFuZ2VzW3BhdGhuYW1lXSA6IHRoaXMuX3RyZWVDaGFuZ2VzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0cmFuc2l0aW9uIHRoYXQgaXMgYSByZWRpcmVjdGlvbiBvZiB0aGUgY3VycmVudCBvbmUuXG4gICAgICpcbiAgICAgKiBUaGlzIHRyYW5zaXRpb24gY2FuIGJlIHJldHVybmVkIGZyb20gYSBbW1RyYW5zaXRpb25TZXJ2aWNlXV0gaG9vayB0b1xuICAgICAqIHJlZGlyZWN0IGEgdHJhbnNpdGlvbiB0byBhIG5ldyBzdGF0ZSBhbmQvb3Igc2V0IG9mIHBhcmFtZXRlcnMuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxhcGlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJldHVybnMgYSBuZXcgW1tUcmFuc2l0aW9uXV0gaW5zdGFuY2UuXG4gICAgICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUucmVkaXJlY3QgPSBmdW5jdGlvbiAodGFyZ2V0U3RhdGUpIHtcbiAgICAgICAgdmFyIHJlZGlyZWN0cyA9IDEsIHRyYW5zID0gdGhpcztcbiAgICAgICAgd2hpbGUgKCh0cmFucyA9IHRyYW5zLnJlZGlyZWN0ZWRGcm9tKCkpICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICgrK3JlZGlyZWN0cyA+IDIwKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRvbyBtYW55IGNvbnNlY3V0aXZlIFRyYW5zaXRpb24gcmVkaXJlY3RzICgyMCspXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWRpcmVjdE9wdHMgPSB7IHJlZGlyZWN0ZWRGcm9tOiB0aGlzLCBzb3VyY2U6IFwicmVkaXJlY3RcIiB9O1xuICAgICAgICAvLyBJZiB0aGUgb3JpZ2luYWwgdHJhbnNpdGlvbiB3YXMgY2F1c2VkIGJ5IFVSTCBzeW5jLCB0aGVuIHVzZSB7IGxvY2F0aW9uOiAncmVwbGFjZScgfVxuICAgICAgICAvLyBvbiB0aGUgbmV3IHRyYW5zaXRpb24gKHVubGVzcyB0aGUgdGFyZ2V0IHN0YXRlIGV4cGxpY2l0bHkgc3BlY2lmaWVzIGxvY2F0aW9uOiBmYWxzZSkuXG4gICAgICAgIC8vIFRoaXMgY2F1c2VzIHRoZSBvcmlnaW5hbCB1cmwgdG8gYmUgcmVwbGFjZWQgd2l0aCB0aGUgdXJsIGZvciB0aGUgcmVkaXJlY3QgdGFyZ2V0XG4gICAgICAgIC8vIHNvIHRoZSBvcmlnaW5hbCB1cmwgZGlzYXBwZWFycyBmcm9tIHRoZSBicm93c2VyIGhpc3RvcnkuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMoKS5zb3VyY2UgPT09ICd1cmwnICYmIHRhcmdldFN0YXRlLm9wdGlvbnMoKS5sb2NhdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJlZGlyZWN0T3B0cy5sb2NhdGlvbiA9ICdyZXBsYWNlJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IGNvbW1vbl8xLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zKCksIHRhcmdldFN0YXRlLm9wdGlvbnMoKSwgcmVkaXJlY3RPcHRzKTtcbiAgICAgICAgdGFyZ2V0U3RhdGUgPSBuZXcgdGFyZ2V0U3RhdGVfMS5UYXJnZXRTdGF0ZSh0YXJnZXRTdGF0ZS5pZGVudGlmaWVyKCksIHRhcmdldFN0YXRlLiRzdGF0ZSgpLCB0YXJnZXRTdGF0ZS5wYXJhbXMoKSwgbmV3T3B0aW9ucyk7XG4gICAgICAgIHZhciBuZXdUcmFuc2l0aW9uID0gdGhpcy5yb3V0ZXIudHJhbnNpdGlvblNlcnZpY2UuY3JlYXRlKHRoaXMuX3RyZWVDaGFuZ2VzLmZyb20sIHRhcmdldFN0YXRlKTtcbiAgICAgICAgdmFyIG9yaWdpbmFsRW50ZXJpbmdOb2RlcyA9IHRoaXMuX3RyZWVDaGFuZ2VzLmVudGVyaW5nO1xuICAgICAgICB2YXIgcmVkaXJlY3RFbnRlcmluZ05vZGVzID0gbmV3VHJhbnNpdGlvbi5fdHJlZUNoYW5nZXMuZW50ZXJpbmc7XG4gICAgICAgIC8vIC0tLSBSZS11c2UgcmVzb2x2ZSBkYXRhIGZyb20gb3JpZ2luYWwgdHJhbnNpdGlvbiAtLS1cbiAgICAgICAgLy8gV2hlbiByZWRpcmVjdGluZyBmcm9tIGEgcGFyZW50IHN0YXRlIHRvIGEgY2hpbGQgc3RhdGUgd2hlcmUgdGhlIHBhcmVudCBwYXJhbWV0ZXIgdmFsdWVzIGhhdmVuJ3QgY2hhbmdlZFxuICAgICAgICAvLyAoYmVjYXVzZSBvZiB0aGUgcmVkaXJlY3QpLCB0aGUgcmVzb2x2ZXMgZmV0Y2hlZCBieSB0aGUgb3JpZ2luYWwgdHJhbnNpdGlvbiBhcmUgc3RpbGwgdmFsaWQgaW4gdGhlXG4gICAgICAgIC8vIHJlZGlyZWN0ZWQgdHJhbnNpdGlvbi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBhbGxvd3MgeW91IHRvIGRlZmluZSBhIHJlZGlyZWN0IG9uIGEgcGFyZW50IHN0YXRlIHdoaWNoIGRlcGVuZHMgb24gYW4gYXN5bmMgcmVzb2x2ZSB2YWx1ZS5cbiAgICAgICAgLy8gWW91IGNhbiB3YWl0IGZvciB0aGUgcmVzb2x2ZSwgdGhlbiByZWRpcmVjdCB0byBhIGNoaWxkIHN0YXRlIGJhc2VkIG9uIHRoZSByZXN1bHQuXG4gICAgICAgIC8vIFRoZSByZWRpcmVjdGVkIHRyYW5zaXRpb24gZG9lcyBub3QgaGF2ZSB0byByZS1mZXRjaCB0aGUgcmVzb2x2ZS5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHZhciBub2RlSXNSZWxvYWRpbmcgPSBmdW5jdGlvbiAocmVsb2FkU3RhdGUpIHsgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVsb2FkU3RhdGUgJiYgbm9kZS5zdGF0ZS5pbmNsdWRlc1tyZWxvYWRTdGF0ZS5uYW1lXTtcbiAgICAgICAgfTsgfTtcbiAgICAgICAgLy8gRmluZCBhbnkgXCJlbnRlcmluZ1wiIG5vZGVzIGluIHRoZSByZWRpcmVjdCBwYXRoIHRoYXQgbWF0Y2ggdGhlIG9yaWdpbmFsIHBhdGggYW5kIGFyZW4ndCBiZWluZyByZWxvYWRlZFxuICAgICAgICB2YXIgbWF0Y2hpbmdFbnRlcmluZ05vZGVzID0gcGF0aEZhY3RvcnlfMS5QYXRoVXRpbHMubWF0Y2hpbmcocmVkaXJlY3RFbnRlcmluZ05vZGVzLCBvcmlnaW5hbEVudGVyaW5nTm9kZXMsIHBhdGhGYWN0b3J5XzEuUGF0aFV0aWxzLm5vbkR5bmFtaWNQYXJhbXMpXG4gICAgICAgICAgICAuZmlsdGVyKGhvZl8xLm5vdChub2RlSXNSZWxvYWRpbmcodGFyZ2V0U3RhdGUub3B0aW9ucygpLnJlbG9hZFN0YXRlKSkpO1xuICAgICAgICAvLyBVc2UgdGhlIGV4aXN0aW5nIChwb3NzaWJseSBwcmUtcmVzb2x2ZWQpIHJlc29sdmFibGVzIGZvciB0aGUgbWF0Y2hpbmcgZW50ZXJpbmcgbm9kZXMuXG4gICAgICAgIG1hdGNoaW5nRW50ZXJpbmdOb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlLCBpZHgpIHtcbiAgICAgICAgICAgIG5vZGUucmVzb2x2YWJsZXMgPSBvcmlnaW5hbEVudGVyaW5nTm9kZXNbaWR4XS5yZXNvbHZhYmxlcztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXdUcmFuc2l0aW9uO1xuICAgIH07XG4gICAgLyoqIEBoaWRkZW4gSWYgYSB0cmFuc2l0aW9uIGRvZXNuJ3QgZXhpdC9lbnRlciBhbnkgc3RhdGVzLCByZXR1cm5zIGFueSBbW1BhcmFtXV0gd2hvc2UgdmFsdWUgY2hhbmdlZCAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLl9jaGFuZ2VkUGFyYW1zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGMgPSB0aGlzLl90cmVlQ2hhbmdlcztcbiAgICAgICAgLyoqIFJldHVybiB1bmRlZmluZWQgaWYgaXQncyBub3QgYSBcImR5bmFtaWNcIiB0cmFuc2l0aW9uLCBmb3IgdGhlIGZvbGxvd2luZyByZWFzb25zICovXG4gICAgICAgIC8vIElmIHVzZXIgZXhwbGljaXRseSB3YW50cyBhIHJlbG9hZFxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5yZWxvYWQpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAvLyBJZiBhbnkgc3RhdGVzIGFyZSBleGl0aW5nIG9yIGVudGVyaW5nXG4gICAgICAgIGlmICh0Yy5leGl0aW5nLmxlbmd0aCB8fCB0Yy5lbnRlcmluZy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAvLyBJZiB0by9mcm9tIHBhdGggbGVuZ3RocyBkaWZmZXJcbiAgICAgICAgaWYgKHRjLnRvLmxlbmd0aCAhPT0gdGMuZnJvbS5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAvLyBJZiB0aGUgdG8vZnJvbSBwYXRocyBhcmUgZGlmZmVyZW50XG4gICAgICAgIHZhciBwYXRoc0RpZmZlciA9IGNvbW1vbl8xLmFycmF5VHVwbGVzKHRjLnRvLCB0Yy5mcm9tKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAodHVwbGUpIHsgcmV0dXJuIHR1cGxlWzBdLnN0YXRlICE9PSB0dXBsZVsxXS5zdGF0ZTsgfSlcbiAgICAgICAgICAgIC5yZWR1Y2UoY29tbW9uXzEuYW55VHJ1ZVIsIGZhbHNlKTtcbiAgICAgICAgaWYgKHBhdGhzRGlmZmVyKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgLy8gRmluZCBhbnkgcGFyYW1ldGVyIHZhbHVlcyB0aGF0IGRpZmZlclxuICAgICAgICB2YXIgbm9kZVNjaGVtYXMgPSB0Yy50by5tYXAoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIG5vZGUucGFyYW1TY2hlbWE7IH0pO1xuICAgICAgICB2YXIgX2EgPSBbdGMudG8sIHRjLmZyb21dLm1hcChmdW5jdGlvbiAocGF0aCkgeyByZXR1cm4gcGF0aC5tYXAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgucGFyYW1WYWx1ZXM7IH0pOyB9KSwgdG9WYWx1ZXMgPSBfYVswXSwgZnJvbVZhbHVlcyA9IF9hWzFdO1xuICAgICAgICB2YXIgdHVwbGVzID0gY29tbW9uXzEuYXJyYXlUdXBsZXMobm9kZVNjaGVtYXMsIHRvVmFsdWVzLCBmcm9tVmFsdWVzKTtcbiAgICAgICAgcmV0dXJuIHR1cGxlcy5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgc2NoZW1hID0gX2FbMF0sIHRvVmFscyA9IF9hWzFdLCBmcm9tVmFscyA9IF9hWzJdO1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtXzEuUGFyYW0uY2hhbmdlZChzY2hlbWEsIHRvVmFscywgZnJvbVZhbHMpO1xuICAgICAgICB9KS5yZWR1Y2UoY29tbW9uXzEudW5uZXN0UiwgW10pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0cmFuc2l0aW9uIGlzIGR5bmFtaWMuXG4gICAgICpcbiAgICAgKiBBIHRyYW5zaXRpb24gaXMgZHluYW1pYyBpZiBubyBzdGF0ZXMgYXJlIGVudGVyZWQgbm9yIGV4aXRlZCwgYnV0IGF0IGxlYXN0IG9uZSBkeW5hbWljIHBhcmFtZXRlciBoYXMgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIFRyYW5zaXRpb24gaXMgZHluYW1pY1xuICAgICAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLmR5bmFtaWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjaGFuZ2VzID0gdGhpcy5fY2hhbmdlZFBhcmFtcygpO1xuICAgICAgICByZXR1cm4gIWNoYW5nZXMgPyBmYWxzZSA6IGNoYW5nZXMubWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmR5bmFtaWM7IH0pLnJlZHVjZShjb21tb25fMS5hbnlUcnVlUiwgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0cmFuc2l0aW9uIGlzIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiBBIHRyYW5zaXRpb24gaXMgaWdub3JlZCBpZiBubyBzdGF0ZXMgYXJlIGVudGVyZWQgbm9yIGV4aXRlZCwgYW5kIG5vIHBhcmFtZXRlciB2YWx1ZXMgaGF2ZSBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgVHJhbnNpdGlvbiBpcyBpZ25vcmVkLlxuICAgICAqL1xuICAgIFRyYW5zaXRpb24ucHJvdG90eXBlLmlnbm9yZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2lnbm9yZWRSZWFzb24oKTtcbiAgICB9O1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUuX2lnbm9yZWRSZWFzb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwZW5kaW5nID0gdGhpcy5yb3V0ZXIuZ2xvYmFscy50cmFuc2l0aW9uO1xuICAgICAgICB2YXIgcmVsb2FkU3RhdGUgPSB0aGlzLl9vcHRpb25zLnJlbG9hZFN0YXRlO1xuICAgICAgICB2YXIgc2FtZSA9IGZ1bmN0aW9uIChwYXRoQSwgcGF0aEIpIHtcbiAgICAgICAgICAgIGlmIChwYXRoQS5sZW5ndGggIT09IHBhdGhCLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB2YXIgbWF0Y2hpbmcgPSBwYXRoRmFjdG9yeV8xLlBhdGhVdGlscy5tYXRjaGluZyhwYXRoQSwgcGF0aEIpO1xuICAgICAgICAgICAgcmV0dXJuIHBhdGhBLmxlbmd0aCA9PT0gbWF0Y2hpbmcuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiAhcmVsb2FkU3RhdGUgfHwgIW5vZGUuc3RhdGUuaW5jbHVkZXNbcmVsb2FkU3RhdGUubmFtZV07IH0pLmxlbmd0aDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG5ld1RDID0gdGhpcy50cmVlQ2hhbmdlcygpO1xuICAgICAgICB2YXIgcGVuZFRDID0gcGVuZGluZyAmJiBwZW5kaW5nLnRyZWVDaGFuZ2VzKCk7XG4gICAgICAgIGlmIChwZW5kVEMgJiYgc2FtZShwZW5kVEMudG8sIG5ld1RDLnRvKSAmJiBzYW1lKHBlbmRUQy5leGl0aW5nLCBuZXdUQy5leGl0aW5nKSlcbiAgICAgICAgICAgIHJldHVybiBcIlNhbWVBc1BlbmRpbmdcIjtcbiAgICAgICAgaWYgKG5ld1RDLmV4aXRpbmcubGVuZ3RoID09PSAwICYmIG5ld1RDLmVudGVyaW5nLmxlbmd0aCA9PT0gMCAmJiBzYW1lKG5ld1RDLmZyb20sIG5ld1RDLnRvKSlcbiAgICAgICAgICAgIHJldHVybiBcIlNhbWVBc0N1cnJlbnRcIjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJ1bnMgdGhlIHRyYW5zaXRpb25cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGdlbmVyYWxseSBjYWxsZWQgZnJvbSB0aGUgW1tTdGF0ZVNlcnZpY2UudHJhbnNpdGlvblRvXV1cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbGFwaVxuICAgICAqXG4gICAgICogQHJldHVybnMgYSBwcm9taXNlIGZvciBhIHN1Y2Nlc3NmdWwgdHJhbnNpdGlvbi5cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBydW5BbGxIb29rcyA9IHRyYW5zaXRpb25Ib29rXzEuVHJhbnNpdGlvbkhvb2sucnVuQWxsSG9va3M7XG4gICAgICAgIC8vIEdldHMgdHJhbnNpdGlvbiBob29rcyBhcnJheSBmb3IgdGhlIGdpdmVuIHBoYXNlXG4gICAgICAgIHZhciBnZXRIb29rc0ZvciA9IGZ1bmN0aW9uIChwaGFzZSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9ob29rQnVpbGRlci5idWlsZEhvb2tzRm9yUGhhc2UocGhhc2UpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBXaGVuIHRoZSBjaGFpbiBpcyBjb21wbGV0ZSwgdGhlbiByZXNvbHZlIG9yIHJlamVjdCB0aGUgZGVmZXJyZWRcbiAgICAgICAgdmFyIHRyYW5zaXRpb25TdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdHJhY2VfMS50cmFjZS50cmFjZVN1Y2Nlc3MoX3RoaXMuJHRvKCksIF90aGlzKTtcbiAgICAgICAgICAgIF90aGlzLnN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMuX2RlZmVycmVkLnJlc29sdmUoX3RoaXMudG8oKSk7XG4gICAgICAgICAgICBydW5BbGxIb29rcyhnZXRIb29rc0ZvcihpbnRlcmZhY2VfMS5UcmFuc2l0aW9uSG9va1BoYXNlLlNVQ0NFU1MpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25FcnJvciA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIHRyYWNlXzEudHJhY2UudHJhY2VFcnJvcihyZWFzb24sIF90aGlzKTtcbiAgICAgICAgICAgIF90aGlzLnN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIF90aGlzLl9kZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgIF90aGlzLl9lcnJvciA9IHJlYXNvbjtcbiAgICAgICAgICAgIHJ1bkFsbEhvb2tzKGdldEhvb2tzRm9yKGludGVyZmFjZV8xLlRyYW5zaXRpb25Ib29rUGhhc2UuRVJST1IpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJ1blRyYW5zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBXYWl0IHRvIGJ1aWxkIHRoZSBSVU4gaG9vayBjaGFpbiB1bnRpbCB0aGUgQkVGT1JFIGhvb2tzIGFyZSBkb25lXG4gICAgICAgICAgICAvLyBUaGlzIGFsbG93cyBhIEJFRk9SRSBob29rIHRvIGR5bmFtaWNhbGx5IGFkZCBhZGRpdGlvbmFsIFJVTiBob29rcyB2aWEgdGhlIFRyYW5zaXRpb24gb2JqZWN0LlxuICAgICAgICAgICAgdmFyIGFsbFJ1bkhvb2tzID0gZ2V0SG9va3NGb3IoaW50ZXJmYWNlXzEuVHJhbnNpdGlvbkhvb2tQaGFzZS5SVU4pO1xuICAgICAgICAgICAgdmFyIGRvbmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3Jlc2VydmljZXNfMS5zZXJ2aWNlcy4kcS53aGVuKHVuZGVmaW5lZCk7IH07XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNpdGlvbkhvb2tfMS5UcmFuc2l0aW9uSG9vay5pbnZva2VIb29rcyhhbGxSdW5Ib29rcywgZG9uZSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdGFydFRyYW5zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZ2xvYmFscyA9IF90aGlzLnJvdXRlci5nbG9iYWxzO1xuICAgICAgICAgICAgZ2xvYmFscy5sYXN0U3RhcnRlZFRyYW5zaXRpb25JZCA9IF90aGlzLiRpZDtcbiAgICAgICAgICAgIGdsb2JhbHMudHJhbnNpdGlvbiA9IF90aGlzO1xuICAgICAgICAgICAgZ2xvYmFscy50cmFuc2l0aW9uSGlzdG9yeS5lbnF1ZXVlKF90aGlzKTtcbiAgICAgICAgICAgIHRyYWNlXzEudHJhY2UudHJhY2VUcmFuc2l0aW9uU3RhcnQoX3RoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIGNvcmVzZXJ2aWNlc18xLnNlcnZpY2VzLiRxLndoZW4odW5kZWZpbmVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGFsbEJlZm9yZUhvb2tzID0gZ2V0SG9va3NGb3IoaW50ZXJmYWNlXzEuVHJhbnNpdGlvbkhvb2tQaGFzZS5CRUZPUkUpO1xuICAgICAgICB0cmFuc2l0aW9uSG9va18xLlRyYW5zaXRpb25Ib29rLmludm9rZUhvb2tzKGFsbEJlZm9yZUhvb2tzLCBzdGFydFRyYW5zaXRpb24pXG4gICAgICAgICAgICAudGhlbihydW5UcmFuc2l0aW9uKVxuICAgICAgICAgICAgLnRoZW4odHJhbnNpdGlvblN1Y2Nlc3MsIHRyYW5zaXRpb25FcnJvcik7XG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIFRyYW5zaXRpb24gaXMgdmFsaWRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIFRyYW5zaXRpb24gaXMgdmFsaWRcbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uLnByb3RvdHlwZS52YWxpZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmVycm9yKCkgfHwgdGhpcy5zdWNjZXNzICE9PSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBYm9ydHMgdGhpcyB0cmFuc2l0aW9uXG4gICAgICpcbiAgICAgKiBJbXBlcmF0aXZlIEFQSSB0byBhYm9ydCBhIFRyYW5zaXRpb24uXG4gICAgICogVGhpcyBvbmx5IGFwcGxpZXMgdG8gVHJhbnNpdGlvbnMgdGhhdCBhcmUgbm90IHlldCBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRG8gbm90IHNldCBmbGFnIGlmIHRoZSB0cmFuc2l0aW9uIGlzIGFscmVhZHkgY29tcGxldGVcbiAgICAgICAgaWYgKHByZWRpY2F0ZXNfMS5pc1VuZGVmaW5lZCh0aGlzLnN1Y2Nlc3MpKSB7XG4gICAgICAgICAgICB0aGlzLl9hYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIFRyYW5zaXRpb24gZXJyb3IgcmVhc29uLlxuICAgICAqXG4gICAgICogSWYgdGhlIHRyYW5zaXRpb24gaXMgaW52YWxpZCAoYW5kIGNvdWxkIG5vdCBiZSBydW4pLCByZXR1cm5zIHRoZSByZWFzb24gdGhlIHRyYW5zaXRpb24gaXMgaW52YWxpZC5cbiAgICAgKiBJZiB0aGUgdHJhbnNpdGlvbiB3YXMgdmFsaWQgYW5kIHJhbiwgYnV0IHdhcyBub3Qgc3VjY2Vzc2Z1bCwgcmV0dXJucyB0aGUgcmVhc29uIHRoZSB0cmFuc2l0aW9uIGZhaWxlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGFuIGVycm9yIG1lc3NhZ2UgZXhwbGFpbmluZyB3aHkgdGhlIHRyYW5zaXRpb24gaXMgaW52YWxpZCwgb3IgdGhlIHJlYXNvbiB0aGUgdHJhbnNpdGlvbiBmYWlsZWQuXG4gICAgICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuJHRvKCk7XG4gICAgICAgIGlmIChzdGF0ZS5zZWxmLmFic3RyYWN0KVxuICAgICAgICAgICAgcmV0dXJuIFwiQ2Fubm90IHRyYW5zaXRpb24gdG8gYWJzdHJhY3Qgc3RhdGUgJ1wiICsgc3RhdGUubmFtZSArIFwiJ1wiO1xuICAgICAgICBpZiAoIXBhcmFtXzEuUGFyYW0udmFsaWRhdGVzKHN0YXRlLnBhcmFtZXRlcnMoKSwgdGhpcy5wYXJhbXMoKSkpXG4gICAgICAgICAgICByZXR1cm4gXCJQYXJhbSB2YWx1ZXMgbm90IHZhbGlkIGZvciBzdGF0ZSAnXCIgKyBzdGF0ZS5uYW1lICsgXCInXCI7XG4gICAgICAgIGlmICh0aGlzLnN1Y2Nlc3MgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIFRyYW5zaXRpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBUcmFuc2l0aW9uXG4gICAgICovXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmcm9tU3RhdGVPck5hbWUgPSB0aGlzLmZyb20oKTtcbiAgICAgICAgdmFyIHRvU3RhdGVPck5hbWUgPSB0aGlzLnRvKCk7XG4gICAgICAgIHZhciBhdm9pZEVtcHR5SGFzaCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiAocGFyYW1zW1wiI1wiXSAhPT0gbnVsbCAmJiBwYXJhbXNbXCIjXCJdICE9PSB1bmRlZmluZWQpID8gcGFyYW1zIDogY29tbW9uXzEub21pdChwYXJhbXMsIFtcIiNcIl0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyAoWCkgbWVhbnMgdGhlIHRvIHN0YXRlIGlzIGludmFsaWQuXG4gICAgICAgIHZhciBpZCA9IHRoaXMuJGlkLCBmcm9tID0gcHJlZGljYXRlc18xLmlzT2JqZWN0KGZyb21TdGF0ZU9yTmFtZSkgPyBmcm9tU3RhdGVPck5hbWUubmFtZSA6IGZyb21TdGF0ZU9yTmFtZSwgZnJvbVBhcmFtcyA9IGNvbW1vbl8xLnRvSnNvbihhdm9pZEVtcHR5SGFzaCh0aGlzLl90cmVlQ2hhbmdlcy5mcm9tLm1hcChob2ZfMS5wcm9wKCdwYXJhbVZhbHVlcycpKS5yZWR1Y2UoY29tbW9uXzEubWVyZ2VSLCB7fSkpKSwgdG9WYWxpZCA9IHRoaXMudmFsaWQoKSA/IFwiXCIgOiBcIihYKSBcIiwgdG8gPSBwcmVkaWNhdGVzXzEuaXNPYmplY3QodG9TdGF0ZU9yTmFtZSkgPyB0b1N0YXRlT3JOYW1lLm5hbWUgOiB0b1N0YXRlT3JOYW1lLCB0b1BhcmFtcyA9IGNvbW1vbl8xLnRvSnNvbihhdm9pZEVtcHR5SGFzaCh0aGlzLnBhcmFtcygpKSk7XG4gICAgICAgIHJldHVybiBcIlRyYW5zaXRpb24jXCIgKyBpZCArIFwiKCAnXCIgKyBmcm9tICsgXCInXCIgKyBmcm9tUGFyYW1zICsgXCIgLT4gXCIgKyB0b1ZhbGlkICsgXCInXCIgKyB0byArIFwiJ1wiICsgdG9QYXJhbXMgKyBcIiApXCI7XG4gICAgfTtcbiAgICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oKSk7XG4vKiogQGhpZGRlbiAqL1xuVHJhbnNpdGlvbi5kaVRva2VuID0gVHJhbnNpdGlvbjtcbmV4cG9ydHMuVHJhbnNpdGlvbiA9IFRyYW5zaXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2l0aW9uLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvdHJhbnNpdGlvbi90cmFuc2l0aW9uLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n")},function(module,exports,__webpack_require__){"use strict";eval('\n/** @module path */ /** for typedoc */\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar common_1 = __webpack_require__(0);\nvar hof_1 = __webpack_require__(2);\nvar targetState_1 = __webpack_require__(7);\nvar pathNode_1 = __webpack_require__(25);\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nvar PathUtils = function () {\n    function PathUtils() {}\n    /** Given a PathNode[], create an TargetState */\n    PathUtils.makeTargetState = function (path) {\n        var state = common_1.tail(path).state;\n        return new targetState_1.TargetState(state, state, path.map(hof_1.prop("paramValues")).reduce(common_1.mergeR, {}));\n    };\n    PathUtils.buildPath = function (targetState) {\n        var toParams = targetState.params();\n        return targetState.$state().path.map(function (state) {\n            return new pathNode_1.PathNode(state).applyRawParams(toParams);\n        });\n    };\n    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n    PathUtils.buildToPath = function (fromPath, targetState) {\n        var toPath = PathUtils.buildPath(targetState);\n        if (targetState.options().inherit) {\n            return PathUtils.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n        }\n        return toPath;\n    };\n    /**\n     * Creates ViewConfig objects and adds to nodes.\n     *\n     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node\'s state\n     */\n    PathUtils.applyViewConfigs = function ($view, path, states) {\n        // Only apply the viewConfigs to the nodes for the given states\n        path.filter(function (node) {\n            return common_1.inArray(states, node.state);\n        }).forEach(function (node) {\n            var viewDecls = common_1.values(node.state.views || {});\n            var subPath = PathUtils.subPath(path, function (n) {\n                return n === node;\n            });\n            var viewConfigs = viewDecls.map(function (view) {\n                return $view.createViewConfig(subPath, view);\n            });\n            node.views = viewConfigs.reduce(common_1.unnestR, []);\n        });\n    };\n    /**\n     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n     *\n     * For a parameter in a node to be inherited from the from path:\n     * - The toPath\'s node must have a matching node in the fromPath (by state).\n     * - The parameter name must not be found in the toKeys parameter array.\n     *\n     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n     * it is not inherited from the fromPath.\n     */\n    PathUtils.inheritParams = function (fromPath, toPath, toKeys) {\n        if (toKeys === void 0) {\n            toKeys = [];\n        }\n        function nodeParamVals(path, state) {\n            var node = common_1.find(path, hof_1.propEq(\'state\', state));\n            return common_1.extend({}, node && node.paramValues);\n        }\n        var noInherit = fromPath.map(function (node) {\n            return node.paramSchema;\n        }).reduce(common_1.unnestR, []).filter(function (param) {\n            return !param.inherit;\n        }).map(hof_1.prop(\'id\'));\n        /**\n         * Given an [[PathNode]] "toNode", return a new [[PathNode]] with param values inherited from the\n         * matching node in fromPath.  Only inherit keys that aren\'t found in "toKeys" from the node in "fromPath""\n         */\n        function makeInheritedParamsNode(toNode) {\n            // All param values for the node (may include default key/vals, when key was not found in toParams)\n            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);\n            // limited to only those keys found in toParams\n            var incomingParamVals = common_1.pick(toParamVals, toKeys);\n            toParamVals = common_1.omit(toParamVals, toKeys);\n            var fromParamVals = common_1.omit(nodeParamVals(fromPath, toNode.state) || {}, noInherit);\n            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);\n            return new pathNode_1.PathNode(toNode.state).applyRawParams(ownParamVals);\n        }\n        // The param keys specified by the incoming toParams\n        return toPath.map(makeInheritedParamsNode);\n    };\n    /**\n     * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n     */\n    PathUtils.treeChanges = function (fromPath, toPath, reloadState) {\n        var keep = 0,\n            max = Math.min(fromPath.length, toPath.length);\n        var nodesMatch = function nodesMatch(node1, node2) {\n            return node1.equals(node2, PathUtils.nonDynamicParams);\n        };\n        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n            keep++;\n        }\n        /** Given a retained node, return a new node which uses the to node\'s param values */\n        function applyToParams(retainedNode, idx) {\n            var cloned = pathNode_1.PathNode.clone(retainedNode);\n            cloned.paramValues = toPath[idx].paramValues;\n            return cloned;\n        }\n        var from, retained, exiting, entering, to;\n        from = fromPath;\n        retained = from.slice(0, keep);\n        exiting = from.slice(keep);\n        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n        var retainedWithToParams = retained.map(applyToParams);\n        entering = toPath.slice(keep);\n        to = retainedWithToParams.concat(entering);\n        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };\n    };\n    /**\n     * Returns a new path which is: the subpath of the first path which matches the second path.\n     *\n     * The new path starts from root and contains any nodes that match the nodes in the second path.\n     * It stops before the first non-matching node.\n     *\n     * Nodes are compared using their state property and their parameter values.\n     * If a `paramsFn` is provided, only the [[Param]] returned by the function will be considered when comparing nodes.\n     *\n     * @param pathA the first path\n     * @param pathB the second path\n     * @param paramsFn a function which returns the parameters to consider when comparing\n     *\n     * @returns an array of PathNodes from the first path which match the nodes in the second path\n     */\n    PathUtils.matching = function (pathA, pathB, paramsFn) {\n        var done = false;\n        var tuples = common_1.arrayTuples(pathA, pathB);\n        return tuples.reduce(function (matching, _a) {\n            var nodeA = _a[0],\n                nodeB = _a[1];\n            done = done || !nodeA.equals(nodeB, paramsFn);\n            return done ? matching : matching.concat(nodeA);\n        }, []);\n    };\n    /**\n     * Returns true if two paths are identical.\n     *\n     * @param pathA\n     * @param pathB\n     * @param paramsFn a function which returns the parameters to consider when comparing\n     * @returns true if the the states and parameter values for both paths are identical\n     */\n    PathUtils.equals = function (pathA, pathB, paramsFn) {\n        return pathA.length === pathB.length && PathUtils.matching(pathA, pathB, paramsFn).length === pathA.length;\n    };\n    /**\n     * Return a subpath of a path, which stops at the first matching node\n     *\n     * Given an array of nodes, returns a subset of the array starting from the first node,\n     * stopping when the first node matches the predicate.\n     *\n     * @param path a path of [[PathNode]]s\n     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n     * @returns a subpath up to the matching node, or undefined if no match is found\n     */\n    PathUtils.subPath = function (path, predicate) {\n        var node = common_1.find(path, predicate);\n        var elementIdx = path.indexOf(node);\n        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n    };\n    return PathUtils;\n}();\nPathUtils.nonDynamicParams = function (node) {\n    return node.state.parameters({ inherit: false }).filter(function (param) {\n        return !param.dynamic;\n    });\n};\n/** Gets the raw parameter values from a path */\nPathUtils.paramValues = function (path) {\n    return path.reduce(function (acc, node) {\n        return common_1.extend(acc, node.paramValues);\n    }, {});\n};\nexports.PathUtils = PathUtils;\n//# sourceMappingURL=pathFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3BhdGgvcGF0aEZhY3RvcnkuanM/MzVjYiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbW1vbl8xIiwicmVxdWlyZSIsImhvZl8xIiwidGFyZ2V0U3RhdGVfMSIsInBhdGhOb2RlXzEiLCJQYXRoVXRpbHMiLCJtYWtlVGFyZ2V0U3RhdGUiLCJwYXRoIiwic3RhdGUiLCJ0YWlsIiwiVGFyZ2V0U3RhdGUiLCJtYXAiLCJwcm9wIiwicmVkdWNlIiwibWVyZ2VSIiwiYnVpbGRQYXRoIiwidGFyZ2V0U3RhdGUiLCJ0b1BhcmFtcyIsInBhcmFtcyIsIiRzdGF0ZSIsIlBhdGhOb2RlIiwiYXBwbHlSYXdQYXJhbXMiLCJidWlsZFRvUGF0aCIsImZyb21QYXRoIiwidG9QYXRoIiwib3B0aW9ucyIsImluaGVyaXQiLCJpbmhlcml0UGFyYW1zIiwia2V5cyIsImFwcGx5Vmlld0NvbmZpZ3MiLCIkdmlldyIsInN0YXRlcyIsImZpbHRlciIsIm5vZGUiLCJpbkFycmF5IiwiZm9yRWFjaCIsInZpZXdEZWNscyIsInZhbHVlcyIsInZpZXdzIiwic3ViUGF0aCIsIm4iLCJ2aWV3Q29uZmlncyIsInZpZXciLCJjcmVhdGVWaWV3Q29uZmlnIiwidW5uZXN0UiIsInRvS2V5cyIsIm5vZGVQYXJhbVZhbHMiLCJmaW5kIiwicHJvcEVxIiwiZXh0ZW5kIiwicGFyYW1WYWx1ZXMiLCJub0luaGVyaXQiLCJwYXJhbVNjaGVtYSIsInBhcmFtIiwibWFrZUluaGVyaXRlZFBhcmFtc05vZGUiLCJ0b05vZGUiLCJ0b1BhcmFtVmFscyIsImluY29taW5nUGFyYW1WYWxzIiwicGljayIsIm9taXQiLCJmcm9tUGFyYW1WYWxzIiwib3duUGFyYW1WYWxzIiwidHJlZUNoYW5nZXMiLCJyZWxvYWRTdGF0ZSIsImtlZXAiLCJtYXgiLCJNYXRoIiwibWluIiwibGVuZ3RoIiwibm9kZXNNYXRjaCIsIm5vZGUxIiwibm9kZTIiLCJlcXVhbHMiLCJub25EeW5hbWljUGFyYW1zIiwiYXBwbHlUb1BhcmFtcyIsInJldGFpbmVkTm9kZSIsImlkeCIsImNsb25lZCIsImNsb25lIiwiZnJvbSIsInJldGFpbmVkIiwiZXhpdGluZyIsImVudGVyaW5nIiwidG8iLCJzbGljZSIsInJldGFpbmVkV2l0aFRvUGFyYW1zIiwiY29uY2F0IiwibWF0Y2hpbmciLCJwYXRoQSIsInBhdGhCIiwicGFyYW1zRm4iLCJkb25lIiwidHVwbGVzIiwiYXJyYXlUdXBsZXMiLCJfYSIsIm5vZGVBIiwibm9kZUIiLCJwcmVkaWNhdGUiLCJlbGVtZW50SWR4IiwiaW5kZXhPZiIsInVuZGVmaW5lZCIsInBhcmFtZXRlcnMiLCJkeW5hbWljIiwiYWNjIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLG1CLENBQW9COztBQUNwQkEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0EsSUFBSUMsV0FBVyxtQkFBQUMsQ0FBUSxDQUFSLENBQWY7QUFDQSxJQUFJQyxRQUFRLG1CQUFBRCxDQUFRLENBQVIsQ0FBWjtBQUNBLElBQUlFLGdCQUFnQixtQkFBQUYsQ0FBUSxDQUFSLENBQXBCO0FBQ0EsSUFBSUcsYUFBYSxtQkFBQUgsQ0FBUSxFQUFSLENBQWpCO0FBQ0E7OztBQUdBLElBQUlJLFlBQWEsWUFBWTtBQUN6QixhQUFTQSxTQUFULEdBQXFCLENBQ3BCO0FBQ0Q7QUFDQUEsY0FBVUMsZUFBVixHQUE0QixVQUFVQyxJQUFWLEVBQWdCO0FBQ3hDLFlBQUlDLFFBQVFSLFNBQVNTLElBQVQsQ0FBY0YsSUFBZCxFQUFvQkMsS0FBaEM7QUFDQSxlQUFPLElBQUlMLGNBQWNPLFdBQWxCLENBQThCRixLQUE5QixFQUFxQ0EsS0FBckMsRUFBNENELEtBQUtJLEdBQUwsQ0FBU1QsTUFBTVUsSUFBTixDQUFXLGFBQVgsQ0FBVCxFQUFvQ0MsTUFBcEMsQ0FB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UDtBQUNILENBeEpnQixFQUFqQjtBQXlKQUEsVUFBVW9FLGdCQUFWLEdBQTZCLFVBQVV4QyxJQUFWLEVBQWdCO0FBQ3pDLFdBQU9BLEtBQUt6QixLQUFMLENBQVc2RixVQUFYLENBQXNCLEVBQUUzRSxTQUFTLEtBQVgsRUFBdEIsRUFDRk0sTUFERSxDQUNLLFVBQVVxQixLQUFWLEVBQWlCO0FBQUUsZUFBTyxDQUFDQSxNQUFNaUQsT0FBZDtBQUF3QixLQURoRCxDQUFQO0FBRUgsQ0FIRDtBQUlBO0FBQ0FqRyxVQUFVNkMsV0FBVixHQUF3QixVQUFVM0MsSUFBVixFQUFnQjtBQUNwQyxXQUFPQSxLQUFLTSxNQUFMLENBQVksVUFBVTBGLEdBQVYsRUFBZXRFLElBQWYsRUFBcUI7QUFBRSxlQUFPakMsU0FBU2lELE1BQVQsQ0FBZ0JzRCxHQUFoQixFQUFxQnRFLEtBQUtpQixXQUExQixDQUFQO0FBQWdELEtBQW5GLEVBQXFGLEVBQXJGLENBQVA7QUFDSCxDQUZEO0FBR0FwRCxRQUFRTyxTQUFSLEdBQW9CQSxTQUFwQjtBQUNBIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiogQG1vZHVsZSBwYXRoICovIC8qKiBmb3IgdHlwZWRvYyAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb21tb25cIik7XG52YXIgaG9mXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2hvZlwiKTtcbnZhciB0YXJnZXRTdGF0ZV8xID0gcmVxdWlyZShcIi4uL3N0YXRlL3RhcmdldFN0YXRlXCIpO1xudmFyIHBhdGhOb2RlXzEgPSByZXF1aXJlKFwiLi9wYXRoTm9kZVwiKTtcbi8qKlxuICogVGhpcyBjbGFzcyBjb250YWlucyBmdW5jdGlvbnMgd2hpY2ggY29udmVydCBUYXJnZXRTdGF0ZXMsIE5vZGVzIGFuZCBwYXRocyBmcm9tIG9uZSB0eXBlIHRvIGFub3RoZXIuXG4gKi9cbnZhciBQYXRoVXRpbHMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhdGhVdGlscygpIHtcbiAgICB9XG4gICAgLyoqIEdpdmVuIGEgUGF0aE5vZGVbXSwgY3JlYXRlIGFuIFRhcmdldFN0YXRlICovXG4gICAgUGF0aFV0aWxzLm1ha2VUYXJnZXRTdGF0ZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGNvbW1vbl8xLnRhaWwocGF0aCkuc3RhdGU7XG4gICAgICAgIHJldHVybiBuZXcgdGFyZ2V0U3RhdGVfMS5UYXJnZXRTdGF0ZShzdGF0ZSwgc3RhdGUsIHBhdGgubWFwKGhvZl8xLnByb3AoXCJwYXJhbVZhbHVlc1wiKSkucmVkdWNlKGNvbW1vbl8xLm1lcmdlUiwge30pKTtcbiAgICB9O1xuICAgIFBhdGhVdGlscy5idWlsZFBhdGggPSBmdW5jdGlvbiAodGFyZ2V0U3RhdGUpIHtcbiAgICAgICAgdmFyIHRvUGFyYW1zID0gdGFyZ2V0U3RhdGUucGFyYW1zKCk7XG4gICAgICAgIHJldHVybiB0YXJnZXRTdGF0ZS4kc3RhdGUoKS5wYXRoLm1hcChmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIG5ldyBwYXRoTm9kZV8xLlBhdGhOb2RlKHN0YXRlKS5hcHBseVJhd1BhcmFtcyh0b1BhcmFtcyk7IH0pO1xuICAgIH07XG4gICAgLyoqIEdpdmVuIGEgZnJvbVBhdGg6IFBhdGhOb2RlW10gYW5kIGEgVGFyZ2V0U3RhdGUsIGJ1aWxkcyBhIHRvUGF0aDogUGF0aE5vZGVbXSAqL1xuICAgIFBhdGhVdGlscy5idWlsZFRvUGF0aCA9IGZ1bmN0aW9uIChmcm9tUGF0aCwgdGFyZ2V0U3RhdGUpIHtcbiAgICAgICAgdmFyIHRvUGF0aCA9IFBhdGhVdGlscy5idWlsZFBhdGgodGFyZ2V0U3RhdGUpO1xuICAgICAgICBpZiAodGFyZ2V0U3RhdGUub3B0aW9ucygpLmluaGVyaXQpIHtcbiAgICAgICAgICAgIHJldHVybiBQYXRoVXRpbHMuaW5oZXJpdFBhcmFtcyhmcm9tUGF0aCwgdG9QYXRoLCBPYmplY3Qua2V5cyh0YXJnZXRTdGF0ZS5wYXJhbXMoKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b1BhdGg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIFZpZXdDb25maWcgb2JqZWN0cyBhbmQgYWRkcyB0byBub2Rlcy5cbiAgICAgKlxuICAgICAqIE9uIGVhY2ggW1tQYXRoTm9kZV1dLCBjcmVhdGVzIFZpZXdDb25maWcgb2JqZWN0cyBmcm9tIHRoZSB2aWV3czogcHJvcGVydHkgb2YgdGhlIG5vZGUncyBzdGF0ZVxuICAgICAqL1xuICAgIFBhdGhVdGlscy5hcHBseVZpZXdDb25maWdzID0gZnVuY3Rpb24gKCR2aWV3LCBwYXRoLCBzdGF0ZXMpIHtcbiAgICAgICAgLy8gT25seSBhcHBseSB0aGUgdmlld0NvbmZpZ3MgdG8gdGhlIG5vZGVzIGZvciB0aGUgZ2l2ZW4gc3RhdGVzXG4gICAgICAgIHBhdGguZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBjb21tb25fMS5pbkFycmF5KHN0YXRlcywgbm9kZS5zdGF0ZSk7IH0pLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciB2aWV3RGVjbHMgPSBjb21tb25fMS52YWx1ZXMobm9kZS5zdGF0ZS52aWV3cyB8fCB7fSk7XG4gICAgICAgICAgICB2YXIgc3ViUGF0aCA9IFBhdGhVdGlscy5zdWJQYXRoKHBhdGgsIGZ1bmN0aW9uIChuKSB7IHJldHVybiBuID09PSBub2RlOyB9KTtcbiAgICAgICAgICAgIHZhciB2aWV3Q29uZmlncyA9IHZpZXdEZWNscy5tYXAoZnVuY3Rpb24gKHZpZXcpIHsgcmV0dXJuICR2aWV3LmNyZWF0ZVZpZXdDb25maWcoc3ViUGF0aCwgdmlldyk7IH0pO1xuICAgICAgICAgICAgbm9kZS52aWV3cyA9IHZpZXdDb25maWdzLnJlZHVjZShjb21tb25fMS51bm5lc3RSLCBbXSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBmcm9tUGF0aCBhbmQgYSB0b1BhdGgsIHJldHVybnMgYSBuZXcgdG8gcGF0aCB3aGljaCBpbmhlcml0cyBwYXJhbWV0ZXJzIGZyb20gdGhlIGZyb21QYXRoXG4gICAgICpcbiAgICAgKiBGb3IgYSBwYXJhbWV0ZXIgaW4gYSBub2RlIHRvIGJlIGluaGVyaXRlZCBmcm9tIHRoZSBmcm9tIHBhdGg6XG4gICAgICogLSBUaGUgdG9QYXRoJ3Mgbm9kZSBtdXN0IGhhdmUgYSBtYXRjaGluZyBub2RlIGluIHRoZSBmcm9tUGF0aCAoYnkgc3RhdGUpLlxuICAgICAqIC0gVGhlIHBhcmFtZXRlciBuYW1lIG11c3Qgbm90IGJlIGZvdW5kIGluIHRoZSB0b0tleXMgcGFyYW1ldGVyIGFycmF5LlxuICAgICAqXG4gICAgICogTm90ZTogdGhlIGtleXMgcHJvdmlkZWQgaW4gdG9LZXlzIGFyZSBpbnRlbmRlZCB0byBiZSB0aG9zZSBwYXJhbSBrZXlzIGV4cGxpY2l0bHkgc3BlY2lmaWVkIGJ5IHNvbWVcbiAgICAgKiBjYWxsZXIsIGZvciBpbnN0YW5jZSwgJHN0YXRlLnRyYW5zaXRpb25UbyguLi4sIHRvUGFyYW1zKS4gIElmIGEga2V5IHdhcyBmb3VuZCBpbiB0b1BhcmFtcyxcbiAgICAgKiBpdCBpcyBub3QgaW5oZXJpdGVkIGZyb20gdGhlIGZyb21QYXRoLlxuICAgICAqL1xuICAgIFBhdGhVdGlscy5pbmhlcml0UGFyYW1zID0gZnVuY3Rpb24gKGZyb21QYXRoLCB0b1BhdGgsIHRvS2V5cykge1xuICAgICAgICBpZiAodG9LZXlzID09PSB2b2lkIDApIHsgdG9LZXlzID0gW107IH1cbiAgICAgICAgZnVuY3Rpb24gbm9kZVBhcmFtVmFscyhwYXRoLCBzdGF0ZSkge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBjb21tb25fMS5maW5kKHBhdGgsIGhvZl8xLnByb3BFcSgnc3RhdGUnLCBzdGF0ZSkpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmV4dGVuZCh7fSwgbm9kZSAmJiBub2RlLnBhcmFtVmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9Jbmhlcml0ID0gZnJvbVBhdGgubWFwKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlLnBhcmFtU2NoZW1hOyB9KVxuICAgICAgICAgICAgLnJlZHVjZShjb21tb25fMS51bm5lc3RSLCBbXSlcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHBhcmFtKSB7IHJldHVybiAhcGFyYW0uaW5oZXJpdDsgfSlcbiAgICAgICAgICAgIC5tYXAoaG9mXzEucHJvcCgnaWQnKSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHaXZlbiBhbiBbW1BhdGhOb2RlXV0gXCJ0b05vZGVcIiwgcmV0dXJuIGEgbmV3IFtbUGF0aE5vZGVdXSB3aXRoIHBhcmFtIHZhbHVlcyBpbmhlcml0ZWQgZnJvbSB0aGVcbiAgICAgICAgICogbWF0Y2hpbmcgbm9kZSBpbiBmcm9tUGF0aC4gIE9ubHkgaW5oZXJpdCBrZXlzIHRoYXQgYXJlbid0IGZvdW5kIGluIFwidG9LZXlzXCIgZnJvbSB0aGUgbm9kZSBpbiBcImZyb21QYXRoXCJcIlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gbWFrZUluaGVyaXRlZFBhcmFtc05vZGUodG9Ob2RlKSB7XG4gICAgICAgICAgICAvLyBBbGwgcGFyYW0gdmFsdWVzIGZvciB0aGUgbm9kZSAobWF5IGluY2x1ZGUgZGVmYXVsdCBrZXkvdmFscywgd2hlbiBrZXkgd2FzIG5vdCBmb3VuZCBpbiB0b1BhcmFtcylcbiAgICAgICAgICAgIHZhciB0b1BhcmFtVmFscyA9IGNvbW1vbl8xLmV4dGVuZCh7fSwgdG9Ob2RlICYmIHRvTm9kZS5wYXJhbVZhbHVlcyk7XG4gICAgICAgICAgICAvLyBsaW1pdGVkIHRvIG9ubHkgdGhvc2Uga2V5cyBmb3VuZCBpbiB0b1BhcmFtc1xuICAgICAgICAgICAgdmFyIGluY29taW5nUGFyYW1WYWxzID0gY29tbW9uXzEucGljayh0b1BhcmFtVmFscywgdG9LZXlzKTtcbiAgICAgICAgICAgIHRvUGFyYW1WYWxzID0gY29tbW9uXzEub21pdCh0b1BhcmFtVmFscywgdG9LZXlzKTtcbiAgICAgICAgICAgIHZhciBmcm9tUGFyYW1WYWxzID0gY29tbW9uXzEub21pdChub2RlUGFyYW1WYWxzKGZyb21QYXRoLCB0b05vZGUuc3RhdGUpIHx8IHt9LCBub0luaGVyaXQpO1xuICAgICAgICAgICAgLy8gZXh0ZW5kIHRvUGFyYW1WYWxzIHdpdGggYW55IGZyb21QYXJhbVZhbHMsIHRoZW4gb3ZlcnJpZGUgYW55IG9mIHRob3NlIHRob3NlIHdpdGggaW5jb21pbmdQYXJhbVZhbHNcbiAgICAgICAgICAgIHZhciBvd25QYXJhbVZhbHMgPSBjb21tb25fMS5leHRlbmQodG9QYXJhbVZhbHMsIGZyb21QYXJhbVZhbHMsIGluY29taW5nUGFyYW1WYWxzKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgcGF0aE5vZGVfMS5QYXRoTm9kZSh0b05vZGUuc3RhdGUpLmFwcGx5UmF3UGFyYW1zKG93blBhcmFtVmFscyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIHBhcmFtIGtleXMgc3BlY2lmaWVkIGJ5IHRoZSBpbmNvbWluZyB0b1BhcmFtc1xuICAgICAgICByZXR1cm4gdG9QYXRoLm1hcChtYWtlSW5oZXJpdGVkUGFyYW1zTm9kZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgdHJlZSBjaGFuZ2VzIChlbnRlcmluZywgZXhpdGluZykgYmV0d2VlbiBhIGZyb21QYXRoIGFuZCB0b1BhdGguXG4gICAgICovXG4gICAgUGF0aFV0aWxzLnRyZWVDaGFuZ2VzID0gZnVuY3Rpb24gKGZyb21QYXRoLCB0b1BhdGgsIHJlbG9hZFN0YXRlKSB7XG4gICAgICAgIHZhciBrZWVwID0gMCwgbWF4ID0gTWF0aC5taW4oZnJvbVBhdGgubGVuZ3RoLCB0b1BhdGgubGVuZ3RoKTtcbiAgICAgICAgdmFyIG5vZGVzTWF0Y2ggPSBmdW5jdGlvbiAobm9kZTEsIG5vZGUyKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTEuZXF1YWxzKG5vZGUyLCBQYXRoVXRpbHMubm9uRHluYW1pY1BhcmFtcyk7XG4gICAgICAgIH07XG4gICAgICAgIHdoaWxlIChrZWVwIDwgbWF4ICYmIGZyb21QYXRoW2tlZXBdLnN0YXRlICE9PSByZWxvYWRTdGF0ZSAmJiBub2Rlc01hdGNoKGZyb21QYXRoW2tlZXBdLCB0b1BhdGhba2VlcF0pKSB7XG4gICAgICAgICAgICBrZWVwKys7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdpdmVuIGEgcmV0YWluZWQgbm9kZSwgcmV0dXJuIGEgbmV3IG5vZGUgd2hpY2ggdXNlcyB0aGUgdG8gbm9kZSdzIHBhcmFtIHZhbHVlcyAqL1xuICAgICAgICBmdW5jdGlvbiBhcHBseVRvUGFyYW1zKHJldGFpbmVkTm9kZSwgaWR4KSB7XG4gICAgICAgICAgICB2YXIgY2xvbmVkID0gcGF0aE5vZGVfMS5QYXRoTm9kZS5jbG9uZShyZXRhaW5lZE5vZGUpO1xuICAgICAgICAgICAgY2xvbmVkLnBhcmFtVmFsdWVzID0gdG9QYXRoW2lkeF0ucGFyYW1WYWx1ZXM7XG4gICAgICAgICAgICByZXR1cm4gY2xvbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmcm9tLCByZXRhaW5lZCwgZXhpdGluZywgZW50ZXJpbmcsIHRvO1xuICAgICAgICBmcm9tID0gZnJvbVBhdGg7XG4gICAgICAgIHJldGFpbmVkID0gZnJvbS5zbGljZSgwLCBrZWVwKTtcbiAgICAgICAgZXhpdGluZyA9IGZyb20uc2xpY2Uoa2VlcCk7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyByZXRhaW5lZCBwYXRoICh3aXRoIHNoYWxsb3cgY29waWVzIG9mIG5vZGVzKSB3aGljaCBoYXZlIHRoZSBwYXJhbXMgb2YgdGhlIHRvUGF0aCBtYXBwZWRcbiAgICAgICAgdmFyIHJldGFpbmVkV2l0aFRvUGFyYW1zID0gcmV0YWluZWQubWFwKGFwcGx5VG9QYXJhbXMpO1xuICAgICAgICBlbnRlcmluZyA9IHRvUGF0aC5zbGljZShrZWVwKTtcbiAgICAgICAgdG8gPSAocmV0YWluZWRXaXRoVG9QYXJhbXMpLmNvbmNhdChlbnRlcmluZyk7XG4gICAgICAgIHJldHVybiB7IGZyb206IGZyb20sIHRvOiB0bywgcmV0YWluZWQ6IHJldGFpbmVkLCBleGl0aW5nOiBleGl0aW5nLCBlbnRlcmluZzogZW50ZXJpbmcgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgcGF0aCB3aGljaCBpczogdGhlIHN1YnBhdGggb2YgdGhlIGZpcnN0IHBhdGggd2hpY2ggbWF0Y2hlcyB0aGUgc2Vjb25kIHBhdGguXG4gICAgICpcbiAgICAgKiBUaGUgbmV3IHBhdGggc3RhcnRzIGZyb20gcm9vdCBhbmQgY29udGFpbnMgYW55IG5vZGVzIHRoYXQgbWF0Y2ggdGhlIG5vZGVzIGluIHRoZSBzZWNvbmQgcGF0aC5cbiAgICAgKiBJdCBzdG9wcyBiZWZvcmUgdGhlIGZpcnN0IG5vbi1tYXRjaGluZyBub2RlLlxuICAgICAqXG4gICAgICogTm9kZXMgYXJlIGNvbXBhcmVkIHVzaW5nIHRoZWlyIHN0YXRlIHByb3BlcnR5IGFuZCB0aGVpciBwYXJhbWV0ZXIgdmFsdWVzLlxuICAgICAqIElmIGEgYHBhcmFtc0ZuYCBpcyBwcm92aWRlZCwgb25seSB0aGUgW1tQYXJhbV1dIHJldHVybmVkIGJ5IHRoZSBmdW5jdGlvbiB3aWxsIGJlIGNvbnNpZGVyZWQgd2hlbiBjb21wYXJpbmcgbm9kZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF0aEEgdGhlIGZpcnN0IHBhdGhcbiAgICAgKiBAcGFyYW0gcGF0aEIgdGhlIHNlY29uZCBwYXRoXG4gICAgICogQHBhcmFtIHBhcmFtc0ZuIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyB0aGUgcGFyYW1ldGVycyB0byBjb25zaWRlciB3aGVuIGNvbXBhcmluZ1xuICAgICAqXG4gICAgICogQHJldHVybnMgYW4gYXJyYXkgb2YgUGF0aE5vZGVzIGZyb20gdGhlIGZpcnN0IHBhdGggd2hpY2ggbWF0Y2ggdGhlIG5vZGVzIGluIHRoZSBzZWNvbmQgcGF0aFxuICAgICAqL1xuICAgIFBhdGhVdGlscy5tYXRjaGluZyA9IGZ1bmN0aW9uIChwYXRoQSwgcGF0aEIsIHBhcmFtc0ZuKSB7XG4gICAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICAgIHZhciB0dXBsZXMgPSBjb21tb25fMS5hcnJheVR1cGxlcyhwYXRoQSwgcGF0aEIpO1xuICAgICAgICByZXR1cm4gdHVwbGVzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hpbmcsIF9hKSB7XG4gICAgICAgICAgICB2YXIgbm9kZUEgPSBfYVswXSwgbm9kZUIgPSBfYVsxXTtcbiAgICAgICAgICAgIGRvbmUgPSBkb25lIHx8ICFub2RlQS5lcXVhbHMobm9kZUIsIHBhcmFtc0ZuKTtcbiAgICAgICAgICAgIHJldHVybiBkb25lID8gbWF0Y2hpbmcgOiBtYXRjaGluZy5jb25jYXQobm9kZUEpO1xuICAgICAgICB9LCBbXSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdHdvIHBhdGhzIGFyZSBpZGVudGljYWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF0aEFcbiAgICAgKiBAcGFyYW0gcGF0aEJcbiAgICAgKiBAcGFyYW0gcGFyYW1zRm4gYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIHRoZSBwYXJhbWV0ZXJzIHRvIGNvbnNpZGVyIHdoZW4gY29tcGFyaW5nXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgdGhlIHN0YXRlcyBhbmQgcGFyYW1ldGVyIHZhbHVlcyBmb3IgYm90aCBwYXRocyBhcmUgaWRlbnRpY2FsXG4gICAgICovXG4gICAgUGF0aFV0aWxzLmVxdWFscyA9IGZ1bmN0aW9uIChwYXRoQSwgcGF0aEIsIHBhcmFtc0ZuKSB7XG4gICAgICAgIHJldHVybiBwYXRoQS5sZW5ndGggPT09IHBhdGhCLmxlbmd0aCAmJlxuICAgICAgICAgICAgUGF0aFV0aWxzLm1hdGNoaW5nKHBhdGhBLCBwYXRoQiwgcGFyYW1zRm4pLmxlbmd0aCA9PT0gcGF0aEEubGVuZ3RoO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgc3VicGF0aCBvZiBhIHBhdGgsIHdoaWNoIHN0b3BzIGF0IHRoZSBmaXJzdCBtYXRjaGluZyBub2RlXG4gICAgICpcbiAgICAgKiBHaXZlbiBhbiBhcnJheSBvZiBub2RlcywgcmV0dXJucyBhIHN1YnNldCBvZiB0aGUgYXJyYXkgc3RhcnRpbmcgZnJvbSB0aGUgZmlyc3Qgbm9kZSxcbiAgICAgKiBzdG9wcGluZyB3aGVuIHRoZSBmaXJzdCBub2RlIG1hdGNoZXMgdGhlIHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoIGEgcGF0aCBvZiBbW1BhdGhOb2RlXV1zXG4gICAgICogQHBhcmFtIHByZWRpY2F0ZSBhIFtbUHJlZGljYXRlXV0gZm4gdGhhdCBtYXRjaGVzIFtbUGF0aE5vZGVdXXNcbiAgICAgKiBAcmV0dXJucyBhIHN1YnBhdGggdXAgdG8gdGhlIG1hdGNoaW5nIG5vZGUsIG9yIHVuZGVmaW5lZCBpZiBubyBtYXRjaCBpcyBmb3VuZFxuICAgICAqL1xuICAgIFBhdGhVdGlscy5zdWJQYXRoID0gZnVuY3Rpb24gKHBhdGgsIHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgbm9kZSA9IGNvbW1vbl8xLmZpbmQocGF0aCwgcHJlZGljYXRlKTtcbiAgICAgICAgdmFyIGVsZW1lbnRJZHggPSBwYXRoLmluZGV4T2Yobm9kZSk7XG4gICAgICAgIHJldHVybiBlbGVtZW50SWR4ID09PSAtMSA/IHVuZGVmaW5lZCA6IHBhdGguc2xpY2UoMCwgZWxlbWVudElkeCArIDEpO1xuICAgIH07XG4gICAgcmV0dXJuIFBhdGhVdGlscztcbn0oKSk7XG5QYXRoVXRpbHMubm9uRHluYW1pY1BhcmFtcyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuc3RhdGUucGFyYW1ldGVycyh7IGluaGVyaXQ6IGZhbHNlIH0pXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHBhcmFtKSB7IHJldHVybiAhcGFyYW0uZHluYW1pYzsgfSk7XG59O1xuLyoqIEdldHMgdGhlIHJhdyBwYXJhbWV0ZXIgdmFsdWVzIGZyb20gYSBwYXRoICovXG5QYXRoVXRpbHMucGFyYW1WYWx1ZXMgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBub2RlKSB7IHJldHVybiBjb21tb25fMS5leHRlbmQoYWNjLCBub2RlLnBhcmFtVmFsdWVzKTsgfSwge30pO1xufTtcbmV4cG9ydHMuUGF0aFV0aWxzID0gUGF0aFV0aWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF0aEZhY3RvcnkuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi9wYXRoL3BhdGhGYWN0b3J5LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module resolve */\n/** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar hof_1 = __webpack_require__(2);\nvar trace_1 = __webpack_require__(6);\nvar coreservices_1 = __webpack_require__(3);\nvar interface_1 = __webpack_require__(31);\nvar resolvable_1 = __webpack_require__(13);\nvar pathFactory_1 = __webpack_require__(18);\nvar strings_1 = __webpack_require__(5);\nvar when = interface_1.resolvePolicies.when;\nvar ALL_WHENS = [when.EAGER, when.LAZY];\nvar EAGER_WHENS = [when.EAGER];\nexports.NATIVE_INJECTOR_TOKEN = \"Native Injector\";\n/**\n * Encapsulates Dependency Injection for a path of nodes\n *\n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n *\n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nvar ResolveContext = function () {\n    function ResolveContext(_path) {\n        this._path = _path;\n    }\n    /** Gets all the tokens found in the resolve context, de-duplicated */\n    ResolveContext.prototype.getTokens = function () {\n        return this._path.reduce(function (acc, node) {\n            return acc.concat(node.resolvables.map(function (r) {\n                return r.token;\n            }));\n        }, []).reduce(common_1.uniqR, []);\n    };\n    /**\n     * Gets the Resolvable that matches the token\n     *\n     * Gets the last Resolvable that matches the token in this context, or undefined.\n     * Throws an error if it doesn't exist in the ResolveContext\n     */\n    ResolveContext.prototype.getResolvable = function (token) {\n        var matching = this._path.map(function (node) {\n            return node.resolvables;\n        }).reduce(common_1.unnestR, []).filter(function (r) {\n            return r.token === token;\n        });\n        return common_1.tail(matching);\n    };\n    /** Returns the [[ResolvePolicy]] for the given [[Resolvable]] */\n    ResolveContext.prototype.getPolicy = function (resolvable) {\n        var node = this.findNode(resolvable);\n        return resolvable.getPolicy(node.state);\n    };\n    /**\n     * Returns a ResolveContext that includes a portion of this one\n     *\n     * Given a state, this method creates a new ResolveContext from this one.\n     * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n     *\n     * #### Why\n     *\n     * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n     * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n     * This method is used to create a narrower context when injecting ancestor nodes.\n     *\n     * @example\n     * `let ABCD = new ResolveContext([A, B, C, D]);`\n     *\n     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n     * However, `B` should only be able to access resolvables from `A`, `B`.\n     *\n     * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n     * `let AB = ABCD.subcontext(a)`\n     */\n    ResolveContext.prototype.subContext = function (state) {\n        return new ResolveContext(pathFactory_1.PathUtils.subPath(this._path, function (node) {\n            return node.state === state;\n        }));\n    };\n    /**\n     * Adds Resolvables to the node that matches the state\n     *\n     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n     * The resolvable is added to the node matching the `state` parameter.\n     *\n     * These new resolvables are not automatically fetched.\n     * The calling code should either fetch them, fetch something that depends on them,\n     * or rely on [[resolvePath]] being called when some state is being entered.\n     *\n     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n     *\n     * @param newResolvables the new Resolvables\n     * @param state Used to find the node to put the resolvable on\n     */\n    ResolveContext.prototype.addResolvables = function (newResolvables, state) {\n        var node = common_1.find(this._path, hof_1.propEq('state', state));\n        var keys = newResolvables.map(function (r) {\n            return r.token;\n        });\n        node.resolvables = node.resolvables.filter(function (r) {\n            return keys.indexOf(r.token) === -1;\n        }).concat(newResolvables);\n    };\n    /**\n     * Returns a promise for an array of resolved path Element promises\n     *\n     * @param when\n     * @param trans\n     * @returns {Promise<any>|any}\n     */\n    ResolveContext.prototype.resolvePath = function (when, trans) {\n        var _this = this;\n        if (when === void 0) {\n            when = \"LAZY\";\n        }\n        // This option determines which 'when' policy Resolvables we are about to fetch.\n        var whenOption = common_1.inArray(ALL_WHENS, when) ? when : \"LAZY\";\n        // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n        var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n        // get the subpath to the state argument, if provided\n        trace_1.trace.traceResolvePath(this._path, when, trans);\n        var matchesPolicy = function matchesPolicy(acceptedVals, whenOrAsync) {\n            return function (resolvable) {\n                return common_1.inArray(acceptedVals, _this.getPolicy(resolvable)[whenOrAsync]);\n            };\n        };\n        // Trigger all the (matching) Resolvables in the path\n        // Reduce all the \"WAIT\" Resolvables into an array\n        var promises = this._path.reduce(function (acc, node) {\n            var nodeResolvables = node.resolvables.filter(matchesPolicy(matchedWhens, 'when'));\n            var nowait = nodeResolvables.filter(matchesPolicy(['NOWAIT'], 'async'));\n            var wait = nodeResolvables.filter(hof_1.not(matchesPolicy(['NOWAIT'], 'async')));\n            // For the matching Resolvables, start their async fetch process.\n            var subContext = _this.subContext(node.state);\n            var getResult = function getResult(r) {\n                return r.get(subContext, trans).then(function (value) {\n                    return { token: r.token, value: value };\n                });\n            };\n            nowait.forEach(getResult);\n            return acc.concat(wait.map(getResult));\n        }, []);\n        // Wait for all the \"WAIT\" resolvables\n        return coreservices_1.services.$q.all(promises);\n    };\n    ResolveContext.prototype.injector = function () {\n        return this._injector || (this._injector = new UIInjectorImpl(this));\n    };\n    ResolveContext.prototype.findNode = function (resolvable) {\n        return common_1.find(this._path, function (node) {\n            return common_1.inArray(node.resolvables, resolvable);\n        });\n    };\n    /**\n     * Gets the async dependencies of a Resolvable\n     *\n     * Given a Resolvable, returns its dependencies as a Resolvable[]\n     */\n    ResolveContext.prototype.getDependencies = function (resolvable) {\n        var _this = this;\n        var node = this.findNode(resolvable);\n        // Find which other resolvables are \"visible\" to the `resolvable` argument\n        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n        var subPath = pathFactory_1.PathUtils.subPath(this._path, function (x) {\n            return x === node;\n        }) || this._path;\n        var availableResolvables = subPath.reduce(function (acc, node) {\n            return acc.concat(node.resolvables);\n        }, []) //all of subpath's resolvables\n        .filter(function (res) {\n            return res !== resolvable;\n        }); // filter out the `resolvable` argument\n        var getDependency = function getDependency(token) {\n            var matching = availableResolvables.filter(function (r) {\n                return r.token === token;\n            });\n            if (matching.length) return common_1.tail(matching);\n            var fromInjector = _this.injector().getNative(token);\n            if (!fromInjector) {\n                throw new Error(\"Could not find Dependency Injection token: \" + strings_1.stringify(token));\n            }\n            return new resolvable_1.Resolvable(token, function () {\n                return fromInjector;\n            }, [], fromInjector);\n        };\n        return resolvable.deps.map(getDependency);\n    };\n    return ResolveContext;\n}();\nexports.ResolveContext = ResolveContext;\nvar UIInjectorImpl = function () {\n    function UIInjectorImpl(context) {\n        this.context = context;\n        this.native = this.get(exports.NATIVE_INJECTOR_TOKEN) || coreservices_1.services.$injector;\n    }\n    UIInjectorImpl.prototype.get = function (token) {\n        var resolvable = this.context.getResolvable(token);\n        if (resolvable) {\n            if (this.context.getPolicy(resolvable).async === 'NOWAIT') {\n                return resolvable.get(this.context);\n            }\n            if (!resolvable.resolved) {\n                throw new Error(\"Resolvable async .get() not complete:\" + strings_1.stringify(resolvable.token));\n            }\n            return resolvable.data;\n        }\n        return this.native && this.native.get(token);\n    };\n    UIInjectorImpl.prototype.getAsync = function (token) {\n        var resolvable = this.context.getResolvable(token);\n        if (resolvable) return resolvable.get(this.context);\n        return coreservices_1.services.$q.when(this.native.get(token));\n    };\n    UIInjectorImpl.prototype.getNative = function (token) {\n        return this.native && this.native.get(token);\n    };\n    return UIInjectorImpl;\n}();\n//# sourceMappingURL=resolveContext.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module url\n */\n/** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar hof_1 = __webpack_require__(2);\nvar predicates_1 = __webpack_require__(1);\nvar param_1 = __webpack_require__(9);\nvar strings_1 = __webpack_require__(5);\n/** @hidden */\nfunction quoteRegExp(string, param) {\n    var surroundPattern = ['', ''],\n        result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n    if (!param) return result;\n    switch (param.squash) {\n        case false:\n            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\n            break;\n        case true:\n            result = result.replace(/\\/$/, '');\n            surroundPattern = ['(?:\\/(', ')|\\/)?'];\n            break;\n        default:\n            surroundPattern = [\"(\" + param.squash + \"|\", ')?'];\n            break;\n    }\n    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n/** @hidden */\nvar memoizeTo = function memoizeTo(obj, prop, fn) {\n    return obj[prop] = obj[prop] || fn();\n};\n/** @hidden */\nvar splitOnSlash = strings_1.splitOnDelim('/');\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Note: a RegExp parameter will encode its value using either [[ParamTypes.path]] or [[ParamTypes.query]].\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`) in curly brace parameters.\n *   See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).\n *   A catch-all * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nvar UrlMatcher = function () {\n    /**\n     * @param pattern The pattern to compile into a matcher.\n     * @param paramTypes The [[ParamTypes]] registry\n     * @param config  A configuration object\n     * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n     * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n     */\n    function UrlMatcher(pattern, paramTypes, paramFactory, config) {\n        var _this = this;\n        this.config = config;\n        /** @hidden */\n        this._cache = { path: [this] };\n        /** @hidden */\n        this._children = [];\n        /** @hidden */\n        this._params = [];\n        /** @hidden */\n        this._segments = [];\n        /** @hidden */\n        this._compiled = [];\n        this.pattern = pattern;\n        this.config = common_1.defaults(this.config, {\n            params: {},\n            strict: true,\n            caseInsensitive: false,\n            paramMap: common_1.identity\n        });\n        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n        //   '*' name\n        //   ':' name\n        //   '{' name '}'\n        //   '{' name ':' regexp '}'\n        // The regular expression is somewhat complicated due to the need to allow curly braces\n        // inside the regular expression. The placeholder regexp breaks down as follows:\n        //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n        //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n        //    [^{}\\\\]+                       - anything other than curly braces or backslash\n        //    \\\\.                            - a backslash escape\n        //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n        var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n            searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n            last = 0,\n            m,\n            patterns = [];\n        var checkParamErrors = function checkParamErrors(id) {\n            if (!UrlMatcher.nameValidator.test(id)) throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n            if (common_1.find(_this._params, hof_1.propEq('id', id))) throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n        };\n        // Split into static segments separated by path parameter placeholders.\n        // The number of segments is always 1 more than the number of parameters.\n        var matchDetails = function matchDetails(m, isSearch) {\n            // IE[78] returns '' for unmatched groups instead of null\n            var id = m[2] || m[3];\n            var regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n            var makeRegexpType = function makeRegexpType(regexp) {\n                return common_1.inherit(paramTypes.type(isSearch ? \"query\" : \"path\"), {\n                    pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)\n                });\n            };\n            return {\n                id: id,\n                regexp: regexp,\n                cfg: _this.config.params[id],\n                segment: pattern.substring(last, m.index),\n                type: !regexp ? null : paramTypes.type(regexp) || makeRegexpType(regexp)\n            };\n        };\n        var p, segment;\n        while (m = placeholder.exec(pattern)) {\n            p = matchDetails(m, false);\n            if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n            checkParamErrors(p.id);\n            this._params.push(paramFactory.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false)));\n            this._segments.push(p.segment);\n            patterns.push([p.segment, common_1.tail(this._params)]);\n            last = placeholder.lastIndex;\n        }\n        segment = pattern.substring(last);\n        // Find any search parameter names and remove them from the last segment\n        var i = segment.indexOf('?');\n        if (i >= 0) {\n            var search = segment.substring(i);\n            segment = segment.substring(0, i);\n            if (search.length > 0) {\n                last = 0;\n                while (m = searchPlaceholder.exec(search)) {\n                    p = matchDetails(m, true);\n                    checkParamErrors(p.id);\n                    this._params.push(paramFactory.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true)));\n                    last = placeholder.lastIndex;\n                    // check if ?&\n                }\n            }\n        }\n        this._segments.push(segment);\n        this._compiled = patterns.map(function (pattern) {\n            return quoteRegExp.apply(null, pattern);\n        }).concat(quoteRegExp(segment));\n    }\n    /**\n     * Creates a new concatenated UrlMatcher\n     *\n     * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n     *\n     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n     */\n    UrlMatcher.prototype.append = function (url) {\n        this._children.push(url);\n        url._cache = {\n            path: this._cache.path.concat(url),\n            parent: this,\n            pattern: null\n        };\n        return url;\n    };\n    /** @hidden */\n    UrlMatcher.prototype.isRoot = function () {\n        return this._cache.path[0] === this;\n    };\n    /** Returns the input pattern string */\n    UrlMatcher.prototype.toString = function () {\n        return this.pattern;\n    };\n    /**\n     * Tests the specified url/path against this matcher.\n     *\n     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n     * parameter values.  Returns null if the path does not match.\n     *\n     * The returned object contains the values\n     * of any search parameters that are mentioned in the pattern, but their value may be null if\n     * they are not present in `search`. This means that search parameters are always treated\n     * as optional.\n     *\n     * #### Example:\n     * ```js\n     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n     *   x: '1', q: 'hello'\n     * });\n     * // returns { id: 'bob', q: 'hello', r: null }\n     * ```\n     *\n     * @param path    The URL path to match, e.g. `$location.path()`.\n     * @param search  URL search parameters, e.g. `$location.search()`.\n     * @param hash    URL hash e.g. `$location.hash()`.\n     * @param options\n     *\n     * @returns The captured parameter values.\n     */\n    UrlMatcher.prototype.exec = function (path, search, hash, options) {\n        var _this = this;\n        if (search === void 0) {\n            search = {};\n        }\n        if (options === void 0) {\n            options = {};\n        }\n        var match = memoizeTo(this._cache, 'pattern', function () {\n            return new RegExp(['^', common_1.unnest(_this._cache.path.map(hof_1.prop('_compiled'))).join(''), _this.config.strict === false ? '\\/?' : '', '$'].join(''), _this.config.caseInsensitive ? 'i' : undefined);\n        }).exec(path);\n        if (!match) return null;\n        //options = defaults(options, { isolate: false });\n        var allParams = this.parameters(),\n            pathParams = allParams.filter(function (param) {\n            return !param.isSearch();\n        }),\n            searchParams = allParams.filter(function (param) {\n            return param.isSearch();\n        }),\n            nPathSegments = this._cache.path.map(function (urlm) {\n            return urlm._segments.length - 1;\n        }).reduce(function (a, x) {\n            return a + x;\n        }),\n            values = {};\n        if (nPathSegments !== match.length - 1) throw new Error(\"Unbalanced capture group in route '\" + this.pattern + \"'\");\n        function decodePathArray(string) {\n            var reverseString = function reverseString(str) {\n                return str.split(\"\").reverse().join(\"\");\n            };\n            var unquoteDashes = function unquoteDashes(str) {\n                return str.replace(/\\\\-/g, \"-\");\n            };\n            var split = reverseString(string).split(/-(?!\\\\)/);\n            var allReversed = common_1.map(split, reverseString);\n            return common_1.map(allReversed, unquoteDashes).reverse();\n        }\n        for (var i = 0; i < nPathSegments; i++) {\n            var param = pathParams[i];\n            var value = match[i + 1];\n            // if the param value matches a pre-replace pair, replace the value before decoding.\n            for (var j = 0; j < param.replace.length; j++) {\n                if (param.replace[j].from === value) value = param.replace[j].to;\n            }\n            if (value && param.array === true) value = decodePathArray(value);\n            if (predicates_1.isDefined(value)) value = param.type.decode(value);\n            values[param.id] = param.value(value);\n        }\n        searchParams.forEach(function (param) {\n            var value = search[param.id];\n            for (var j = 0; j < param.replace.length; j++) {\n                if (param.replace[j].from === value) value = param.replace[j].to;\n            }\n            if (predicates_1.isDefined(value)) value = param.type.decode(value);\n            values[param.id] = param.value(value);\n        });\n        if (hash) values[\"#\"] = hash;\n        return values;\n    };\n    /**\n     * @hidden\n     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n     *\n     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n     *    pattern has no parameters, an empty array is returned.\n     */\n    UrlMatcher.prototype.parameters = function (opts) {\n        if (opts === void 0) {\n            opts = {};\n        }\n        if (opts.inherit === false) return this._params;\n        return common_1.unnest(this._cache.path.map(function (matcher) {\n            return matcher._params;\n        }));\n    };\n    /**\n     * @hidden\n     * Returns a single parameter from this UrlMatcher by id\n     *\n     * @param id\n     * @param opts\n     * @returns {T|Param|any|boolean|UrlMatcher|null}\n     */\n    UrlMatcher.prototype.parameter = function (id, opts) {\n        var _this = this;\n        if (opts === void 0) {\n            opts = {};\n        }\n        var findParam = function findParam() {\n            for (var _i = 0, _a = _this._params; _i < _a.length; _i++) {\n                var param = _a[_i];\n                if (param.id === id) return param;\n            }\n        };\n        var parent = this._cache.parent;\n        return findParam() || opts.inherit !== false && parent && parent.parameter(id, opts) || null;\n    };\n    /**\n     * Validates the input parameter values against this UrlMatcher\n     *\n     * Checks an object hash of parameters to validate their correctness according to the parameter\n     * types of this `UrlMatcher`.\n     *\n     * @param params The object hash of parameters to validate.\n     * @returns Returns `true` if `params` validates, otherwise `false`.\n     */\n    UrlMatcher.prototype.validates = function (params) {\n        var validParamVal = function validParamVal(param, val) {\n            return !param || param.validates(val);\n        };\n        params = params || {};\n        // I'm not sure why this checks only the param keys passed in, and not all the params known to the matcher\n        var paramSchema = this.parameters().filter(function (paramDef) {\n            return params.hasOwnProperty(paramDef.id);\n        });\n        return paramSchema.map(function (paramDef) {\n            return validParamVal(paramDef, params[paramDef.id]);\n        }).reduce(common_1.allTrueR, true);\n    };\n    /**\n     * Given a set of parameter values, creates a URL from this UrlMatcher.\n     *\n     * Creates a URL that matches this pattern by substituting the specified values\n     * for the path and search parameters.\n     *\n     * #### Example:\n     * ```js\n     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n     * // returns '/user/bob?q=yes'\n     * ```\n     *\n     * @param values  the values to substitute for the parameters in this pattern.\n     * @returns the formatted URL (path and optionally search part).\n     */\n    UrlMatcher.prototype.format = function (values) {\n        if (values === void 0) {\n            values = {};\n        }\n        // Build the full path of UrlMatchers (including all parent UrlMatchers)\n        var urlMatchers = this._cache.path;\n        // Extract all the static segments and Params (processed as ParamDetails)\n        // into an ordered array\n        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_1.unnestR, []).map(function (x) {\n            return predicates_1.isString(x) ? x : getDetails(x);\n        });\n        // Extract the query params into a separate array\n        var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_1.unnestR, []).map(getDetails);\n        var isInvalid = function isInvalid(param) {\n            return param.isValid === false;\n        };\n        if (pathSegmentsAndParams.concat(queryParams).filter(isInvalid).length) {\n            return null;\n        }\n        /**\n         * Given a Param, applies the parameter value, then returns detailed information about it\n         */\n        function getDetails(param) {\n            // Normalize to typed value\n            var value = param.value(values[param.id]);\n            var isValid = param.validates(value);\n            var isDefaultValue = param.isDefaultValue(value);\n            // Check if we're in squash mode for the parameter\n            var squash = isDefaultValue ? param.squash : false;\n            // Allow the Parameter's Type to encode the value\n            var encoded = param.type.encode(value);\n            return { param: param, value: value, isValid: isValid, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };\n        }\n        // Build up the path-portion from the list of static segments and parameters\n        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {\n            // The element is a static segment (a raw string); just append it\n            if (predicates_1.isString(x)) return acc + x;\n            // Otherwise, it's a ParamDetails.\n            var squash = x.squash,\n                encoded = x.encoded,\n                param = x.param;\n            // If squash is === true, try to remove a slash from the path\n            if (squash === true) return acc.match(/\\/$/) ? acc.slice(0, -1) : acc;\n            // If squash is a string, use the string for the param value\n            if (predicates_1.isString(squash)) return acc + squash;\n            if (squash !== false) return acc; // ?\n            if (encoded == null) return acc;\n            // If this parameter value is an array, encode the value using encodeDashes\n            if (predicates_1.isArray(encoded)) return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join(\"-\");\n            // If the parameter type is \"raw\", then do not encodeURIComponent\n            if (param.raw) return acc + encoded;\n            // Encode the value\n            return acc + encodeURIComponent(encoded);\n        }, \"\");\n        // Build the query string by applying parameter values (array or regular)\n        // then mapping to key=value, then flattening and joining using \"&\"\n        var queryString = queryParams.map(function (paramDetails) {\n            var param = paramDetails.param,\n                squash = paramDetails.squash,\n                encoded = paramDetails.encoded,\n                isDefaultValue = paramDetails.isDefaultValue;\n            if (encoded == null || isDefaultValue && squash !== false) return;\n            if (!predicates_1.isArray(encoded)) encoded = [encoded];\n            if (encoded.length === 0) return;\n            if (!param.raw) encoded = common_1.map(encoded, encodeURIComponent);\n            return encoded.map(function (val) {\n                return param.id + \"=\" + val;\n            });\n        }).filter(common_1.identity).reduce(common_1.unnestR, []).join(\"&\");\n        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n        return pathString + (queryString ? \"?\" + queryString : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n    };\n    /** @hidden */\n    UrlMatcher.encodeDashes = function (str) {\n        return encodeURIComponent(str).replace(/-/g, function (c) {\n            return \"%5C%\" + c.charCodeAt(0).toString(16).toUpperCase();\n        });\n    };\n    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n    UrlMatcher.pathSegmentsAndParams = function (matcher) {\n        var staticSegments = matcher._segments;\n        var pathParams = matcher._params.filter(function (p) {\n            return p.location === param_1.DefType.PATH;\n        });\n        return common_1.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_1.unnestR, []).filter(function (x) {\n            return x !== \"\" && predicates_1.isDefined(x);\n        });\n    };\n    /** @hidden Given a matcher, return an array with the matcher's query params */\n    UrlMatcher.queryParams = function (matcher) {\n        return matcher._params.filter(function (p) {\n            return p.location === param_1.DefType.SEARCH;\n        });\n    };\n    /**\n     * Compare two UrlMatchers\n     *\n     * This comparison function converts a UrlMatcher into static and dynamic path segments.\n     * Each static path segment is a static string between a path separator (slash character).\n     * Each dynamic segment is a path parameter.\n     *\n     * The comparison function sorts static segments before dynamic ones.\n     */\n    UrlMatcher.compare = function (a, b) {\n        /**\n         * Turn a UrlMatcher and all its parent matchers into an array\n         * of slash literals '/', string literals, and Param objects\n         *\n         * This example matcher matches strings like \"/foo/:param/tail\":\n         * var matcher = $umf.compile(\"/foo\").append($umf.compile(\"/:param\")).append($umf.compile(\"/\")).append($umf.compile(\"tail\"));\n         * var result = segments(matcher); // [ '/', 'foo', '/', Param, '/', 'tail' ]\n         *\n         * Caches the result as `matcher._cache.segments`\n         */\n        var segments = function segments(matcher) {\n            return matcher._cache.segments = matcher._cache.segments || matcher._cache.path.map(UrlMatcher.pathSegmentsAndParams).reduce(common_1.unnestR, []).reduce(strings_1.joinNeighborsR, []).map(function (x) {\n                return predicates_1.isString(x) ? splitOnSlash(x) : x;\n            }).reduce(common_1.unnestR, []);\n        };\n        /**\n         * Gets the sort weight for each segment of a UrlMatcher\n         *\n         * Caches the result as `matcher._cache.weights`\n         */\n        var weights = function weights(matcher) {\n            return matcher._cache.weights = matcher._cache.weights || segments(matcher).map(function (segment) {\n                // Sort slashes first, then static strings, the Params\n                if (segment === '/') return 1;\n                if (predicates_1.isString(segment)) return 2;\n                if (segment instanceof param_1.Param) return 3;\n            });\n        };\n        var cmp,\n            i,\n            pairs = common_1.arrayTuples(weights(a), weights(b));\n        for (i = 0; i < pairs.length; i++) {\n            cmp = pairs[i][0] - pairs[i][1];\n            if (cmp !== 0) return cmp;\n        }\n        return 0;\n    };\n    return UrlMatcher;\n}();\n/** @hidden */\nUrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\nexports.UrlMatcher = UrlMatcher;\n//# sourceMappingURL=urlMatcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n")},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * @internalapi\n * @module vanilla\n */ /** */\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar utils_1 = __webpack_require__(14);\nvar predicates_1 = __webpack_require__(1);\nvar common_1 = __webpack_require__(0);\n/** A base `LocationServices` */\nvar BaseLocationServices = function () {\n    function BaseLocationServices(router, fireAfterUpdate) {\n        var _this = this;\n        this.fireAfterUpdate = fireAfterUpdate;\n        this._listener = function (evt) {\n            return _this._listeners.forEach(function (cb) {\n                return cb(evt);\n            });\n        };\n        this._listeners = [];\n        this.hash = function () {\n            return utils_1.parseUrl(_this._get()).hash;\n        };\n        this.path = function () {\n            return utils_1.parseUrl(_this._get()).path;\n        };\n        this.search = function () {\n            return utils_1.getParams(utils_1.parseUrl(_this._get()).search);\n        };\n        this._location = window && window.location;\n        this._history = window && window.history;\n    }\n    BaseLocationServices.prototype.url = function (url, replace) {\n        if (replace === void 0) {\n            replace = true;\n        }\n        if (predicates_1.isDefined(url) && url !== this._get()) {\n            this._set(null, null, url, replace);\n            if (this.fireAfterUpdate) {\n                var evt_1 = common_1.extend(new Event("locationchange"), { url: url });\n                this._listeners.forEach(function (cb) {\n                    return cb(evt_1);\n                });\n            }\n        }\n        return utils_1.buildUrl(this);\n    };\n    BaseLocationServices.prototype.onChange = function (cb) {\n        var _this = this;\n        this._listeners.push(cb);\n        return function () {\n            return common_1.removeFrom(_this._listeners, cb);\n        };\n    };\n    BaseLocationServices.prototype.dispose = function (router) {\n        common_1.deregAll(this._listeners);\n    };\n    return BaseLocationServices;\n}();\nexports.BaseLocationServices = BaseLocationServices;\n//# sourceMappingURL=baseLocationService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvYmFzZUxvY2F0aW9uU2VydmljZS5qcz8wODc5Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXRpbHNfMSIsInJlcXVpcmUiLCJwcmVkaWNhdGVzXzEiLCJjb21tb25fMSIsIkJhc2VMb2NhdGlvblNlcnZpY2VzIiwicm91dGVyIiwiZmlyZUFmdGVyVXBkYXRlIiwiX3RoaXMiLCJfbGlzdGVuZXIiLCJldnQiLCJfbGlzdGVuZXJzIiwiZm9yRWFjaCIsImNiIiwiaGFzaCIsInBhcnNlVXJsIiwiX2dldCIsInBhdGgiLCJzZWFyY2giLCJnZXRQYXJhbXMiLCJfbG9jYXRpb24iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsIl9oaXN0b3J5IiwiaGlzdG9yeSIsInByb3RvdHlwZSIsInVybCIsInJlcGxhY2UiLCJpc0RlZmluZWQiLCJfc2V0IiwiZXZ0XzEiLCJleHRlbmQiLCJFdmVudCIsImJ1aWxkVXJsIiwib25DaGFuZ2UiLCJwdXNoIiwicmVtb3ZlRnJvbSIsImRpc3Bvc2UiLCJkZXJlZ0FsbCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0lBR0k7O0FBQ0pBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBLElBQUlDLFVBQVUsbUJBQUFDLENBQVEsRUFBUixDQUFkO0FBQ0EsSUFBSUMsZUFBZSxtQkFBQUQsQ0FBUSxDQUFSLENBQW5CO0FBQ0EsSUFBSUUsV0FBVyxtQkFBQUYsQ0FBUSxDQUFSLENBQWY7QUFDQTtBQUNBLElBQUlHLHVCQUF3QixZQUFZO0FBQ3BDLGFBQVNBLG9CQUFULENBQThCQyxNQUE5QixFQUFzQ0MsZUFBdEMsRUFBdUQ7QUFDbkQsWUFBSUMsUUFBUSxJQUFaO0FBQ0EsYUFBS0QsZUFBTCxHQUF1QkEsZUFBdkI7QUFDQSxhQUFLRSxTQUFMLEdBQWlCLFVBQVVDLEdBQVYsRUFBZTtBQUFFLG1CQUFPRixNQUFNRyxVQUFOLENBQWlCQyxPQUFqQixDQUF5QixVQUFVQyxFQUFWLEVBQWM7QUFBRSx1QkFBT0EsR0FBR0gsR0FBSCxDQUFQO0FBQWlCLGFBQTFELENBQVA7QUFBcUUsU0FBdkc7QUFDQSxhQUFLQyxVQUFMLEdBQWtCLEVBQWxCO0FBQ0EsYUFBS0csSUFBTCxHQUFZLFlBQVk7QUFBRSxtQkFBT2IsUUFBUWMsUUFBUixDQUFpQlAsTUFBTVEsSUFBTixFQUFqQixFQUErQkYsSUFBdEM7QUFBNkMsU0FBdkU7QUFDQSxhQUFLRyxJQUFMLEdBQVksWUFBWTtBQUFFLG1CQUFPaEIsUUFBUWMsUUFBUixDQUFpQlAsTUFBTVEsSUFBTixFQUFqQixFQUErQkMsSUFBdEM7QUFBNkMsU0FBdkU7QUFDQSxhQUFLQyxNQUFMLEdBQWMsWUFBWTtBQUFFLG1CQUFPakIsUUFBUWtCLFNBQVIsQ0FBa0JsQixRQUFRYyxRQUFSLENBQWlCUCxNQUFNUSxJQUFOLEVBQWpCLEVBQStCRSxNQUFqRCxDQUFQO0FBQWtFLFNBQTlGO0FBQ0EsYUFBS0UsU0FBTCxHQUFpQkMsVUFBVUEsT0FBT0MsUUFBbEM7QUFDQSxhQUFLQyxRQUFMLEdBQWdCRixVQUFVQSxPQUFPRyxPQUFqQztBQUNIO0FBQ0RuQix5QkFBcUJvQixTQUFyQixDQUErQkMsR0FBL0IsR0FBcUMsVUFBVUEsR0FBVixFQUFlQyxPQUFmLEVBQXdCO0FBQ3pELFlBQUlBLFlBQVksS0FBSyxDQUFyQixFQUF3QjtBQUFFQSxzQkFBVSxJQUFWO0FBQWlCO0FBQzNDLFlBQUl4QixhQUFheUIsU0FBYixDQUF1QkYsR0FBdkIsS0FBK0JBLFFBQVEsS0FBS1YsSUFBTCxFQUEzQyxFQUF3RDtBQUNwRCxpQkFBS2EsSUFBTCxDQUFVLElBQVYsRUFBZ0IsSUFBaEIsRUFBc0JILEdBQXRCLEVBQTJCQyxPQUEzQjtBQUNBLGdCQUFJLEtBQUtwQixlQUFULEVBQTBCO0FBQ3RCLG9CQUFJdUIsUUFBUTFCLFNBQVMyQixNQUFULENBQWdCLElBQUlDLEtBQUosQ0FBVSxnQkFBVixDQUFoQixFQUE2QyxFQUFFTixLQUFLQSxHQUFQLEVBQTdDLENBQVo7QUFDQSxxQkFBS2YsVUFBTCxDQUFnQkMsT0FBaEIsQ0FBd0IsVUFBVUMsRUFBVixFQUFjO0FBQUUsMkJBQU9BLEdBQUdpQixLQUFILENBQVA7QUFBbUIsaUJBQTNEO0FBQ0g7QUFDSjtBQUNELGVBQU83QixRQUFRZ0MsUUFBUixDQUFpQixJQUFqQixDQUFQO0FBQ0gsS0FWRDtBQVdBNUIseUJBQXFCb0IsU0FBckIsQ0FBK0JTLFFBQS9CLEdBQTBDLFVBQVVyQixFQUFWLEVBQWM7QUFDcEQsWUFBSUwsUUFBUSxJQUFaO0FBQ0EsYUFBS0csVUFBTCxDQUFnQndCLElBQWhCLENBQXFCdEIsRUFBckI7QUFDQSxlQUFPLFlBQVk7QUFBRSxtQkFBT1QsU0FBU2dDLFVBQVQsQ0FBb0I1QixNQUFNRyxVQUExQixFQUFzQ0UsRUFBdEMsQ0FBUDtBQUFtRCxTQUF4RTtBQUNILEtBSkQ7QUFLQVIseUJBQXFCb0IsU0FBckIsQ0FBK0JZLE9BQS9CLEdBQXlDLFVBQVUvQixNQUFWLEVBQWtCO0FBQ3ZERixpQkFBU2tDLFFBQVQsQ0FBa0IsS0FBSzNCLFVBQXZCO0FBQ0gsS0FGRDtBQUdBLFdBQU9OLG9CQUFQO0FBQ0gsQ0FoQzJCLEVBQTVCO0FBaUNBTixRQUFRTSxvQkFBUixHQUErQkEsb0JBQS9CO0FBQ0EiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQGludGVybmFsYXBpXG4gKiBAbW9kdWxlIHZhbmlsbGFcbiAqLyAvKiogKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgcHJlZGljYXRlc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9wcmVkaWNhdGVzXCIpO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb21tb25cIik7XG4vKiogQSBiYXNlIGBMb2NhdGlvblNlcnZpY2VzYCAqL1xudmFyIEJhc2VMb2NhdGlvblNlcnZpY2VzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCYXNlTG9jYXRpb25TZXJ2aWNlcyhyb3V0ZXIsIGZpcmVBZnRlclVwZGF0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmZpcmVBZnRlclVwZGF0ZSA9IGZpcmVBZnRlclVwZGF0ZTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZ0KSB7IHJldHVybiBfdGhpcy5fbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IHJldHVybiBjYihldnQpOyB9KTsgfTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgICAgIHRoaXMuaGFzaCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEucGFyc2VVcmwoX3RoaXMuX2dldCgpKS5oYXNoOyB9O1xuICAgICAgICB0aGlzLnBhdGggPSBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLnBhcnNlVXJsKF90aGlzLl9nZXQoKSkucGF0aDsgfTtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLmdldFBhcmFtcyh1dGlsc18xLnBhcnNlVXJsKF90aGlzLl9nZXQoKSkuc2VhcmNoKTsgfTtcbiAgICAgICAgdGhpcy5fbG9jYXRpb24gPSB3aW5kb3cgJiYgd2luZG93LmxvY2F0aW9uO1xuICAgICAgICB0aGlzLl9oaXN0b3J5ID0gd2luZG93ICYmIHdpbmRvdy5oaXN0b3J5O1xuICAgIH1cbiAgICBCYXNlTG9jYXRpb25TZXJ2aWNlcy5wcm90b3R5cGUudXJsID0gZnVuY3Rpb24gKHVybCwgcmVwbGFjZSkge1xuICAgICAgICBpZiAocmVwbGFjZSA9PT0gdm9pZCAwKSB7IHJlcGxhY2UgPSB0cnVlOyB9XG4gICAgICAgIGlmIChwcmVkaWNhdGVzXzEuaXNEZWZpbmVkKHVybCkgJiYgdXJsICE9PSB0aGlzLl9nZXQoKSkge1xuICAgICAgICAgICAgdGhpcy5fc2V0KG51bGwsIG51bGwsIHVybCwgcmVwbGFjZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5maXJlQWZ0ZXJVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZ0XzEgPSBjb21tb25fMS5leHRlbmQobmV3IEV2ZW50KFwibG9jYXRpb25jaGFuZ2VcIiksIHsgdXJsOiB1cmwgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IHJldHVybiBjYihldnRfMSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1dGlsc18xLmJ1aWxkVXJsKHRoaXMpO1xuICAgIH07XG4gICAgQmFzZUxvY2F0aW9uU2VydmljZXMucHJvdG90eXBlLm9uQ2hhbmdlID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGNiKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbW1vbl8xLnJlbW92ZUZyb20oX3RoaXMuX2xpc3RlbmVycywgY2IpOyB9O1xuICAgIH07XG4gICAgQmFzZUxvY2F0aW9uU2VydmljZXMucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAocm91dGVyKSB7XG4gICAgICAgIGNvbW1vbl8xLmRlcmVnQWxsKHRoaXMuX2xpc3RlbmVycyk7XG4gICAgfTtcbiAgICByZXR1cm4gQmFzZUxvY2F0aW9uU2VydmljZXM7XG59KCkpO1xuZXhwb3J0cy5CYXNlTG9jYXRpb25TZXJ2aWNlcyA9IEJhc2VMb2NhdGlvblNlcnZpY2VzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZUxvY2F0aW9uU2VydmljZS5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvYmFzZUxvY2F0aW9uU2VydmljZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __webpack_require__(0);\nvar hof_1 = __webpack_require__(2);\nvar glob_1 = __webpack_require__(16);\nvar predicates_1 = __webpack_require__(1);\n/**\n * Internal representation of a UI-Router state.\n *\n * Instances of this class are created when a [[StateDeclaration]] is registered with the [[StateRegistry]].\n *\n * A registered [[StateDeclaration]] is augmented with a getter ([[StateDeclaration.$$state]]) which returns the corresponding [[StateObject]] object.\n *\n * This class prototypally inherits from the corresponding [[StateDeclaration]].\n * Each of its own properties (i.e., `hasOwnProperty`) are built using builders from the [[StateBuilder]].\n */\nvar StateObject = function () {\n    /** @deprecated use State.create() */\n    function StateObject(config) {\n        return StateObject.create(config || {});\n    }\n    /**\n     * Create a state object to put the private/internal implementation details onto.\n     * The object's prototype chain looks like:\n     * (Internal State Object) -> (Copy of State.prototype) -> (State Declaration object) -> (State Declaration's prototype...)\n     *\n     * @param stateDecl the user-supplied State Declaration\n     * @returns {StateObject} an internal State object\n     */\n    StateObject.create = function (stateDecl) {\n        stateDecl = StateObject.isStateClass(stateDecl) ? new stateDecl() : stateDecl;\n        var state = common_1.inherit(common_1.inherit(stateDecl, StateObject.prototype));\n        stateDecl.$$state = function () {\n            return state;\n        };\n        state.self = stateDecl;\n        state.__stateObjectCache = {\n            nameGlob: glob_1.Glob.fromString(state.name) // might return null\n        };\n        return state;\n    };\n    /**\n     * Returns true if the provided parameter is the same state.\n     *\n     * Compares the identity of the state against the passed value, which is either an object\n     * reference to the actual `State` instance, the original definition object passed to\n     * `$stateProvider.state()`, or the fully-qualified name.\n     *\n     * @param ref Can be one of (a) a `State` instance, (b) an object that was passed\n     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n     * @returns Returns `true` if `ref` matches the current `State` instance.\n     */\n    StateObject.prototype.is = function (ref) {\n        return this === ref || this.self === ref || this.fqn() === ref;\n    };\n    /**\n     * @deprecated this does not properly handle dot notation\n     * @returns Returns a dot-separated name of the state.\n     */\n    StateObject.prototype.fqn = function () {\n        if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n        var name = this.parent.fqn();\n        return name ? name + \".\" + this.name : this.name;\n    };\n    /**\n     * Returns the root node of this state's tree.\n     *\n     * @returns The root of this state's tree.\n     */\n    StateObject.prototype.root = function () {\n        return this.parent && this.parent.root() || this;\n    };\n    /**\n     * Gets the state's `Param` objects\n     *\n     * Gets the list of [[Param]] objects owned by the state.\n     * If `opts.inherit` is true, it also includes the ancestor states' [[Param]] objects.\n     * If `opts.matchingKeys` exists, returns only `Param`s whose `id` is a key on the `matchingKeys` object\n     *\n     * @param opts options\n     */\n    StateObject.prototype.parameters = function (opts) {\n        opts = common_1.defaults(opts, { inherit: true, matchingKeys: null });\n        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n        return inherited.concat(common_1.values(this.params)).filter(function (param) {\n            return !opts.matchingKeys || opts.matchingKeys.hasOwnProperty(param.id);\n        });\n    };\n    /**\n     * Returns a single [[Param]] that is owned by the state\n     *\n     * If `opts.inherit` is true, it also searches the ancestor states` [[Param]]s.\n     * @param id the name of the [[Param]] to return\n     * @param opts options\n     */\n    StateObject.prototype.parameter = function (id, opts) {\n        if (opts === void 0) {\n            opts = {};\n        }\n        return this.url && this.url.parameter(id, opts) || common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) || opts.inherit && this.parent && this.parent.parameter(id);\n    };\n    StateObject.prototype.toString = function () {\n        return this.fqn();\n    };\n    return StateObject;\n}();\n/** Predicate which returns true if the object is an class with @State() decorator */\nStateObject.isStateClass = function (stateDecl) {\n    return predicates_1.isFunction(stateDecl) && stateDecl['__uiRouterState'] === true;\n};\n/** Predicate which returns true if the object is an internal [[StateObject]] object */\nStateObject.isState = function (obj) {\n    return predicates_1.isObject(obj['__stateObjectCache']);\n};\nexports.StateObject = StateObject;\n//# sourceMappingURL=stateObject.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n")},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * @module common\n */ /** for typedoc */\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Queue = function () {\n    function Queue(_items, _limit) {\n        if (_items === void 0) {\n            _items = [];\n        }\n        if (_limit === void 0) {\n            _limit = null;\n        }\n        this._items = _items;\n        this._limit = _limit;\n    }\n    Queue.prototype.enqueue = function (item) {\n        var items = this._items;\n        items.push(item);\n        if (this._limit && items.length > this._limit) items.shift();\n        return item;\n    };\n    Queue.prototype.dequeue = function () {\n        if (this.size()) return this._items.splice(0, 1)[0];\n    };\n    Queue.prototype.clear = function () {\n        var current = this._items;\n        this._items = [];\n        return current;\n    };\n    Queue.prototype.size = function () {\n        return this._items.length;\n    };\n    Queue.prototype.remove = function (item) {\n        var idx = this._items.indexOf(item);\n        return idx > -1 && this._items.splice(idx, 1)[0];\n    };\n    Queue.prototype.peekTail = function () {\n        return this._items[this._items.length - 1];\n    };\n    Queue.prototype.peekHead = function () {\n        if (this.size()) return this._items[0];\n    };\n    return Queue;\n}();\nexports.Queue = Queue;\n//# sourceMappingURL=queue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2NvbW1vbi9xdWV1ZS5qcz9iNTY0Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUXVldWUiLCJfaXRlbXMiLCJfbGltaXQiLCJwcm90b3R5cGUiLCJlbnF1ZXVlIiwiaXRlbSIsIml0ZW1zIiwicHVzaCIsImxlbmd0aCIsInNoaWZ0IiwiZGVxdWV1ZSIsInNpemUiLCJzcGxpY2UiLCJjbGVhciIsImN1cnJlbnQiLCJyZW1vdmUiLCJpZHgiLCJpbmRleE9mIiwicGVla1RhaWwiLCJwZWVrSGVhZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7SUFFSTs7QUFDSkEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0EsSUFBSUMsUUFBUyxZQUFZO0FBQ3JCLGFBQVNBLEtBQVQsQ0FBZUMsTUFBZixFQUF1QkMsTUFBdkIsRUFBK0I7QUFDM0IsWUFBSUQsV0FBVyxLQUFLLENBQXBCLEVBQXVCO0FBQUVBLHFCQUFTLEVBQVQ7QUFBYztBQUN2QyxZQUFJQyxXQUFXLEtBQUssQ0FBcEIsRUFBdUI7QUFBRUEscUJBQVMsSUFBVDtBQUFnQjtBQUN6QyxhQUFLRCxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxhQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFDSDtBQUNERixVQUFNRyxTQUFOLENBQWdCQyxPQUFoQixHQUEwQixVQUFVQyxJQUFWLEVBQWdCO0FBQ3RDLFlBQUlDLFFBQVEsS0FBS0wsTUFBakI7QUFDQUssY0FBTUMsSUFBTixDQUFXRixJQUFYO0FBQ0EsWUFBSSxLQUFLSCxNQUFMLElBQWVJLE1BQU1FLE1BQU4sR0FBZSxLQUFLTixNQUF2QyxFQUNJSSxNQUFNRyxLQUFOO0FBQ0osZUFBT0osSUFBUDtBQUNILEtBTkQ7QUFPQUwsVUFBTUcsU0FBTixDQUFnQk8sT0FBaEIsR0FBMEIsWUFBWTtBQUNsQyxZQUFJLEtBQUtDLElBQUwsRUFBSixFQUNJLE9BQU8sS0FBS1YsTUFBTCxDQUFZVyxNQUFaLENBQW1CLENBQW5CLEVBQXNCLENBQXRCLEVBQXlCLENBQXpCLENBQVA7QUFDUCxLQUhEO0FBSUFaLFVBQU1HLFNBQU4sQ0FBZ0JVLEtBQWhCLEdBQXdCLFlBQVk7QUFDaEMsWUFBSUMsVUFBVSxLQUFLYixNQUFuQjtBQUNBLGFBQUtBLE1BQUwsR0FBYyxFQUFkO0FBQ0EsZUFBT2EsT0FBUDtBQUNILEtBSkQ7QUFLQWQsVUFBTUcsU0FBTixDQUFnQlEsSUFBaEIsR0FBdUIsWUFBWTtBQUMvQixlQUFPLEtBQUtWLE1BQUwsQ0FBWU8sTUFBbkI7QUFDSCxLQUZEO0FBR0FSLFVBQU1HLFNBQU4sQ0FBZ0JZLE1BQWhCLEdBQXlCLFVBQVVWLElBQVYsRUFBZ0I7QUFDckMsWUFBSVcsTUFBTSxLQUFLZixNQUFMLENBQVlnQixPQUFaLENBQW9CWixJQUFwQixDQUFWO0FBQ0EsZUFBT1csTUFBTSxDQUFDLENBQVAsSUFBWSxLQUFLZixNQUFMLENBQVlXLE1BQVosQ0FBbUJJLEdBQW5CLEVBQXdCLENBQXhCLEVBQTJCLENBQTNCLENBQW5CO0FBQ0gsS0FIRDtBQUlBaEIsVUFBTUcsU0FBTixDQUFnQmUsUUFBaEIsR0FBMkIsWUFBWTtBQUNuQyxlQUFPLEtBQUtqQixNQUFMLENBQVksS0FBS0EsTUFBTCxDQUFZTyxNQUFaLEdBQXFCLENBQWpDLENBQVA7QUFDSCxLQUZEO0FBR0FSLFVBQU1HLFNBQU4sQ0FBZ0JnQixRQUFoQixHQUEyQixZQUFZO0FBQ25DLFlBQUksS0FBS1IsSUFBTCxFQUFKLEVBQ0ksT0FBTyxLQUFLVixNQUFMLENBQVksQ0FBWixDQUFQO0FBQ1AsS0FIRDtBQUlBLFdBQU9ELEtBQVA7QUFDSCxDQXRDWSxFQUFiO0FBdUNBRixRQUFRRSxLQUFSLEdBQWdCQSxLQUFoQjtBQUNBIiwiZmlsZSI6IjIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBtb2R1bGUgY29tbW9uXG4gKi8gLyoqIGZvciB0eXBlZG9jICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUXVldWUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1ZXVlKF9pdGVtcywgX2xpbWl0KSB7XG4gICAgICAgIGlmIChfaXRlbXMgPT09IHZvaWQgMCkgeyBfaXRlbXMgPSBbXTsgfVxuICAgICAgICBpZiAoX2xpbWl0ID09PSB2b2lkIDApIHsgX2xpbWl0ID0gbnVsbDsgfVxuICAgICAgICB0aGlzLl9pdGVtcyA9IF9pdGVtcztcbiAgICAgICAgdGhpcy5fbGltaXQgPSBfbGltaXQ7XG4gICAgfVxuICAgIFF1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5faXRlbXM7XG4gICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgIGlmICh0aGlzLl9saW1pdCAmJiBpdGVtcy5sZW5ndGggPiB0aGlzLl9saW1pdClcbiAgICAgICAgICAgIGl0ZW1zLnNoaWZ0KCk7XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH07XG4gICAgUXVldWUucHJvdG90eXBlLmRlcXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNpemUoKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtcy5zcGxpY2UoMCwgMSlbMF07XG4gICAgfTtcbiAgICBRdWV1ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5faXRlbXM7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gW107XG4gICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH07XG4gICAgUXVldWUucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtcy5sZW5ndGg7XG4gICAgfTtcbiAgICBRdWV1ZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgdmFyIGlkeCA9IHRoaXMuX2l0ZW1zLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIHJldHVybiBpZHggPiAtMSAmJiB0aGlzLl9pdGVtcy5zcGxpY2UoaWR4LCAxKVswXTtcbiAgICB9O1xuICAgIFF1ZXVlLnByb3RvdHlwZS5wZWVrVGFpbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aCAtIDFdO1xuICAgIH07XG4gICAgUXVldWUucHJvdG90eXBlLnBlZWtIZWFkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zaXplKCkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbXNbMF07XG4gICAgfTtcbiAgICByZXR1cm4gUXVldWU7XG59KCkpO1xuZXhwb3J0cy5RdWV1ZSA9IFF1ZXVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVldWUuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi9jb21tb24vcXVldWUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\nvar interface_1 = __webpack_require__(8); // has or is using\nvar glob_1 = __webpack_require__(16);\n/**\n * Determines if the given state matches the matchCriteria\n *\n * @hidden\n *\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function\'s result is truthy.\n * @returns {boolean}\n */\nfunction matchState(state, criterion) {\n    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;\n    function matchGlobs(_state) {\n        var globStrings = toMatch;\n        for (var i = 0; i < globStrings.length; i++) {\n            var glob = new glob_1.Glob(globStrings[i]);\n            if (glob && glob.matches(_state.name) || !glob && globStrings[i] === _state.name) {\n                return true;\n            }\n        }\n        return false;\n    }\n    var matchFn = predicates_1.isFunction(toMatch) ? toMatch : matchGlobs;\n    return !!matchFn(state);\n}\nexports.matchState = matchState;\n/**\n * @internalapi\n * The registration data for a registered transition hook\n */\nvar RegisteredHook = function () {\n    function RegisteredHook(tranSvc, eventType, callback, matchCriteria, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        this.tranSvc = tranSvc;\n        this.eventType = eventType;\n        this.callback = callback;\n        this.matchCriteria = matchCriteria;\n        this.priority = options.priority || 0;\n        this.bind = options.bind || null;\n        this._deregistered = false;\n    }\n    /**\n     * Gets the matching [[PathNode]]s\n     *\n     * Given an array of [[PathNode]]s, and a [[HookMatchCriterion]], returns an array containing\n     * the [[PathNode]]s that the criteria matches, or `null` if there were no matching nodes.\n     *\n     * Returning `null` is significant to distinguish between the default\n     * "match-all criterion value" of `true` compared to a `() => true` function,\n     * when the nodes is an empty array.\n     *\n     * This is useful to allow a transition match criteria of `entering: true`\n     * to still match a transition, even when `entering === []`.  Contrast that\n     * with `entering: (state) => true` which only matches when a state is actually\n     * being entered.\n     */\n    RegisteredHook.prototype._matchingNodes = function (nodes, criterion) {\n        if (criterion === true) return nodes;\n        var matching = nodes.filter(function (node) {\n            return matchState(node.state, criterion);\n        });\n        return matching.length ? matching : null;\n    };\n    /**\n     * Gets the default match criteria (all `true`)\n     *\n     * Returns an object which has all the criteria match paths as keys and `true` as values, i.e.:\n     *\n     * ```js\n     * {\n     *   to: true,\n     *   from: true,\n     *   entering: true,\n     *   exiting: true,\n     *   retained: true,\n     * }\n     */\n    RegisteredHook.prototype._getDefaultMatchCriteria = function () {\n        return common_1.map(this.tranSvc._pluginapi._getPathTypes(), function () {\n            return true;\n        });\n    };\n    /**\n     * Gets matching nodes as [[IMatchingNodes]]\n     *\n     * Create a IMatchingNodes object from the TransitionHookTypes that is roughly equivalent to:\n     *\n     * ```js\n     * let matches: IMatchingNodes = {\n     *   to:       _matchingNodes([tail(treeChanges.to)],   mc.to),\n     *   from:     _matchingNodes([tail(treeChanges.from)], mc.from),\n     *   exiting:  _matchingNodes(treeChanges.exiting,      mc.exiting),\n     *   retained: _matchingNodes(treeChanges.retained,     mc.retained),\n     *   entering: _matchingNodes(treeChanges.entering,     mc.entering),\n     * };\n     * ```\n     */\n    RegisteredHook.prototype._getMatchingNodes = function (treeChanges) {\n        var _this = this;\n        var criteria = common_1.extend(this._getDefaultMatchCriteria(), this.matchCriteria);\n        var paths = common_1.values(this.tranSvc._pluginapi._getPathTypes());\n        return paths.reduce(function (mn, pathtype) {\n            // STATE scope criteria matches against every node in the path.\n            // TRANSITION scope criteria matches against only the last node in the path\n            var isStateHook = pathtype.scope === interface_1.TransitionHookScope.STATE;\n            var path = treeChanges[pathtype.name] || [];\n            var nodes = isStateHook ? path : [common_1.tail(path)];\n            mn[pathtype.name] = _this._matchingNodes(nodes, criteria[pathtype.name]);\n            return mn;\n        }, {});\n    };\n    /**\n     * Determines if this hook\'s [[matchCriteria]] match the given [[TreeChanges]]\n     *\n     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n     */\n    RegisteredHook.prototype.matches = function (treeChanges) {\n        var matches = this._getMatchingNodes(treeChanges);\n        // Check if all the criteria matched the TreeChanges object\n        var allMatched = common_1.values(matches).every(common_1.identity);\n        return allMatched ? matches : null;\n    };\n    return RegisteredHook;\n}();\nexports.RegisteredHook = RegisteredHook;\n/** @hidden Return a registration function of the requested type. */\nfunction makeEvent(registry, transitionService, eventType) {\n    // Create the object which holds the registered transition hooks.\n    var _registeredHooks = registry._registeredHooks = registry._registeredHooks || {};\n    var hooks = _registeredHooks[eventType.name] = [];\n    // Create hook registration function on the IHookRegistry for the event\n    registry[eventType.name] = hookRegistrationFn;\n    function hookRegistrationFn(matchObject, callback, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var registeredHook = new RegisteredHook(transitionService, eventType, callback, matchObject, options);\n        hooks.push(registeredHook);\n        return function deregisterEventHook() {\n            registeredHook._deregistered = true;\n            common_1.removeFrom(hooks)(registeredHook);\n        };\n    }\n    return hookRegistrationFn;\n}\nexports.makeEvent = makeEvent;\n//# sourceMappingURL=hookRegistry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @module path */ /** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar hof_1 = __webpack_require__(2);\nvar param_1 = __webpack_require__(9);\n/**\n * @internalapi\n *\n * A node in a [[TreeChanges]] path\n *\n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nvar PathNode = function () {\n    function PathNode(stateOrNode) {\n        if (stateOrNode instanceof PathNode) {\n            var node = stateOrNode;\n            this.state = node.state;\n            this.paramSchema = node.paramSchema.slice();\n            this.paramValues = common_1.extend({}, node.paramValues);\n            this.resolvables = node.resolvables.slice();\n            this.views = node.views && node.views.slice();\n        } else {\n            var state = stateOrNode;\n            this.state = state;\n            this.paramSchema = state.parameters({ inherit: false });\n            this.paramValues = {};\n            this.resolvables = state.resolvables.map(function (res) {\n                return res.clone();\n            });\n        }\n    }\n    /** Sets [[paramValues]] for the node, from the values of an object hash */\n    PathNode.prototype.applyRawParams = function (params) {\n        var getParamVal = function getParamVal(paramDef) {\n            return [paramDef.id, paramDef.value(params[paramDef.id])];\n        };\n        this.paramValues = this.paramSchema.reduce(function (memo, pDef) {\n            return common_1.applyPairs(memo, getParamVal(pDef));\n        }, {});\n        return this;\n    };\n    /** Gets a specific [[Param]] metadata that belongs to the node */\n    PathNode.prototype.parameter = function (name) {\n        return common_1.find(this.paramSchema, hof_1.propEq("id", name));\n    };\n    /**\n     * @returns true if the state and parameter values for another PathNode are\n     * equal to the state and param values for this PathNode\n     */\n    PathNode.prototype.equals = function (node, paramsFn) {\n        var diff = this.diff(node, paramsFn);\n        return diff && diff.length === 0;\n    };\n    /**\n     * Finds Params with different parameter values on another PathNode.\n     *\n     * Given another node (of the same state), finds the parameter values which differ.\n     * Returns the [[Param]] (schema objects) whose parameter values differ.\n     *\n     * Given another node for a different state, returns `false`\n     *\n     * @param node The node to compare to\n     * @param paramsFn A function that returns which parameters should be compared.\n     * @returns The [[Param]]s which differ, or null if the two nodes are for different states\n     */\n    PathNode.prototype.diff = function (node, paramsFn) {\n        if (this.state !== node.state) return false;\n        var params = paramsFn ? paramsFn(this) : this.paramSchema;\n        return param_1.Param.changed(params, this.paramValues, node.paramValues);\n    };\n    /** Returns a clone of the PathNode */\n    PathNode.clone = function (node) {\n        return new PathNode(node);\n    };\n    return PathNode;\n}();\nexports.PathNode = PathNode;\n//# sourceMappingURL=pathNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @coreapi\n * @module params\n */\n/** */\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\n/**\n * An internal class which implements [[ParamTypeDefinition]].\n *\n * A [[ParamTypeDefinition]] is a plain javascript object used to register custom parameter types.\n * When a param type definition is registered, an instance of this class is created internally.\n *\n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n *\n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n *\n * #### Example:\n * ```js\n * var paramTypeDef = {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n *\n * var paramType = new ParamType(paramTypeDef);\n * ```\n * @internalapi\n */\nvar ParamType = function () {\n    /**\n     * @param def  A configuration object which contains the custom type definition.  The object\'s\n     *        properties will override the default methods and/or pattern in `ParamType`\'s public interface.\n     * @returns a new ParamType object\n     */\n    function ParamType(def) {\n        /** @inheritdoc */\n        this.pattern = /.*/;\n        /** @inheritdoc */\n        this.inherit = true;\n        common_1.extend(this, def);\n    }\n    // consider these four methods to be "abstract methods" that should be overridden\n    /** @inheritdoc */\n    ParamType.prototype.is = function (val, key) {\n        return true;\n    };\n    /** @inheritdoc */\n    ParamType.prototype.encode = function (val, key) {\n        return val;\n    };\n    /** @inheritdoc */\n    ParamType.prototype.decode = function (val, key) {\n        return val;\n    };\n    /** @inheritdoc */\n    ParamType.prototype.equals = function (a, b) {\n        return a == b;\n    };\n    ParamType.prototype.$subPattern = function () {\n        var sub = this.pattern.toString();\n        return sub.substr(1, sub.length - 2);\n    };\n    ParamType.prototype.toString = function () {\n        return "{ParamType:" + this.name + "}";\n    };\n    /** Given an encoded string, or a decoded object, returns a decoded object */\n    ParamType.prototype.$normalize = function (val) {\n        return this.is(val) ? val : this.decode(val);\n    };\n    /**\n     * Wraps an existing custom ParamType as an array of ParamType, depending on \'mode\'.\n     * e.g.:\n     * - urlmatcher pattern "/path?{queryParam[]:int}"\n     * - url: "/path?queryParam=1&queryParam=2\n     * - $stateParams.queryParam will be [1, 2]\n     * if `mode` is "auto", then\n     * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1\n     * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n     */\n    ParamType.prototype.$asArray = function (mode, isSearch) {\n        if (!mode) return this;\n        if (mode === "auto" && !isSearch) throw new Error("\'auto\' array mode is for query parameters only");\n        return new ArrayType(this, mode);\n    };\n    return ParamType;\n}();\nexports.ParamType = ParamType;\n/**\n * Wraps up a `ParamType` object to handle array values.\n * @internalapi\n */\nfunction ArrayType(type, mode) {\n    var _this = this;\n    // Wrap non-array value as array\n    function arrayWrap(val) {\n        return predicates_1.isArray(val) ? val : predicates_1.isDefined(val) ? [val] : [];\n    }\n    // Unwrap array value for "auto" mode. Return undefined for empty array.\n    function arrayUnwrap(val) {\n        switch (val.length) {\n            case 0:\n                return undefined;\n            case 1:\n                return mode === "auto" ? val[0] : val;\n            default:\n                return val;\n        }\n    }\n    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n    function arrayHandler(callback, allTruthyMode) {\n        return function handleArray(val) {\n            if (predicates_1.isArray(val) && val.length === 0) return val;\n            var arr = arrayWrap(val);\n            var result = common_1.map(arr, callback);\n            return allTruthyMode === true ? common_1.filter(result, function (x) {\n                return !x;\n            }).length === 0 : arrayUnwrap(result);\n        };\n    }\n    // Wraps type (.equals) functions to operate on each value of an array\n    function arrayEqualsHandler(callback) {\n        return function handleArray(val1, val2) {\n            var left = arrayWrap(val1),\n                right = arrayWrap(val2);\n            if (left.length !== right.length) return false;\n            for (var i = 0; i < left.length; i++) {\n                if (!callback(left[i], right[i])) return false;\n            }\n            return true;\n        };\n    }\n    [\'encode\', \'decode\', \'equals\', \'$normalize\'].forEach(function (name) {\n        var paramTypeFn = type[name].bind(type);\n        var wrapperFn = name === \'equals\' ? arrayEqualsHandler : arrayHandler;\n        _this[name] = wrapperFn(paramTypeFn);\n    });\n    common_1.extend(this, {\n        dynamic: type.dynamic,\n        name: type.name,\n        pattern: type.pattern,\n        inherit: type.inherit,\n        is: arrayHandler(type.is.bind(type), true),\n        $arrayMode: mode\n    });\n}\n//# sourceMappingURL=paramType.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nvar interface_1 = __webpack_require__(8);\nvar transition_1 = __webpack_require__(17);\nvar hookRegistry_1 = __webpack_require__(24);\nvar coreResolvables_1 = __webpack_require__(64);\nvar redirectTo_1 = __webpack_require__(65);\nvar onEnterExitRetain_1 = __webpack_require__(66);\nvar resolve_1 = __webpack_require__(67);\nvar views_1 = __webpack_require__(68);\nvar updateGlobals_1 = __webpack_require__(69);\nvar url_1 = __webpack_require__(70);\nvar lazyLoad_1 = __webpack_require__(46);\nvar transitionEventType_1 = __webpack_require__(47);\nvar transitionHook_1 = __webpack_require__(12);\nvar predicates_1 = __webpack_require__(1);\nvar common_1 = __webpack_require__(0);\nvar hof_1 = __webpack_require__(2);\nvar ignoredTransition_1 = __webpack_require__(71);\nvar invalidTransition_1 = __webpack_require__(72);\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexports.defaultTransOpts = {\n    location: true,\n    relative: null,\n    inherit: false,\n    notify: true,\n    reload: false,\n    custom: {},\n    current: function current() {\n        return null;\n    },\n    source: "unknown"\n};\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nvar TransitionService = function () {\n    /** @hidden */\n    function TransitionService(_router) {\n        /** @hidden */\n        this._transitionCount = 0;\n        /** @hidden The transition hook types, such as `onEnter`, `onStart`, etc */\n        this._eventTypes = [];\n        /** @hidden The registered transition hooks */\n        this._registeredHooks = {};\n        /** @hidden The  paths on a criteria object */\n        this._criteriaPaths = {};\n        this._router = _router;\n        this.$view = _router.viewService;\n        this._deregisterHookFns = {};\n        this._pluginapi = common_1.createProxyFunctions(hof_1.val(this), {}, hof_1.val(this), [\'_definePathType\', \'_defineEvent\', \'_getPathTypes\', \'_getEvents\', \'getHooks\']);\n        this._defineCorePaths();\n        this._defineCoreEvents();\n        this._registerCoreTransitionHooks();\n    }\n    /**\n     * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n     *\n     * Registers a transition lifecycle hook, which is invoked during transition construction.\n     *\n     * This low level hook should only be used by plugins.\n     * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n     * The Sticky States plugin uses this hook to modify the treechanges.\n     *\n     * ### Lifecycle\n     *\n     * `onCreate` hooks are invoked *while a transition is being constructed*.\n     *\n     * ### Return value\n     *\n     * The hook\'s return value is ignored\n     *\n     * @internalapi\n     * @param criteria defines which Transitions the Hook should be invoked for.\n     * @param callback the hook function which will be invoked.\n     * @param options the registration options\n     * @returns a function which deregisters the hook.\n     */\n    TransitionService.prototype.onCreate = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onBefore = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onStart = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onExit = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onRetain = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onEnter = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onFinish = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onSuccess = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onError = function (criteria, callback, options) {\n        return;\n    };\n    /**\n     * dispose\n     * @internalapi\n     */\n    TransitionService.prototype.dispose = function (router) {\n        common_1.values(this._registeredHooks).forEach(function (hooksArray) {\n            return hooksArray.forEach(function (hook) {\n                hook._deregistered = true;\n                common_1.removeFrom(hooksArray, hook);\n            });\n        });\n    };\n    /**\n     * Creates a new [[Transition]] object\n     *\n     * This is a factory function for creating new Transition objects.\n     * It is used internally by the [[StateService]] and should generally not be called by application code.\n     *\n     * @param fromPath the path to the current state (the from state)\n     * @param targetState the target state (destination)\n     * @returns a Transition\n     */\n    TransitionService.prototype.create = function (fromPath, targetState) {\n        return new transition_1.Transition(fromPath, targetState, this._router);\n    };\n    /** @hidden */\n    TransitionService.prototype._defineCoreEvents = function () {\n        var Phase = interface_1.TransitionHookPhase;\n        var TH = transitionHook_1.TransitionHook;\n        var paths = this._criteriaPaths;\n        var NORMAL_SORT = false,\n            REVERSE_SORT = true;\n        var ASYNCHRONOUS = false,\n            SYNCHRONOUS = true;\n        this._defineEvent("onCreate", Phase.CREATE, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.THROW_ERROR, SYNCHRONOUS);\n        this._defineEvent("onBefore", Phase.BEFORE, 0, paths.to);\n        this._defineEvent("onStart", Phase.RUN, 0, paths.to);\n        this._defineEvent("onExit", Phase.RUN, 100, paths.exiting, REVERSE_SORT);\n        this._defineEvent("onRetain", Phase.RUN, 200, paths.retained);\n        this._defineEvent("onEnter", Phase.RUN, 300, paths.entering);\n        this._defineEvent("onFinish", Phase.RUN, 400, paths.to);\n        this._defineEvent("onSuccess", Phase.SUCCESS, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n        this._defineEvent("onError", Phase.ERROR, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n    };\n    /** @hidden */\n    TransitionService.prototype._defineCorePaths = function () {\n        var STATE = interface_1.TransitionHookScope.STATE,\n            TRANSITION = interface_1.TransitionHookScope.TRANSITION;\n        this._definePathType("to", TRANSITION);\n        this._definePathType("from", TRANSITION);\n        this._definePathType("exiting", STATE);\n        this._definePathType("retained", STATE);\n        this._definePathType("entering", STATE);\n    };\n    /** @hidden */\n    TransitionService.prototype._defineEvent = function (name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous) {\n        if (reverseSort === void 0) {\n            reverseSort = false;\n        }\n        if (getResultHandler === void 0) {\n            getResultHandler = transitionHook_1.TransitionHook.HANDLE_RESULT;\n        }\n        if (getErrorHandler === void 0) {\n            getErrorHandler = transitionHook_1.TransitionHook.REJECT_ERROR;\n        }\n        if (synchronous === void 0) {\n            synchronous = false;\n        }\n        var eventType = new transitionEventType_1.TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous);\n        this._eventTypes.push(eventType);\n        hookRegistry_1.makeEvent(this, this, eventType);\n    };\n    ;\n    /** @hidden */\n    TransitionService.prototype._getEvents = function (phase) {\n        var transitionHookTypes = predicates_1.isDefined(phase) ? this._eventTypes.filter(function (type) {\n            return type.hookPhase === phase;\n        }) : this._eventTypes.slice();\n        return transitionHookTypes.sort(function (l, r) {\n            var cmpByPhase = l.hookPhase - r.hookPhase;\n            return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n        });\n    };\n    /**\n     * Adds a Path to be used as a criterion against a TreeChanges path\n     *\n     * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n     * It was defined by calling `defineTreeChangesCriterion(\'exiting\', TransitionHookScope.STATE)`\n     * Each state in the exiting path is checked against the criteria and returned as part of the match.\n     *\n     * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n     * It was defined by calling `defineTreeChangesCriterion(\'to\', TransitionHookScope.TRANSITION)`\n     * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n     *\n     * @hidden\n     */\n    TransitionService.prototype._definePathType = function (name, hookScope) {\n        this._criteriaPaths[name] = { name: name, scope: hookScope };\n    };\n    /** * @hidden */\n    TransitionService.prototype._getPathTypes = function () {\n        return this._criteriaPaths;\n    };\n    /** @hidden */\n    TransitionService.prototype.getHooks = function (hookName) {\n        return this._registeredHooks[hookName];\n    };\n    /** @hidden */\n    TransitionService.prototype._registerCoreTransitionHooks = function () {\n        var fns = this._deregisterHookFns;\n        fns.addCoreResolves = coreResolvables_1.registerAddCoreResolvables(this);\n        fns.ignored = ignoredTransition_1.registerIgnoredTransitionHook(this);\n        fns.invalid = invalidTransition_1.registerInvalidTransitionHook(this);\n        // Wire up redirectTo hook\n        fns.redirectTo = redirectTo_1.registerRedirectToHook(this);\n        // Wire up onExit/Retain/Enter state hooks\n        fns.onExit = onEnterExitRetain_1.registerOnExitHook(this);\n        fns.onRetain = onEnterExitRetain_1.registerOnRetainHook(this);\n        fns.onEnter = onEnterExitRetain_1.registerOnEnterHook(this);\n        // Wire up Resolve hooks\n        fns.eagerResolve = resolve_1.registerEagerResolvePath(this);\n        fns.lazyResolve = resolve_1.registerLazyResolveState(this);\n        // Wire up the View management hooks\n        fns.loadViews = views_1.registerLoadEnteringViews(this);\n        fns.activateViews = views_1.registerActivateViews(this);\n        // Updates global state after a transition\n        fns.updateGlobals = updateGlobals_1.registerUpdateGlobalState(this);\n        // After globals.current is updated at priority: 10000\n        fns.updateUrl = url_1.registerUpdateUrl(this);\n        // Lazy load state trees\n        fns.lazyLoad = lazyLoad_1.registerLazyLoadHook(this);\n    };\n    return TransitionService;\n}();\nexports.TransitionService = TransitionService;\n//# sourceMappingURL=transitionService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # Angular 1 types\n *\n * UI-Router core provides various Typescript types which you can use for code completion and validating parameter values, etc.\n * The customizations to the core types for Angular UI-Router are documented here.\n *\n * The optional [[$resolve]] service is also documented here.\n *\n * @module ng1\n * @preferred\n */\n/** for typedoc */\nvar angular_1 = __webpack_require__(10);\nvar core_1 = __webpack_require__(4);\nvar views_1 = __webpack_require__(29);\nvar templateFactory_1 = __webpack_require__(80);\nvar stateProvider_1 = __webpack_require__(56);\nvar onEnterExitRetain_1 = __webpack_require__(81);\nvar locationServices_1 = __webpack_require__(82);\nvar urlRouterProvider_1 = __webpack_require__(57);\nangular_1.ng.module(\"ui.router.angular1\", []);\nvar mod_init = angular_1.ng.module('ui.router.init', []);\nvar mod_util = angular_1.ng.module('ui.router.util', ['ng', 'ui.router.init']);\nvar mod_rtr = angular_1.ng.module('ui.router.router', ['ui.router.util']);\nvar mod_state = angular_1.ng.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);\nvar mod_main = angular_1.ng.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);\nvar mod_cmpt = angular_1.ng.module('ui.router.compat', ['ui.router']); // tslint:disable-line\nvar router = null;\n$uiRouter.$inject = ['$locationProvider'];\n/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */\nfunction $uiRouter($locationProvider) {\n    // Create a new instance of the Router when the $uiRouterProvider is initialized\n    router = this.router = new core_1.UIRouter();\n    router.stateProvider = new stateProvider_1.StateProvider(router.stateRegistry, router.stateService);\n    // Apply ng1 specific StateBuilder code for `views`, `resolve`, and `onExit/Retain/Enter` properties\n    router.stateRegistry.decorator(\"views\", views_1.ng1ViewsBuilder);\n    router.stateRegistry.decorator(\"onExit\", onEnterExitRetain_1.getStateHookBuilder(\"onExit\"));\n    router.stateRegistry.decorator(\"onRetain\", onEnterExitRetain_1.getStateHookBuilder(\"onRetain\"));\n    router.stateRegistry.decorator(\"onEnter\", onEnterExitRetain_1.getStateHookBuilder(\"onEnter\"));\n    router.viewService._pluginapi._viewConfigFactory('ng1', views_1.getNg1ViewConfigFactory());\n    var ng1LocationService = router.locationService = router.locationConfig = new locationServices_1.Ng1LocationServices($locationProvider);\n    locationServices_1.Ng1LocationServices.monkeyPatchPathParameterType(router);\n    // backwards compat: also expose router instance as $uiRouterProvider.router\n    router['router'] = router;\n    router['$get'] = $get;\n    $get.$inject = ['$location', '$browser', '$sniffer', '$rootScope', '$http', '$templateCache'];\n    function $get($location, $browser, $sniffer, $rootScope, $http, $templateCache) {\n        ng1LocationService._runtimeServices($rootScope, $location, $sniffer, $browser);\n        delete router['router'];\n        delete router['$get'];\n        return router;\n    }\n    return router;\n}\nvar getProviderFor = function getProviderFor(serviceName) {\n    return ['$uiRouterProvider', function ($urp) {\n        var service = $urp.router[serviceName];\n        service[\"$get\"] = function () {\n            return service;\n        };\n        return service;\n    }];\n};\n// This effectively calls $get() on `$uiRouterProvider` to trigger init (when ng enters runtime)\nrunBlock.$inject = ['$injector', '$q', '$uiRouter'];\nfunction runBlock($injector, $q, $uiRouter) {\n    core_1.services.$injector = $injector;\n    core_1.services.$q = $q;\n    // The $injector is now available.\n    // Find any resolvables that had dependency annotation deferred\n    $uiRouter.stateRegistry.get().map(function (x) {\n        return x.$$state().resolvables;\n    }).reduce(core_1.unnestR, []).filter(function (x) {\n        return x.deps === \"deferred\";\n    }).forEach(function (resolvable) {\n        return resolvable.deps = $injector.annotate(resolvable.resolveFn);\n    });\n}\n// $urlRouter service and $urlRouterProvider\nvar getUrlRouterProvider = function getUrlRouterProvider(uiRouter) {\n    return uiRouter.urlRouterProvider = new urlRouterProvider_1.UrlRouterProvider(uiRouter);\n};\n// $state service and $stateProvider\n// $urlRouter service and $urlRouterProvider\nvar getStateProvider = function getStateProvider() {\n    return core_1.extend(router.stateProvider, { $get: function $get() {\n            return router.stateService;\n        } });\n};\nwatchDigests.$inject = ['$rootScope'];\nfunction watchDigests($rootScope) {\n    $rootScope.$watch(function () {\n        core_1.trace.approximateDigests++;\n    });\n}\nexports.watchDigests = watchDigests;\nmod_init.provider(\"$uiRouter\", $uiRouter);\nmod_rtr.provider('$urlRouter', ['$uiRouterProvider', getUrlRouterProvider]);\nmod_util.provider('$urlService', getProviderFor('urlService'));\nmod_util.provider('$urlMatcherFactory', ['$uiRouterProvider', function () {\n    return router.urlMatcherFactory;\n}]);\nmod_util.provider('$templateFactory', function () {\n    return new templateFactory_1.TemplateFactory();\n});\nmod_state.provider('$stateRegistry', getProviderFor('stateRegistry'));\nmod_state.provider('$uiRouterGlobals', getProviderFor('globals'));\nmod_state.provider('$transitions', getProviderFor('transitionService'));\nmod_state.provider('$state', ['$uiRouterProvider', getStateProvider]);\nmod_state.factory('$stateParams', ['$uiRouter', function ($uiRouter) {\n    return $uiRouter.globals.params;\n}]);\nmod_main.factory('$view', function () {\n    return router.viewService;\n});\nmod_main.service(\"$trace\", function () {\n    return core_1.trace;\n});\nmod_main.run(watchDigests);\nmod_util.run(['$urlMatcherFactory', function ($urlMatcherFactory) {}]);\nmod_state.run(['$state', function ($state) {}]);\nmod_rtr.run(['$urlRouter', function ($urlRouter) {}]);\nmod_init.run(runBlock);\n/** @hidden TODO: find a place to move this */\nexports.getLocals = function (ctx) {\n    var tokens = ctx.getTokens().filter(core_1.isString);\n    var tuples = tokens.map(function (key) {\n        var resolvable = ctx.getResolvable(key);\n        var waitPolicy = ctx.getPolicy(resolvable).async;\n        return [key, waitPolicy === 'NOWAIT' ? resolvable.promise : resolvable.data];\n    });\n    return tuples.reduce(core_1.applyPairs, {});\n};\n//# sourceMappingURL=services.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar core_1 = __webpack_require__(4);\nfunction getNg1ViewConfigFactory() {\n    var templateFactory = null;\n    return function (path, view) {\n        templateFactory = templateFactory || core_1.services.$injector.get("$templateFactory");\n        return [new Ng1ViewConfig(path, view, templateFactory)];\n    };\n}\nexports.getNg1ViewConfigFactory = getNg1ViewConfigFactory;\nvar hasAnyKey = function hasAnyKey(keys, obj) {\n    return keys.reduce(function (acc, key) {\n        return acc || core_1.isDefined(obj[key]);\n    }, false);\n};\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `views`.\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to @uirouter/angularjs (ng1).\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\n * and applies the state-level configuration to a view named `$default`.\n */\nfunction ng1ViewsBuilder(state) {\n    // Do not process root state\n    if (!state.parent) return {};\n    var tplKeys = [\'templateProvider\', \'templateUrl\', \'template\', \'notify\', \'async\'],\n        ctrlKeys = [\'controller\', \'controllerProvider\', \'controllerAs\', \'resolveAs\'],\n        compKeys = [\'component\', \'bindings\', \'componentProvider\'],\n        nonCompKeys = tplKeys.concat(ctrlKeys),\n        allViewKeys = compKeys.concat(nonCompKeys);\n    // Do not allow a state to have both state-level props and also a `views: {}` property.\n    // A state without a `views: {}` property can declare properties for the `$default` view as properties of the state.\n    // However, the `$default` approach should not be mixed with a separate `views: ` block.\n    if (core_1.isDefined(state.views) && hasAnyKey(allViewKeys, state)) {\n        throw new Error("State \'" + state.name + "\' has a \'views\' object. " + "It cannot also have \\"view properties\\" at the state level.  " + "Move the following properties into a view (in the \'views\' object): " + (" " + allViewKeys.filter(function (key) {\n            return core_1.isDefined(state[key]);\n        }).join(", ")));\n    }\n    var views = {},\n        viewsObject = state.views || { "$default": core_1.pick(state, allViewKeys) };\n    core_1.forEach(viewsObject, function (config, name) {\n        // Account for views: { "": { template... } }\n        name = name || "$default";\n        // Account for views: { header: "headerComponent" }\n        if (core_1.isString(config)) config = { component: config };\n        // Make a shallow copy of the config object\n        config = core_1.extend({}, config);\n        // Do not allow a view to mix props for component-style view with props for template/controller-style view\n        if (hasAnyKey(compKeys, config) && hasAnyKey(nonCompKeys, config)) {\n            throw new Error("Cannot combine: " + compKeys.join("|") + " with: " + nonCompKeys.join("|") + " in stateview: \'" + name + "@" + state.name + "\'");\n        }\n        config.resolveAs = config.resolveAs || \'$resolve\';\n        config.$type = "ng1";\n        config.$context = state;\n        config.$name = name;\n        var normalized = core_1.ViewService.normalizeUIViewTarget(config.$context, config.$name);\n        config.$uiViewName = normalized.uiViewName;\n        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n        views[name] = config;\n    });\n    return views;\n}\nexports.ng1ViewsBuilder = ng1ViewsBuilder;\nvar id = 0;\nvar Ng1ViewConfig = function () {\n    function Ng1ViewConfig(path, viewDecl, factory) {\n        var _this = this;\n        this.path = path;\n        this.viewDecl = viewDecl;\n        this.factory = factory;\n        this.$id = id++;\n        this.loaded = false;\n        this.getTemplate = function (uiView, context) {\n            return _this.component ? _this.factory.makeComponentTemplate(uiView, context, _this.component, _this.viewDecl.bindings) : _this.template;\n        };\n    }\n    Ng1ViewConfig.prototype.load = function () {\n        var _this = this;\n        var $q = core_1.services.$q;\n        var context = new core_1.ResolveContext(this.path);\n        var params = this.path.reduce(function (acc, node) {\n            return core_1.extend(acc, node.paramValues);\n        }, {});\n        var promises = {\n            template: $q.when(this.factory.fromConfig(this.viewDecl, params, context)),\n            controller: $q.when(this.getController(context))\n        };\n        return $q.all(promises).then(function (results) {\n            core_1.trace.traceViewServiceEvent("Loaded", _this);\n            _this.controller = results.controller;\n            core_1.extend(_this, results.template); // Either { template: "tpl" } or { component: "cmpName" }\n            return _this;\n        });\n    };\n    /**\n     * Gets the controller for a view configuration.\n     *\n     * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\n     */\n    Ng1ViewConfig.prototype.getController = function (context) {\n        var provider = this.viewDecl.controllerProvider;\n        if (!core_1.isInjectable(provider)) return this.viewDecl.controller;\n        var deps = core_1.services.$injector.annotate(provider);\n        var providerFn = core_1.isArray(provider) ? core_1.tail(provider) : provider;\n        var resolvable = new core_1.Resolvable("", providerFn, deps);\n        return resolvable.get(context);\n    };\n    return Ng1ViewConfig;\n}();\nexports.Ng1ViewConfig = Ng1ViewConfig;\n//# sourceMappingURL=views.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n')},function(module,exports,__webpack_require__){"use strict";eval("\n/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\nvar interface_1 = __webpack_require__(8);\nvar transitionHook_1 = __webpack_require__(12);\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks ([[RegisteredHook]]) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching RegisteredHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts RegisteredHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n *\n */\nvar HookBuilder = function () {\n    function HookBuilder(transition) {\n        this.transition = transition;\n    }\n    HookBuilder.prototype.buildHooksForPhase = function (phase) {\n        var _this = this;\n        var $transitions = this.transition.router.transitionService;\n        return $transitions._pluginapi._getEvents(phase).map(function (type) {\n            return _this.buildHooks(type);\n        }).reduce(common_1.unnestR, []).filter(common_1.identity);\n    };\n    /**\n     * Returns an array of newly built TransitionHook objects.\n     *\n     * - Finds all RegisteredHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n     * - For each of the [[PathNode]]s, creates a TransitionHook\n     *\n     * @param hookType the type of the hook registration function, e.g., 'onEnter', 'onFinish'.\n     */\n    HookBuilder.prototype.buildHooks = function (hookType) {\n        var transition = this.transition;\n        var treeChanges = transition.treeChanges();\n        // Find all the matching registered hooks for a given hook type\n        var matchingHooks = this.getMatchingHooks(hookType, treeChanges);\n        if (!matchingHooks) return [];\n        var baseHookOptions = {\n            transition: transition,\n            current: transition.options().current\n        };\n        var makeTransitionHooks = function makeTransitionHooks(hook) {\n            // Fetch the Nodes that caused this hook to match.\n            var matches = hook.matches(treeChanges);\n            // Select the PathNode[] that will be used as TransitionHook context objects\n            var matchingNodes = matches[hookType.criteriaMatchPath.name];\n            // Return an array of HookTuples\n            return matchingNodes.map(function (node) {\n                var _options = common_1.extend({\n                    bind: hook.bind,\n                    traceData: { hookType: hookType.name, context: node }\n                }, baseHookOptions);\n                var state = hookType.criteriaMatchPath.scope === interface_1.TransitionHookScope.STATE ? node.state.self : null;\n                var transitionHook = new transitionHook_1.TransitionHook(transition, state, hook, _options);\n                return { hook: hook, node: node, transitionHook: transitionHook };\n            });\n        };\n        return matchingHooks.map(makeTransitionHooks).reduce(common_1.unnestR, []).sort(tupleSort(hookType.reverseSort)).map(function (tuple) {\n            return tuple.transitionHook;\n        });\n    };\n    /**\n     * Finds all RegisteredHooks from:\n     * - The Transition object instance hook registry\n     * - The TransitionService ($transitions) global hook registry\n     *\n     * which matched:\n     * - the eventType\n     * - the matchCriteria (to, from, exiting, retained, entering)\n     *\n     * @returns an array of matched [[RegisteredHook]]s\n     */\n    HookBuilder.prototype.getMatchingHooks = function (hookType, treeChanges) {\n        var isCreate = hookType.hookPhase === interface_1.TransitionHookPhase.CREATE;\n        // Instance and Global hook registries\n        var $transitions = this.transition.router.transitionService;\n        var registries = isCreate ? [$transitions] : [this.transition, $transitions];\n        return registries.map(function (reg) {\n            return reg.getHooks(hookType.name);\n        }) // Get named hooks from registries\n        .filter(common_1.assertPredicate(predicates_1.isArray, \"broken event named: \" + hookType.name)) // Sanity check\n        .reduce(common_1.unnestR, []) // Un-nest RegisteredHook[][] to RegisteredHook[] array\n        .filter(function (hook) {\n            return hook.matches(treeChanges);\n        }); // Only those satisfying matchCriteria\n    };\n    return HookBuilder;\n}();\nexports.HookBuilder = HookBuilder;\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort) {\n    if (reverseDepthSort === void 0) {\n        reverseDepthSort = false;\n    }\n    return function nodeDepthThenPriority(l, r) {\n        var factor = reverseDepthSort ? -1 : 1;\n        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n    };\n}\n//# sourceMappingURL=hookBuilder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @internalapi */\nexports.resolvePolicies = {\n    when: {\n        LAZY: "LAZY",\n        EAGER: "EAGER"\n    },\n    async: {\n        WAIT: "WAIT",\n        NOWAIT: "NOWAIT",\n        RXWAIT: "RXWAIT"\n    }\n};\n//# sourceMappingURL=interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3Jlc29sdmUvaW50ZXJmYWNlLmpzP2I4ZWYiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZXNvbHZlUG9saWNpZXMiLCJ3aGVuIiwiTEFaWSIsIkVBR0VSIiwiYXN5bmMiLCJXQUlUIiwiTk9XQUlUIiwiUlhXQUlUIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0E7QUFDQUQsUUFBUUUsZUFBUixHQUEwQjtBQUN0QkMsVUFBTTtBQUNGQyxjQUFNLE1BREo7QUFFRkMsZUFBTztBQUZMLEtBRGdCO0FBS3RCQyxXQUFPO0FBQ0hDLGNBQU0sTUFESDtBQUVIQyxnQkFBUSxRQUZMO0FBR0hDLGdCQUFRO0FBSEw7QUFMZSxDQUExQjtBQVdBIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiogQGludGVybmFsYXBpICovXG5leHBvcnRzLnJlc29sdmVQb2xpY2llcyA9IHtcbiAgICB3aGVuOiB7XG4gICAgICAgIExBWlk6IFwiTEFaWVwiLFxuICAgICAgICBFQUdFUjogXCJFQUdFUlwiXG4gICAgfSxcbiAgICBhc3luYzoge1xuICAgICAgICBXQUlUOiBcIldBSVRcIixcbiAgICAgICAgTk9XQUlUOiBcIk5PV0FJVFwiLFxuICAgICAgICBSWFdBSVQ6IFwiUlhXQUlUXCJcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvcmVzb2x2ZS9pbnRlcmZhY2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @coreapi\n * @module params\n */\n/** */\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\nvar hof_1 = __webpack_require__(2);\nvar coreservices_1 = __webpack_require__(3);\nvar paramType_1 = __webpack_require__(26);\n/**\n * A registry for parameter types.\n *\n * This registry manages the built-in (and custom) parameter types.\n *\n * The built-in parameter types are:\n *\n * - [[string]]\n * - [[path]]\n * - [[query]]\n * - [[hash]]\n * - [[int]]\n * - [[bool]]\n * - [[date]]\n * - [[json]]\n * - [[any]]\n */\nvar ParamTypes = function () {\n    /** @internalapi */\n    function ParamTypes() {\n        /** @hidden */\n        this.enqueue = true;\n        /** @hidden */\n        this.typeQueue = [];\n        /** @internalapi */\n        this.defaultTypes = common_1.pick(ParamTypes.prototype, ["hash", "string", "query", "path", "int", "bool", "date", "json", "any"]);\n        // Register default types. Store them in the prototype of this.types.\n        var makeType = function makeType(definition, name) {\n            return new paramType_1.ParamType(common_1.extend({ name: name }, definition));\n        };\n        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});\n    }\n    /** @internalapi */\n    ParamTypes.prototype.dispose = function () {\n        this.types = {};\n    };\n    /**\n     * Registers a parameter type\n     *\n     * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n     */\n    ParamTypes.prototype.type = function (name, definition, definitionFn) {\n        if (!predicates_1.isDefined(definition)) return this.types[name];\n        if (this.types.hasOwnProperty(name)) throw new Error("A type named \'" + name + "\' has already been defined.");\n        this.types[name] = new paramType_1.ParamType(common_1.extend({ name: name }, definition));\n        if (definitionFn) {\n            this.typeQueue.push({ name: name, def: definitionFn });\n            if (!this.enqueue) this._flushTypeQueue();\n        }\n        return this;\n    };\n    /** @internalapi */\n    ParamTypes.prototype._flushTypeQueue = function () {\n        while (this.typeQueue.length) {\n            var type = this.typeQueue.shift();\n            if (type.pattern) throw new Error("You cannot override a type\'s .pattern at runtime.");\n            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));\n        }\n    };\n    return ParamTypes;\n}();\nexports.ParamTypes = ParamTypes;\n/** @hidden */\nfunction initDefaultTypes() {\n    var makeDefaultType = function makeDefaultType(def) {\n        var valToString = function valToString(val) {\n            return val != null ? val.toString() : val;\n        };\n        var defaultTypeBase = {\n            encode: valToString,\n            decode: valToString,\n            is: hof_1.is(String),\n            pattern: /.*/,\n            equals: function equals(a, b) {\n                return a == b;\n            }\n        };\n        return common_1.extend({}, defaultTypeBase, def);\n    };\n    // Default Parameter Type Definitions\n    common_1.extend(ParamTypes.prototype, {\n        string: makeDefaultType({}),\n        path: makeDefaultType({\n            pattern: /[^/]*/\n        }),\n        query: makeDefaultType({}),\n        hash: makeDefaultType({\n            inherit: false\n        }),\n        int: makeDefaultType({\n            decode: function decode(val) {\n                return parseInt(val, 10);\n            },\n            is: function is(val) {\n                return !predicates_1.isNullOrUndefined(val) && this.decode(val.toString()) === val;\n            },\n            pattern: /-?\\d+/\n        }),\n        bool: makeDefaultType({\n            encode: function encode(val) {\n                return val && 1 || 0;\n            },\n            decode: function decode(val) {\n                return parseInt(val, 10) !== 0;\n            },\n            is: hof_1.is(Boolean),\n            pattern: /0|1/\n        }),\n        date: makeDefaultType({\n            encode: function encode(val) {\n                return !this.is(val) ? undefined : [val.getFullYear(), (\'0\' + (val.getMonth() + 1)).slice(-2), (\'0\' + val.getDate()).slice(-2)].join("-");\n            },\n            decode: function decode(val) {\n                if (this.is(val)) return val;\n                var match = this.capture.exec(val);\n                return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n            },\n            is: function is(val) {\n                return val instanceof Date && !isNaN(val.valueOf());\n            },\n            equals: function equals(l, r) {\n                return [\'getFullYear\', \'getMonth\', \'getDate\'].reduce(function (acc, fn) {\n                    return acc && l[fn]() === r[fn]();\n                }, true);\n            },\n            pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n            capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n        }),\n        json: makeDefaultType({\n            encode: common_1.toJson,\n            decode: common_1.fromJson,\n            is: hof_1.is(Object),\n            equals: common_1.equals,\n            pattern: /[^/]*/\n        }),\n        // does not encode/decode\n        any: makeDefaultType({\n            encode: common_1.identity,\n            decode: common_1.identity,\n            is: function is() {\n                return true;\n            },\n            equals: common_1.equals\n        })\n    });\n}\ninitDefaultTypes();\n//# sourceMappingURL=paramTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @coreapi\n * @module params\n */\n/** */\nvar common_1 = __webpack_require__(0);\n/** @internalapi */\nvar StateParams = function () {\n    function StateParams(params) {\n        if (params === void 0) {\n            params = {};\n        }\n        common_1.extend(this, params);\n    }\n    /**\n     * Merges a set of parameters with all parameters inherited between the common parents of the\n     * current state and a given destination state.\n     *\n     * @param {Object} newParams The set of parameters which will be composited with inherited params.\n     * @param {Object} $current Internal definition of object representing the current state.\n     * @param {Object} $to Internal definition of object representing state to transition to.\n     */\n    StateParams.prototype.$inherit = function (newParams, $current, $to) {\n        var parents = common_1.ancestors($current, $to),\n            parentParams,\n            inherited = {},\n            inheritList = [];\n        for (var i in parents) {\n            if (!parents[i] || !parents[i].params) continue;\n            parentParams = Object.keys(parents[i].params);\n            if (!parentParams.length) continue;\n            for (var j in parentParams) {\n                if (inheritList.indexOf(parentParams[j]) >= 0) continue;\n                inheritList.push(parentParams[j]);\n                inherited[parentParams[j]] = this[parentParams[j]];\n            }\n        }\n        return common_1.extend({}, inherited, newParams);\n    };\n    ;\n    return StateParams;\n}();\nexports.StateParams = StateParams;\n//# sourceMappingURL=stateParams.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3BhcmFtcy9zdGF0ZVBhcmFtcy5qcz81ZGIxIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29tbW9uXzEiLCJyZXF1aXJlIiwiU3RhdGVQYXJhbXMiLCJwYXJhbXMiLCJleHRlbmQiLCJwcm90b3R5cGUiLCIkaW5oZXJpdCIsIm5ld1BhcmFtcyIsIiRjdXJyZW50IiwiJHRvIiwicGFyZW50cyIsImFuY2VzdG9ycyIsInBhcmVudFBhcmFtcyIsImluaGVyaXRlZCIsImluaGVyaXRMaXN0IiwiaSIsImtleXMiLCJsZW5ndGgiLCJqIiwiaW5kZXhPZiIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQTs7OztBQUlBO0FBQ0EsSUFBSUMsV0FBVyxtQkFBQUMsQ0FBUSxDQUFSLENBQWY7QUFDQTtBQUNBLElBQUlDLGNBQWUsWUFBWTtBQUMzQixhQUFTQSxXQUFULENBQXFCQyxNQUFyQixFQUE2QjtBQUN6QixZQUFJQSxXQUFXLEtBQUssQ0FBcEIsRUFBdUI7QUFBRUEscUJBQVMsRUFBVDtBQUFjO0FBQ3ZDSCxpQkFBU0ksTUFBVCxDQUFnQixJQUFoQixFQUFzQkQsTUFBdEI7QUFDSDtBQUNEOzs7Ozs7OztBQVFBRCxnQkFBWUcsU0FBWixDQUFzQkMsUUFBdEIsR0FBaUMsVUFBVUMsU0FBVixFQUFxQkMsUUFBckIsRUFBK0JDLEdBQS9CLEVBQW9DO0FBQ2pFLFlBQUlDLFVBQVVWLFNBQVNXLFNBQVQsQ0FBbUJILFFBQW5CLEVBQTZCQyxHQUE3QixDQUFkO0FBQUEsWUFBaURHLFlBQWpEO0FBQUEsWUFBK0RDLFlBQVksRUFBM0U7QUFBQSxZQUErRUMsY0FBYyxFQUE3RjtBQUNBLGFBQUssSUFBSUMsQ0FBVCxJQUFjTCxPQUFkLEVBQXVCO0FBQ25CLGdCQUFJLENBQUNBLFFBQVFLLENBQVIsQ0FBRCxJQUFlLENBQUNMLFFBQVFLLENBQVIsRUFBV1osTUFBL0IsRUFDSTtBQUNKUywyQkFBZWhCLE9BQU9vQixJQUFQLENBQVlOLFFBQVFLLENBQVIsRUFBV1osTUFBdkIsQ0FBZjtBQUNBLGdCQUFJLENBQUNTLGFBQWFLLE1BQWxCLEVBQ0k7QUFDSixpQkFBSyxJQUFJQyxDQUFULElBQWNOLFlBQWQsRUFBNEI7QUFDeEIsb0JBQUlFLFlBQVlLLE9BQVosQ0FBb0JQLGFBQWFNLENBQWIsQ0FBcEIsS0FBd0MsQ0FBNUMsRUFDSTtBQUNKSiw0QkFBWU0sSUFBWixDQUFpQlIsYUFBYU0sQ0FBYixDQUFqQjtBQUNBTCwwQkFBVUQsYUFBYU0sQ0FBYixDQUFWLElBQTZCLEtBQUtOLGFBQWFNLENBQWIsQ0FBTCxDQUE3QjtBQUNIO0FBQ0o7QUFDRCxlQUFPbEIsU0FBU0ksTUFBVCxDQUFnQixFQUFoQixFQUFvQlMsU0FBcEIsRUFBK0JOLFNBQS9CLENBQVA7QUFDSCxLQWhCRDtBQWlCQTtBQUNBLFdBQU9MLFdBQVA7QUFDSCxDQWhDa0IsRUFBbkI7QUFpQ0FKLFFBQVFJLFdBQVIsR0FBc0JBLFdBQXRCO0FBQ0EiLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGNvcmVhcGlcbiAqIEBtb2R1bGUgcGFyYW1zXG4gKi9cbi8qKiAqL1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb21tb25cIik7XG4vKiogQGludGVybmFsYXBpICovXG52YXIgU3RhdGVQYXJhbXMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0YXRlUGFyYW1zKHBhcmFtcykge1xuICAgICAgICBpZiAocGFyYW1zID09PSB2b2lkIDApIHsgcGFyYW1zID0ge307IH1cbiAgICAgICAgY29tbW9uXzEuZXh0ZW5kKHRoaXMsIHBhcmFtcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1lcmdlcyBhIHNldCBvZiBwYXJhbWV0ZXJzIHdpdGggYWxsIHBhcmFtZXRlcnMgaW5oZXJpdGVkIGJldHdlZW4gdGhlIGNvbW1vbiBwYXJlbnRzIG9mIHRoZVxuICAgICAqIGN1cnJlbnQgc3RhdGUgYW5kIGEgZ2l2ZW4gZGVzdGluYXRpb24gc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbmV3UGFyYW1zIFRoZSBzZXQgb2YgcGFyYW1ldGVycyB3aGljaCB3aWxsIGJlIGNvbXBvc2l0ZWQgd2l0aCBpbmhlcml0ZWQgcGFyYW1zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAkY3VycmVudCBJbnRlcm5hbCBkZWZpbml0aW9uIG9mIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgc3RhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICR0byBJbnRlcm5hbCBkZWZpbml0aW9uIG9mIG9iamVjdCByZXByZXNlbnRpbmcgc3RhdGUgdG8gdHJhbnNpdGlvbiB0by5cbiAgICAgKi9cbiAgICBTdGF0ZVBhcmFtcy5wcm90b3R5cGUuJGluaGVyaXQgPSBmdW5jdGlvbiAobmV3UGFyYW1zLCAkY3VycmVudCwgJHRvKSB7XG4gICAgICAgIHZhciBwYXJlbnRzID0gY29tbW9uXzEuYW5jZXN0b3JzKCRjdXJyZW50LCAkdG8pLCBwYXJlbnRQYXJhbXMsIGluaGVyaXRlZCA9IHt9LCBpbmhlcml0TGlzdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpIGluIHBhcmVudHMpIHtcbiAgICAgICAgICAgIGlmICghcGFyZW50c1tpXSB8fCAhcGFyZW50c1tpXS5wYXJhbXMpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBwYXJlbnRQYXJhbXMgPSBPYmplY3Qua2V5cyhwYXJlbnRzW2ldLnBhcmFtcyk7XG4gICAgICAgICAgICBpZiAoIXBhcmVudFBhcmFtcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqIGluIHBhcmVudFBhcmFtcykge1xuICAgICAgICAgICAgICAgIGlmIChpbmhlcml0TGlzdC5pbmRleE9mKHBhcmVudFBhcmFtc1tqXSkgPj0gMClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaW5oZXJpdExpc3QucHVzaChwYXJlbnRQYXJhbXNbal0pO1xuICAgICAgICAgICAgICAgIGluaGVyaXRlZFtwYXJlbnRQYXJhbXNbal1dID0gdGhpc1twYXJlbnRQYXJhbXNbal1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21tb25fMS5leHRlbmQoe30sIGluaGVyaXRlZCwgbmV3UGFyYW1zKTtcbiAgICB9O1xuICAgIDtcbiAgICByZXR1cm4gU3RhdGVQYXJhbXM7XG59KCkpO1xuZXhwb3J0cy5TdGF0ZVBhcmFtcyA9IFN0YXRlUGFyYW1zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGVQYXJhbXMuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi9wYXJhbXMvc3RhdGVQYXJhbXMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @module state */ /** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\nvar strings_1 = __webpack_require__(5);\nvar hof_1 = __webpack_require__(2);\nvar resolvable_1 = __webpack_require__(13);\nvar coreservices_1 = __webpack_require__(3);\nvar parseUrl = function parseUrl(url) {\n    if (!predicates_1.isString(url)) return false;\n    var root = url.charAt(0) === \'^\';\n    return { val: root ? url.substring(1) : url, root: root };\n};\nfunction nameBuilder(state) {\n    return state.name;\n}\nfunction selfBuilder(state) {\n    state.self.$$state = function () {\n        return state;\n    };\n    return state.self;\n}\nfunction dataBuilder(state) {\n    if (state.parent && state.parent.data) {\n        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);\n    }\n    return state.data;\n}\nvar getUrlBuilder = function getUrlBuilder($urlMatcherFactoryProvider, root) {\n    return function urlBuilder(state) {\n        var stateDec = state;\n        // For future states, i.e., states whose name ends with `.**`,\n        // match anything that starts with the url prefix\n        if (stateDec && stateDec.url && stateDec.name && stateDec.name.match(/\\.\\*\\*$/)) {\n            stateDec.url += "{remainder:any}"; // match any path (.*)\n        }\n        var parsed = parseUrl(stateDec.url),\n            parent = state.parent;\n        var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n            params: state.params || {},\n            paramMap: function paramMap(paramConfig, isSearch) {\n                if (stateDec.reloadOnSearch === false && isSearch) paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });\n                return paramConfig;\n            }\n        });\n        if (!url) return null;\n        if (!$urlMatcherFactoryProvider.isMatcher(url)) throw new Error("Invalid url \'" + url + "\' in state \'" + state + "\'");\n        return parsed && parsed.root ? url : (parent && parent.navigable || root()).url.append(url);\n    };\n};\nvar getNavigableBuilder = function getNavigableBuilder(isRoot) {\n    return function navigableBuilder(state) {\n        return !isRoot(state) && state.url ? state : state.parent ? state.parent.navigable : null;\n    };\n};\nvar getParamsBuilder = function getParamsBuilder(paramFactory) {\n    return function paramsBuilder(state) {\n        var makeConfigParam = function makeConfigParam(config, id) {\n            return paramFactory.fromConfig(id, null, config);\n        };\n        var urlParams = state.url && state.url.parameters({ inherit: false }) || [];\n        var nonUrlParams = common_1.values(common_1.mapObj(common_1.omit(state.params || {}, urlParams.map(hof_1.prop(\'id\'))), makeConfigParam));\n        return urlParams.concat(nonUrlParams).map(function (p) {\n            return [p.id, p];\n        }).reduce(common_1.applyPairs, {});\n    };\n};\nfunction pathBuilder(state) {\n    return state.parent ? state.parent.path.concat(state) : [state];\n}\nfunction includesBuilder(state) {\n    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};\n    includes[state.name] = true;\n    return includes;\n}\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n *\n * resolve: input value can be:\n *\n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return "myFooData"; },\n *\n *   // function.toString() parsed, "DependencyName" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n *\n *   // Array split; "DependencyName" dep as string\n *   myBazResolve: [ "DependencyName", function(dep) { return dep.fetchSomethingAsPromise() },\n *\n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n *\n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = ["DependencyName"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then "DependencyName" dep as string\n *   myCorgeResolve: corgeResolve,\n *\n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: "SomeService"\n * }\n *\n * or:\n *\n * [\n *   new Resolvable("myFooResolve", function() { return "myFooData" }),\n *   new Resolvable("myBarResolve", function(dep) { return dep.fetchSomethingAsPromise() }, [ "DependencyName" ]),\n *   { provide: "myBazResolve", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ "DependencyName" ] }\n * ]\n */\nfunction resolvablesBuilder(state) {\n    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\n    var objects2Tuples = function objects2Tuples(resolveObj, resolvePolicies) {\n        return Object.keys(resolveObj || {}).map(function (token) {\n            return { token: token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token] };\n        });\n    };\n    /** fetch DI annotations from a function or ng1-style array */\n    var annotate = function annotate(fn) {\n        var $injector = coreservices_1.services.$injector;\n        // ng1 doesn\'t have an $injector until runtime.\n        // If the $injector doesn\'t exist, use "deferred" literal as a\n        // marker indicating they should be annotated when runtime starts\n        return fn[\'$inject\'] || $injector && $injector.annotate(fn, $injector.strictDi) || "deferred";\n    };\n    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n    var isResolveLiteral = function isResolveLiteral(obj) {\n        return !!(obj.token && obj.resolveFn);\n    };\n    /** true if the object looks like a provide literal, or a ng2 Provider */\n    var isLikeNg2Provider = function isLikeNg2Provider(obj) {\n        return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));\n    };\n    /** true if the object looks like a tuple from obj2Tuples */\n    var isTupleFromObj = function isTupleFromObj(obj) {\n        return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val)));\n    };\n    /** extracts the token from a Provider or provide literal */\n    var token = function token(p) {\n        return p.provide || p.token;\n    };\n    /** Given a literal resolve or provider object, returns a Resolvable */\n    var literal2Resolvable = hof_1.pattern([[hof_1.prop(\'resolveFn\'), function (p) {\n        return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy);\n    }], [hof_1.prop(\'useFactory\'), function (p) {\n        return new resolvable_1.Resolvable(token(p), p.useFactory, p.deps || p.dependencies, p.policy);\n    }], [hof_1.prop(\'useClass\'), function (p) {\n        return new resolvable_1.Resolvable(token(p), function () {\n            return new p.useClass();\n        }, [], p.policy);\n    }], [hof_1.prop(\'useValue\'), function (p) {\n        return new resolvable_1.Resolvable(token(p), function () {\n            return p.useValue;\n        }, [], p.policy, p.useValue);\n    }], [hof_1.prop(\'useExisting\'), function (p) {\n        return new resolvable_1.Resolvable(token(p), common_1.identity, [p.useExisting], p.policy);\n    }]]);\n    var tuple2Resolvable = hof_1.pattern([[hof_1.pipe(hof_1.prop("val"), predicates_1.isString), function (tuple) {\n        return new resolvable_1.Resolvable(tuple.token, common_1.identity, [tuple.val], tuple.policy);\n    }], [hof_1.pipe(hof_1.prop("val"), predicates_1.isArray), function (tuple) {\n        return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy);\n    }], [hof_1.pipe(hof_1.prop("val"), predicates_1.isFunction), function (tuple) {\n        return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy);\n    }]]);\n    var item2Resolvable = hof_1.pattern([[hof_1.is(resolvable_1.Resolvable), function (r) {\n        return r;\n    }], [isResolveLiteral, literal2Resolvable], [isLikeNg2Provider, literal2Resolvable], [isTupleFromObj, tuple2Resolvable], [hof_1.val(true), function (obj) {\n        throw new Error("Invalid resolve value: " + strings_1.stringify(obj));\n    }]]);\n    // If resolveBlock is already an array, use it as-is.\n    // Otherwise, assume it\'s an object and convert to an Array of tuples\n    var decl = state.resolve;\n    var items = predicates_1.isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\n    return items.map(item2Resolvable);\n}\nexports.resolvablesBuilder = resolvablesBuilder;\n/**\n * @internalapi A internal global service\n *\n * StateBuilder is a factory for the internal [[StateObject]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[StateObject]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[StateObject]] object by registering a decorator function\n * using the [[builder]] method.\n */\nvar StateBuilder = function () {\n    function StateBuilder(matcher, urlMatcherFactory) {\n        this.matcher = matcher;\n        var self = this;\n        var root = function root() {\n            return matcher.find("");\n        };\n        var isRoot = function isRoot(state) {\n            return state.name === "";\n        };\n        function parentBuilder(state) {\n            if (isRoot(state)) return null;\n            return matcher.find(self.parentName(state)) || root();\n        }\n        this.builders = {\n            name: [nameBuilder],\n            self: [selfBuilder],\n            parent: [parentBuilder],\n            data: [dataBuilder],\n            // Build a URLMatcher if necessary, either via a relative or absolute URL\n            url: [getUrlBuilder(urlMatcherFactory, root)],\n            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n            navigable: [getNavigableBuilder(isRoot)],\n            params: [getParamsBuilder(urlMatcherFactory.paramFactory)],\n            // Each framework-specific ui-router implementation should define its own `views` builder\n            // e.g., src/ng1/statebuilders/views.ts\n            views: [],\n            // Keep a full path from the root down to this state as this is needed for state activation.\n            path: [pathBuilder],\n            // Speed up $state.includes() as it\'s used a lot\n            includes: [includesBuilder],\n            resolvables: [resolvablesBuilder]\n        };\n    }\n    /**\n     * Registers a [[BuilderFunction]] for a specific [[StateObject]] property (e.g., `parent`, `url`, or `path`).\n     * More than one BuilderFunction can be registered for a given property.\n     *\n     * The BuilderFunction(s) will be used to define the property on any subsequently built [[StateObject]] objects.\n     *\n     * @param name The name of the State property being registered for.\n     * @param fn The BuilderFunction which will be used to build the State property\n     * @returns a function which deregisters the BuilderFunction\n     */\n    StateBuilder.prototype.builder = function (name, fn) {\n        var builders = this.builders;\n        var array = builders[name] || [];\n        // Backwards compat: if only one builder exists, return it, else return whole arary.\n        if (predicates_1.isString(name) && !predicates_1.isDefined(fn)) return array.length > 1 ? array : array[0];\n        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn)) return;\n        builders[name] = array;\n        builders[name].push(fn);\n        return function () {\n            return builders[name].splice(builders[name].indexOf(fn, 1)) && null;\n        };\n    };\n    /**\n     * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n     * properties and API built.\n     *\n     * @param state an uninitialized State object\n     * @returns the built State object\n     */\n    StateBuilder.prototype.build = function (state) {\n        var _a = this,\n            matcher = _a.matcher,\n            builders = _a.builders;\n        var parent = this.parentName(state);\n        if (parent && !matcher.find(parent, undefined, false)) {\n            return null;\n        }\n        for (var key in builders) {\n            if (!builders.hasOwnProperty(key)) continue;\n            var chain = builders[key].reduce(function (parentFn, step) {\n                return function (_state) {\n                    return step(_state, parentFn);\n                };\n            }, common_1.noop);\n            state[key] = chain(state);\n        }\n        return state;\n    };\n    StateBuilder.prototype.parentName = function (state) {\n        var name = state.name || "";\n        var segments = name.split(\'.\');\n        if (segments.length > 1) {\n            if (state.parent) {\n                throw new Error("States that specify the \'parent:\' property should not have a \'.\' in their name (" + name + ")");\n            }\n            var lastSegment = segments.pop();\n            if (lastSegment === \'**\') segments.pop();\n            return segments.join(".");\n        }\n        if (!state.parent) return "";\n        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n    };\n    StateBuilder.prototype.name = function (state) {\n        var name = state.name;\n        if (name.indexOf(\'.\') !== -1 || !state.parent) return name;\n        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n        return parentName ? parentName + "." + name : name;\n    };\n    return StateBuilder;\n}();\nexports.StateBuilder = StateBuilder;\n//# sourceMappingURL=stateBuilder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @module state */ /** for typedoc */\nvar predicates_1 = __webpack_require__(1);\nvar common_1 = __webpack_require__(0);\nvar StateMatcher = function () {\n    function StateMatcher(_states) {\n        this._states = _states;\n    }\n    StateMatcher.prototype.isRelative = function (stateName) {\n        stateName = stateName || "";\n        return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;\n    };\n    StateMatcher.prototype.find = function (stateOrName, base, matchGlob) {\n        if (matchGlob === void 0) {\n            matchGlob = true;\n        }\n        if (!stateOrName && stateOrName !== "") return undefined;\n        var isStr = predicates_1.isString(stateOrName);\n        var name = isStr ? stateOrName : stateOrName.name;\n        if (this.isRelative(name)) name = this.resolvePath(name, base);\n        var state = this._states[name];\n        if (state && (isStr || !isStr && (state === stateOrName || state.self === stateOrName))) {\n            return state;\n        } else if (isStr && matchGlob) {\n            var _states = common_1.values(this._states);\n            var matches = _states.filter(function (state) {\n                return state.__stateObjectCache.nameGlob && state.__stateObjectCache.nameGlob.matches(name);\n            });\n            if (matches.length > 1) {\n                console.log("stateMatcher.find: Found multiple matches for " + name + " using glob: ", matches.map(function (match) {\n                    return match.name;\n                }));\n            }\n            return matches[0];\n        }\n        return undefined;\n    };\n    StateMatcher.prototype.resolvePath = function (name, base) {\n        if (!base) throw new Error("No reference point given for path \'" + name + "\'");\n        var baseState = this.find(base);\n        var splitName = name.split("."),\n            i = 0,\n            pathLength = splitName.length,\n            current = baseState;\n        for (; i < pathLength; i++) {\n            if (splitName[i] === "" && i === 0) {\n                current = baseState;\n                continue;\n            }\n            if (splitName[i] === "^") {\n                if (!current.parent) throw new Error("Path \'" + name + "\' not valid for state \'" + baseState.name + "\'");\n                current = current.parent;\n                continue;\n            }\n            break;\n        }\n        var relName = splitName.slice(i).join(".");\n        return current.name + (current.name && relName ? "." : "") + relName;\n    };\n    return StateMatcher;\n}();\nexports.StateMatcher = StateMatcher;\n//# sourceMappingURL=stateMatcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3N0YXRlL3N0YXRlTWF0Y2hlci5qcz85MDBjIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicHJlZGljYXRlc18xIiwicmVxdWlyZSIsImNvbW1vbl8xIiwiU3RhdGVNYXRjaGVyIiwiX3N0YXRlcyIsInByb3RvdHlwZSIsImlzUmVsYXRpdmUiLCJzdGF0ZU5hbWUiLCJpbmRleE9mIiwiZmluZCIsInN0YXRlT3JOYW1lIiwiYmFzZSIsIm1hdGNoR2xvYiIsInVuZGVmaW5lZCIsImlzU3RyIiwiaXNTdHJpbmciLCJuYW1lIiwicmVzb2x2ZVBhdGgiLCJzdGF0ZSIsInNlbGYiLCJ2YWx1ZXMiLCJtYXRjaGVzIiwiZmlsdGVyIiwiX19zdGF0ZU9iamVjdENhY2hlIiwibmFtZUdsb2IiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwibWFwIiwibWF0Y2giLCJFcnJvciIsImJhc2VTdGF0ZSIsInNwbGl0TmFtZSIsInNwbGl0IiwiaSIsInBhdGhMZW5ndGgiLCJjdXJyZW50IiwicGFyZW50IiwicmVsTmFtZSIsInNsaWNlIiwiam9pbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBLG9CLENBQXFCO0FBQ3JCLElBQUlDLGVBQWUsbUJBQUFDLENBQVEsQ0FBUixDQUFuQjtBQUNBLElBQUlDLFdBQVcsbUJBQUFELENBQVEsQ0FBUixDQUFmO0FBQ0EsSUFBSUUsZUFBZ0IsWUFBWTtBQUM1QixhQUFTQSxZQUFULENBQXNCQyxPQUF0QixFQUErQjtBQUMzQixhQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDSDtBQUNERCxpQkFBYUUsU0FBYixDQUF1QkMsVUFBdkIsR0FBb0MsVUFBVUMsU0FBVixFQUFxQjtBQUNyREEs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SDtBQUNELFlBQUlDLFVBQVVOLFVBQVVPLEtBQVYsQ0FBZ0JMLENBQWhCLEVBQW1CTSxJQUFuQixDQUF3QixHQUF4QixDQUFkO0FBQ0EsZUFBT0osUUFBUXBCLElBQVIsSUFBZ0JvQixRQUFRcEIsSUFBUixJQUFnQnNCLE9BQWhCLEdBQTBCLEdBQTFCLEdBQWdDLEVBQWhELElBQXNEQSxPQUE3RDtBQUNILEtBcEJEO0FBcUJBLFdBQU9uQyxZQUFQO0FBQ0gsQ0F2RG1CLEVBQXBCO0FBd0RBTCxRQUFRSyxZQUFSLEdBQXVCQSxZQUF2QjtBQUNBIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiogQG1vZHVsZSBzdGF0ZSAqLyAvKiogZm9yIHR5cGVkb2MgKi9cbnZhciBwcmVkaWNhdGVzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL3ByZWRpY2F0ZXNcIik7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2NvbW1vblwiKTtcbnZhciBTdGF0ZU1hdGNoZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0YXRlTWF0Y2hlcihfc3RhdGVzKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlcyA9IF9zdGF0ZXM7XG4gICAgfVxuICAgIFN0YXRlTWF0Y2hlci5wcm90b3R5cGUuaXNSZWxhdGl2ZSA9IGZ1bmN0aW9uIChzdGF0ZU5hbWUpIHtcbiAgICAgICAgc3RhdGVOYW1lID0gc3RhdGVOYW1lIHx8IFwiXCI7XG4gICAgICAgIHJldHVybiBzdGF0ZU5hbWUuaW5kZXhPZihcIi5cIikgPT09IDAgfHwgc3RhdGVOYW1lLmluZGV4T2YoXCJeXCIpID09PSAwO1xuICAgIH07XG4gICAgU3RhdGVNYXRjaGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKHN0YXRlT3JOYW1lLCBiYXNlLCBtYXRjaEdsb2IpIHtcbiAgICAgICAgaWYgKG1hdGNoR2xvYiA9PT0gdm9pZCAwKSB7IG1hdGNoR2xvYiA9IHRydWU7IH1cbiAgICAgICAgaWYgKCFzdGF0ZU9yTmFtZSAmJiBzdGF0ZU9yTmFtZSAhPT0gXCJcIilcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBpc1N0ciA9IHByZWRpY2F0ZXNfMS5pc1N0cmluZyhzdGF0ZU9yTmFtZSk7XG4gICAgICAgIHZhciBuYW1lID0gaXNTdHIgPyBzdGF0ZU9yTmFtZSA6IHN0YXRlT3JOYW1lLm5hbWU7XG4gICAgICAgIGlmICh0aGlzLmlzUmVsYXRpdmUobmFtZSkpXG4gICAgICAgICAgICBuYW1lID0gdGhpcy5yZXNvbHZlUGF0aChuYW1lLCBiYXNlKTtcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGVzW25hbWVdO1xuICAgICAgICBpZiAoc3RhdGUgJiYgKGlzU3RyIHx8ICghaXNTdHIgJiYgKHN0YXRlID09PSBzdGF0ZU9yTmFtZSB8fCBzdGF0ZS5zZWxmID09PSBzdGF0ZU9yTmFtZSkpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU3RyICYmIG1hdGNoR2xvYikge1xuICAgICAgICAgICAgdmFyIF9zdGF0ZXMgPSBjb21tb25fMS52YWx1ZXModGhpcy5fc3RhdGVzKTtcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gX3N0YXRlcy5maWx0ZXIoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlLl9fc3RhdGVPYmplY3RDYWNoZS5uYW1lR2xvYiAmJlxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fX3N0YXRlT2JqZWN0Q2FjaGUubmFtZUdsb2IubWF0Y2hlcyhuYW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RhdGVNYXRjaGVyLmZpbmQ6IEZvdW5kIG11bHRpcGxlIG1hdGNoZXMgZm9yIFwiICsgbmFtZSArIFwiIHVzaW5nIGdsb2I6IFwiLCBtYXRjaGVzLm1hcChmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLm5hbWU7IH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBTdGF0ZU1hdGNoZXIucHJvdG90eXBlLnJlc29sdmVQYXRoID0gZnVuY3Rpb24gKG5hbWUsIGJhc2UpIHtcbiAgICAgICAgaWYgKCFiYXNlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gcmVmZXJlbmNlIHBvaW50IGdpdmVuIGZvciBwYXRoICdcIiArIG5hbWUgKyBcIidcIik7XG4gICAgICAgIHZhciBiYXNlU3RhdGUgPSB0aGlzLmZpbmQoYmFzZSk7XG4gICAgICAgIHZhciBzcGxpdE5hbWUgPSBuYW1lLnNwbGl0KFwiLlwiKSwgaSA9IDAsIHBhdGhMZW5ndGggPSBzcGxpdE5hbWUubGVuZ3RoLCBjdXJyZW50ID0gYmFzZVN0YXRlO1xuICAgICAgICBmb3IgKDsgaSA8IHBhdGhMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNwbGl0TmFtZVtpXSA9PT0gXCJcIiAmJiBpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGJhc2VTdGF0ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzcGxpdE5hbWVbaV0gPT09IFwiXlwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50LnBhcmVudClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGF0aCAnXCIgKyBuYW1lICsgXCInIG5vdCB2YWxpZCBmb3Igc3RhdGUgJ1wiICsgYmFzZVN0YXRlLm5hbWUgKyBcIidcIik7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlbE5hbWUgPSBzcGxpdE5hbWUuc2xpY2UoaSkuam9pbihcIi5cIik7XG4gICAgICAgIHJldHVybiBjdXJyZW50Lm5hbWUgKyAoY3VycmVudC5uYW1lICYmIHJlbE5hbWUgPyBcIi5cIiA6IFwiXCIpICsgcmVsTmFtZTtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0ZU1hdGNoZXI7XG59KCkpO1xuZXhwb3J0cy5TdGF0ZU1hdGNoZXIgPSBTdGF0ZU1hdGNoZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0ZU1hdGNoZXIuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi9zdGF0ZS9zdGF0ZU1hdGNoZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @module state */ /** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\nvar stateObject_1 = __webpack_require__(22);\nvar hof_1 = __webpack_require__(2);\n/** @internalapi */\nvar StateQueueManager = function () {\n    function StateQueueManager($registry, $urlRouter, states, builder, listeners) {\n        this.$registry = $registry;\n        this.$urlRouter = $urlRouter;\n        this.states = states;\n        this.builder = builder;\n        this.listeners = listeners;\n        this.queue = [];\n        this.matcher = $registry.matcher;\n    }\n    /** @internalapi */\n    StateQueueManager.prototype.dispose = function () {\n        this.queue = [];\n    };\n    StateQueueManager.prototype.register = function (stateDecl) {\n        var queue = this.queue;\n        var state = stateObject_1.StateObject.create(stateDecl);\n        var name = state.name;\n        if (!predicates_1.isString(name)) throw new Error("State must have a valid name");\n        if (this.states.hasOwnProperty(name) || common_1.inArray(queue.map(hof_1.prop(\'name\')), name)) throw new Error("State \'" + name + "\' is already defined");\n        queue.push(state);\n        this.flush();\n        return state;\n    };\n    StateQueueManager.prototype.flush = function () {\n        var _this = this;\n        var _a = this,\n            queue = _a.queue,\n            states = _a.states,\n            builder = _a.builder;\n        var registered = [],\n            // states that got registered\n        orphans = [],\n            // states that don\'t yet have a parent registered\n        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n        var getState = function getState(name) {\n            return _this.states.hasOwnProperty(name) && _this.states[name];\n        };\n        while (queue.length > 0) {\n            var state = queue.shift();\n            var name_1 = state.name;\n            var result = builder.build(state);\n            var orphanIdx = orphans.indexOf(state);\n            if (result) {\n                var existingState = getState(name_1);\n                if (existingState && existingState.name === name_1) {\n                    throw new Error("State \'" + name_1 + "\' is already defined");\n                }\n                var existingFutureState = getState(name_1 + ".**");\n                if (existingFutureState) {\n                    // Remove future state of the same name\n                    this.$registry.deregister(existingFutureState);\n                }\n                states[name_1] = state;\n                this.attachRoute(state);\n                if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);\n                registered.push(state);\n                continue;\n            }\n            var prev = previousQueueLength[name_1];\n            previousQueueLength[name_1] = queue.length;\n            if (orphanIdx >= 0 && prev === queue.length) {\n                // Wait until two consecutive iterations where no additional states were dequeued successfully.\n                // throw new Error(`Cannot register orphaned state \'${name}\'`);\n                queue.push(state);\n                return states;\n            } else if (orphanIdx < 0) {\n                orphans.push(state);\n            }\n            queue.push(state);\n        }\n        if (registered.length) {\n            this.listeners.forEach(function (listener) {\n                return listener("registered", registered.map(function (s) {\n                    return s.self;\n                }));\n            });\n        }\n        return states;\n    };\n    StateQueueManager.prototype.attachRoute = function (state) {\n        if (state.abstract || !state.url) return;\n        this.$urlRouter.rule(this.$urlRouter.urlRuleFactory.create(state));\n    };\n    return StateQueueManager;\n}();\nexports.StateQueueManager = StateQueueManager;\n//# sourceMappingURL=stateQueueManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n')},function(module,exports,__webpack_require__){"use strict";eval("\n/**\n * @coreapi\n * @module state\n */ /** for typedoc */\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar stateMatcher_1 = __webpack_require__(35);\nvar stateBuilder_1 = __webpack_require__(34);\nvar stateQueueManager_1 = __webpack_require__(36);\nvar common_1 = __webpack_require__(0);\nvar hof_1 = __webpack_require__(2);\nvar StateRegistry = function () {\n    /** @internalapi */\n    function StateRegistry(_router) {\n        this._router = _router;\n        this.states = {};\n        this.listeners = [];\n        this.matcher = new stateMatcher_1.StateMatcher(this.states);\n        this.builder = new stateBuilder_1.StateBuilder(this.matcher, _router.urlMatcherFactory);\n        this.stateQueue = new stateQueueManager_1.StateQueueManager(this, _router.urlRouter, this.states, this.builder, this.listeners);\n        this._registerRoot();\n    }\n    /** @internalapi */\n    StateRegistry.prototype._registerRoot = function () {\n        var rootStateDef = {\n            name: '',\n            url: '^',\n            views: null,\n            params: {\n                '#': { value: null, type: 'hash', dynamic: true }\n            },\n            abstract: true\n        };\n        var _root = this._root = this.stateQueue.register(rootStateDef);\n        _root.navigable = null;\n    };\n    /** @internalapi */\n    StateRegistry.prototype.dispose = function () {\n        var _this = this;\n        this.stateQueue.dispose();\n        this.listeners = [];\n        this.get().forEach(function (state) {\n            return _this.get(state) && _this.deregister(state);\n        });\n    };\n    /**\n     * Listen for a State Registry events\n     *\n     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n     *\n     * #### Example:\n     * ```js\n     * let allStates = registry.get();\n     *\n     * // Later, invoke deregisterFn() to remove the listener\n     * let deregisterFn = registry.onStatesChanged((event, states) => {\n     *   switch(event) {\n     *     case: 'registered':\n     *       states.forEach(state => allStates.push(state));\n     *       break;\n     *     case: 'deregistered':\n     *       states.forEach(state => {\n     *         let idx = allStates.indexOf(state);\n     *         if (idx !== -1) allStates.splice(idx, 1);\n     *       });\n     *       break;\n     *   }\n     * });\n     * ```\n     *\n     * @param listener a callback function invoked when the registered states changes.\n     *        The function receives two parameters, `event` and `state`.\n     *        See [[StateRegistryListener]]\n     * @return a function that deregisters the listener\n     */\n    StateRegistry.prototype.onStatesChanged = function (listener) {\n        this.listeners.push(listener);\n        return function deregisterListener() {\n            common_1.removeFrom(this.listeners)(listener);\n        }.bind(this);\n    };\n    /**\n     * Gets the implicit root state\n     *\n     * Gets the root of the state tree.\n     * The root state is implicitly created by UI-Router.\n     * Note: this returns the internal [[StateObject]] representation, not a [[StateDeclaration]]\n     *\n     * @return the root [[StateObject]]\n     */\n    StateRegistry.prototype.root = function () {\n        return this._root;\n    };\n    /**\n     * Adds a state to the registry\n     *\n     * Registers a [[StateDeclaration]] or queues it for registration.\n     *\n     * Note: a state will be queued if the state's parent isn't yet registered.\n     *\n     * @param stateDefinition the definition of the state to register.\n     * @returns the internal [[StateObject]] object.\n     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n     *          If the state was only queued, then the object is not fully built.\n     */\n    StateRegistry.prototype.register = function (stateDefinition) {\n        return this.stateQueue.register(stateDefinition);\n    };\n    /** @hidden */\n    StateRegistry.prototype._deregisterTree = function (state) {\n        var _this = this;\n        var all = this.get().map(function (s) {\n            return s.$$state();\n        });\n        var getChildren = function getChildren(states) {\n            var children = all.filter(function (s) {\n                return states.indexOf(s.parent) !== -1;\n            });\n            return children.length === 0 ? children : children.concat(getChildren(children));\n        };\n        var children = getChildren([state]);\n        var deregistered = [state].concat(children).reverse();\n        deregistered.forEach(function (state) {\n            var $ur = _this._router.urlRouter;\n            // Remove URL rule\n            $ur.rules().filter(hof_1.propEq(\"state\", state)).forEach($ur.removeRule.bind($ur));\n            // Remove state from registry\n            delete _this.states[state.name];\n        });\n        return deregistered;\n    };\n    /**\n     * Removes a state from the registry\n     *\n     * This removes a state from the registry.\n     * If the state has children, they are are also removed from the registry.\n     *\n     * @param stateOrName the state's name or object representation\n     * @returns {StateObject[]} a list of removed states\n     */\n    StateRegistry.prototype.deregister = function (stateOrName) {\n        var _state = this.get(stateOrName);\n        if (!_state) throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n        var deregisteredStates = this._deregisterTree(_state.$$state());\n        this.listeners.forEach(function (listener) {\n            return listener(\"deregistered\", deregisteredStates.map(function (s) {\n                return s.self;\n            }));\n        });\n        return deregisteredStates;\n    };\n    StateRegistry.prototype.get = function (stateOrName, base) {\n        var _this = this;\n        if (arguments.length === 0) return Object.keys(this.states).map(function (name) {\n            return _this.states[name].self;\n        });\n        var found = this.matcher.find(stateOrName, base);\n        return found && found.self || null;\n    };\n    StateRegistry.prototype.decorator = function (name, func) {\n        return this.builder.builder(name, func);\n    };\n    return StateRegistry;\n}();\nexports.StateRegistry = StateRegistry;\n//# sourceMappingURL=stateRegistry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module state\n */\n/** */\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\nvar queue_1 = __webpack_require__(23);\nvar coreservices_1 = __webpack_require__(3);\nvar pathFactory_1 = __webpack_require__(18);\nvar pathNode_1 = __webpack_require__(25);\nvar transitionService_1 = __webpack_require__(27);\nvar rejectFactory_1 = __webpack_require__(11);\nvar targetState_1 = __webpack_require__(7);\nvar param_1 = __webpack_require__(9);\nvar glob_1 = __webpack_require__(16);\nvar resolveContext_1 = __webpack_require__(19);\nvar lazyLoad_1 = __webpack_require__(46);\nvar hof_1 = __webpack_require__(2);\n/**\n * Provides state related service functions\n *\n * This class provides services related to ui-router states.\n * An instance of this class is located on the global [[UIRouter]] object.\n */\nvar StateService = function () {\n    /** @internalapi */\n    function StateService(router) {\n        this.router = router;\n        /** @internalapi */\n        this.invalidCallbacks = [];\n        /** @hidden */\n        this._defaultErrorHandler = function $defaultErrorHandler($error$) {\n            if ($error$ instanceof Error && $error$.stack) {\n                console.error($error$);\n                console.error($error$.stack);\n            } else if ($error$ instanceof rejectFactory_1.Rejection) {\n                console.error($error$.toString());\n                if ($error$.detail && $error$.detail.stack) console.error($error$.detail.stack);\n            } else {\n                console.error($error$);\n            }\n        };\n        var getters = ['current', '$current', 'params', 'transition'];\n        var boundFns = Object.keys(StateService.prototype).filter(hof_1.not(common_1.inArray(getters)));\n        common_1.createProxyFunctions(hof_1.val(StateService.prototype), this, hof_1.val(this), boundFns);\n    }\n    Object.defineProperty(StateService.prototype, \"transition\", {\n        /**\n         * The [[Transition]] currently in progress (or null)\n         *\n         * This is a passthrough through to [[UIRouterGlobals.transition]]\n         */\n        get: function get() {\n            return this.router.globals.transition;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"params\", {\n        /**\n         * The latest successful state parameters\n         *\n         * This is a passthrough through to [[UIRouterGlobals.params]]\n         */\n        get: function get() {\n            return this.router.globals.params;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"current\", {\n        /**\n         * The current [[StateDeclaration]]\n         *\n         * This is a passthrough through to [[UIRouterGlobals.current]]\n         */\n        get: function get() {\n            return this.router.globals.current;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"$current\", {\n        /**\n         * The current [[StateObject]]\n         *\n         * This is a passthrough through to [[UIRouterGlobals.$current]]\n         */\n        get: function get() {\n            return this.router.globals.$current;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internalapi */\n    StateService.prototype.dispose = function () {\n        this.defaultErrorHandler(common_1.noop);\n        this.invalidCallbacks = [];\n    };\n    /**\n     * Handler for when [[transitionTo]] is called with an invalid state.\n     *\n     * Invokes the [[onInvalid]] callbacks, in natural order.\n     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n     *\n     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n     *\n     * @internalapi\n     */\n    StateService.prototype._handleInvalidTargetState = function (fromPath, toState) {\n        var _this = this;\n        var fromState = pathFactory_1.PathUtils.makeTargetState(fromPath);\n        var globals = this.router.globals;\n        var latestThing = function latestThing() {\n            return globals.transitionHistory.peekTail();\n        };\n        var latest = latestThing();\n        var callbackQueue = new queue_1.Queue(this.invalidCallbacks.slice());\n        var injector = new resolveContext_1.ResolveContext(fromPath).injector();\n        var checkForRedirect = function checkForRedirect(result) {\n            if (!(result instanceof targetState_1.TargetState)) {\n                return;\n            }\n            var target = result;\n            // Recreate the TargetState, in case the state is now defined.\n            target = _this.target(target.identifier(), target.params(), target.options());\n            if (!target.valid()) {\n                return rejectFactory_1.Rejection.invalid(target.error()).toPromise();\n            }\n            if (latestThing() !== latest) {\n                return rejectFactory_1.Rejection.superseded().toPromise();\n            }\n            return _this.transitionTo(target.identifier(), target.params(), target.options());\n        };\n        function invokeNextCallback() {\n            var nextCallback = callbackQueue.dequeue();\n            if (nextCallback === undefined) return rejectFactory_1.Rejection.invalid(toState.error()).toPromise();\n            var callbackResult = coreservices_1.services.$q.when(nextCallback(toState, fromState, injector));\n            return callbackResult.then(checkForRedirect).then(function (result) {\n                return result || invokeNextCallback();\n            });\n        }\n        return invokeNextCallback();\n    };\n    /**\n     * Registers an Invalid State handler\n     *\n     * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\n     * has been called with an invalid state reference parameter\n     *\n     * Example:\n     * ```js\n     * stateService.onInvalid(function(to, from, injector) {\n     *   if (to.name() === 'foo') {\n     *     let lazyLoader = injector.get('LazyLoadService');\n     *     return lazyLoader.load('foo')\n     *         .then(() => stateService.target('foo'));\n     *   }\n     * });\n     * ```\n     *\n     * @param {function} callback invoked when the toState is invalid\n     *   This function receives the (invalid) toState, the fromState, and an injector.\n     *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\n     *   If one is returned, it is treated as a redirect.\n     *\n     * @returns a function which deregisters the callback\n     */\n    StateService.prototype.onInvalid = function (callback) {\n        this.invalidCallbacks.push(callback);\n        return function deregisterListener() {\n            common_1.removeFrom(this.invalidCallbacks)(callback);\n        }.bind(this);\n    };\n    /**\n     * Reloads the current state\n     *\n     * A method that force reloads the current state, or a partial state hierarchy.\n     * All resolves are re-resolved, and components reinstantiated.\n     *\n     * #### Example:\n     * ```js\n     * let app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     $state.reload();\n     *   }\n     * });\n     * ```\n     *\n     * Note: `reload()` is just an alias for:\n     *\n     * ```js\n     * $state.transitionTo($state.current, $state.params, {\n     *   reload: true, inherit: false\n     * });\n     * ```\n     *\n     * @param reloadState A state name or a state object.\n     *    If present, this state and all its children will be reloaded, but ancestors will not reload.\n     *\n     * #### Example:\n     * ```js\n     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n     * //and current state is 'contacts.detail.item'\n     * let app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n     *     $state.reload('contact.detail');\n     *   }\n     * });\n     * ```\n     *\n     * @returns A promise representing the state of the new transition. See [[StateService.go]]\n     */\n    StateService.prototype.reload = function (reloadState) {\n        return this.transitionTo(this.current, this.params, {\n            reload: predicates_1.isDefined(reloadState) ? reloadState : true,\n            inherit: false,\n            notify: false\n        });\n    };\n    ;\n    /**\n     * Transition to a different state and/or parameters\n     *\n     * Convenience method for transitioning to a new state.\n     *\n     * `$state.go` calls `$state.transitionTo` internally but automatically sets options to\n     * `{ location: true, inherit: true, relative: router.globals.$current, notify: true }`.\n     * This allows you to use either an absolute or relative `to` argument (because of `relative: router.globals.$current`).\n     * It also allows you to specify * only the parameters you'd like to update, while letting unspecified parameters\n     * inherit from the current parameter values (because of `inherit: true`).\n     *\n     * #### Example:\n     * ```js\n     * let app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.go('contact.detail');\n     *   };\n     * });\n     * ```\n     *\n     * @param to Absolute state name, state object, or relative state path (relative to current state).\n     *\n     * Some examples:\n     *\n     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n     * - `$state.go('^')` - will go to the parent state\n     * - `$state.go('^.sibling')` - if current state is `home.child`, will go to the `home.sibling` state\n     * - `$state.go('.child.grandchild')` - if current state is home, will go to the `home.child.grandchild` state\n     *\n     * @param params A map of the parameters that will be sent to the state, will populate $stateParams.\n     *\n     *    Any parameters that are not specified will be inherited from current parameter values (because of `inherit: true`).\n     *    This allows, for example, going to a sibling state that shares parameters defined by a parent state.\n     *\n     * @param options Transition options\n     *\n     * @returns {promise} A promise representing the state of the new transition.\n     */\n    StateService.prototype.go = function (to, params, options) {\n        var defautGoOpts = { relative: this.$current, inherit: true };\n        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);\n        return this.transitionTo(to, params, transOpts);\n    };\n    ;\n    /**\n     * Creates a [[TargetState]]\n     *\n     * This is a factory method for creating a TargetState\n     *\n     * This may be returned from a Transition Hook to redirect a transition, for example.\n     */\n    StateService.prototype.target = function (identifier, params, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        // If we're reloading, find the state object to reload from\n        if (predicates_1.isObject(options.reload) && !options.reload.name) throw new Error('Invalid reload state object');\n        var reg = this.router.stateRegistry;\n        options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);\n        if (options.reload && !options.reloadState) throw new Error(\"No such reload state '\" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n        var stateDefinition = reg.matcher.find(identifier, options.relative);\n        return new targetState_1.TargetState(identifier, stateDefinition, params, options);\n    };\n    ;\n    StateService.prototype.getCurrentPath = function () {\n        var _this = this;\n        var globals = this.router.globals;\n        var latestSuccess = globals.successfulTransitions.peekTail();\n        var rootPath = function rootPath() {\n            return [new pathNode_1.PathNode(_this.router.stateRegistry.root())];\n        };\n        return latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n    };\n    /**\n     * Low-level method for transitioning to a new state.\n     *\n     * The [[go]] method (which uses `transitionTo` internally) is recommended in most situations.\n     *\n     * #### Example:\n     * ```js\n     * let app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.transitionTo('contact.detail');\n     *   };\n     * });\n     * ```\n     *\n     * @param to State name or state object.\n     * @param toParams A map of the parameters that will be sent to the state,\n     *      will populate $stateParams.\n     * @param options Transition options\n     *\n     * @returns A promise representing the state of the new transition. See [[go]]\n     */\n    StateService.prototype.transitionTo = function (to, toParams, options) {\n        var _this = this;\n        if (toParams === void 0) {\n            toParams = {};\n        }\n        if (options === void 0) {\n            options = {};\n        }\n        var router = this.router;\n        var globals = router.globals;\n        options = common_1.defaults(options, transitionService_1.defaultTransOpts);\n        var getCurrent = function getCurrent() {\n            return globals.transition;\n        };\n        options = common_1.extend(options, { current: getCurrent });\n        var ref = this.target(to, toParams, options);\n        var currentPath = this.getCurrentPath();\n        if (!ref.exists()) return this._handleInvalidTargetState(currentPath, ref);\n        if (!ref.valid()) return common_1.silentRejection(ref.error());\n        /**\n         * Special handling for Ignored, Aborted, and Redirected transitions\n         *\n         * The semantics for the transition.run() promise and the StateService.transitionTo()\n         * promise differ. For instance, the run() promise may be rejected because it was\n         * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n         * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n         */\n        var rejectedTransitionHandler = function rejectedTransitionHandler(transition) {\n            return function (error) {\n                if (error instanceof rejectFactory_1.Rejection) {\n                    var isLatest = router.globals.lastStartedTransitionId === transition.$id;\n                    if (error.type === rejectFactory_1.RejectType.IGNORED) {\n                        isLatest && router.urlRouter.update();\n                        // Consider ignored `Transition.run()` as a successful `transitionTo`\n                        return coreservices_1.services.$q.when(globals.current);\n                    }\n                    var detail = error.detail;\n                    if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && detail instanceof targetState_1.TargetState) {\n                        // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n                        // by returning the promise for the new (redirect) `Transition.run()`.\n                        var redirect = transition.redirect(detail);\n                        return redirect.run().catch(rejectedTransitionHandler(redirect));\n                    }\n                    if (error.type === rejectFactory_1.RejectType.ABORTED) {\n                        isLatest && router.urlRouter.update();\n                        return coreservices_1.services.$q.reject(error);\n                    }\n                }\n                var errorHandler = _this.defaultErrorHandler();\n                errorHandler(error);\n                return coreservices_1.services.$q.reject(error);\n            };\n        };\n        var transition = this.router.transitionService.create(currentPath, ref);\n        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n        common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676\n        // Return a promise for the transition, which also has the transition object on it.\n        return common_1.extend(transitionToPromise, { transition: transition });\n    };\n    ;\n    /**\n     * Checks if the current state *is* the provided state\n     *\n     * Similar to [[includes]] but only checks for the full state name.\n     * If params is supplied then it will be tested for strict equality against the current\n     * active params object, so all params must match with none missing and no extras.\n     *\n     * #### Example:\n     * ```js\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // absolute name\n     * $state.is('contact.details.item'); // returns true\n     * $state.is(contactDetailItemStateObject); // returns true\n     * ```\n     *\n     * // relative name (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * ```html\n     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n     * ```\n     *\n     * @param stateOrName The state name (absolute or relative) or state object you'd like to check.\n     * @param params A param object, e.g. `{sectionId: section.id}`, that you'd like\n     * to test against the current active state.\n     * @param options An options object. The options are:\n     *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     *     test relative to `options.relative` state (or name).\n     *\n     * @returns Returns true if it is the state.\n     */\n    StateService.prototype.is = function (stateOrName, params, options) {\n        options = common_1.defaults(options, { relative: this.$current });\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n        if (!predicates_1.isDefined(state)) return undefined;\n        if (this.$current !== state) return false;\n        if (!params) return true;\n        var schema = state.parameters({ inherit: true, matchingKeys: params });\n        return param_1.Param.equals(schema, param_1.Param.values(schema, params), this.params);\n    };\n    ;\n    /**\n     * Checks if the current state *includes* the provided state\n     *\n     * A method to determine if the current active state is equal to or is the child of the\n     * state stateName. If any params are passed then they will be tested for a match as well.\n     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n     *\n     * #### Example when `$state.$current.name === 'contacts.details.item'`\n     * ```js\n     * // Using partial names\n     * $state.includes(\"contacts\"); // returns true\n     * $state.includes(\"contacts.details\"); // returns true\n     * $state.includes(\"contacts.details.item\"); // returns true\n     * $state.includes(\"contacts.list\"); // returns false\n     * $state.includes(\"about\"); // returns false\n     * ```\n     *\n     * #### Glob Examples when `* $state.$current.name === 'contacts.details.item.url'`:\n     * ```js\n     * $state.includes(\"*.details.*.*\"); // returns true\n     * $state.includes(\"*.details.**\"); // returns true\n     * $state.includes(\"**.item.**\"); // returns true\n     * $state.includes(\"*.details.item.url\"); // returns true\n     * $state.includes(\"*.details.*.url\"); // returns true\n     * $state.includes(\"*.details.*\"); // returns false\n     * $state.includes(\"item.**\"); // returns false\n     * ```\n     *\n     * @param stateOrName A partial name, relative name, glob pattern,\n     *   or state object to be searched for within the current state name.\n     * @param params A param object, e.g. `{sectionId: section.id}`,\n     *   that you'd like to test against the current active state.\n     * @param options An options object. The options are:\n     *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     *     test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it does include the state\n     */\n    StateService.prototype.includes = function (stateOrName, params, options) {\n        options = common_1.defaults(options, { relative: this.$current });\n        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);\n        if (glob) {\n            if (!glob.matches(this.$current.name)) return false;\n            stateOrName = this.$current.name;\n        }\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative),\n            include = this.$current.includes;\n        if (!predicates_1.isDefined(state)) return undefined;\n        if (!predicates_1.isDefined(include[state.name])) return false;\n        if (!params) return true;\n        var schema = state.parameters({ inherit: true, matchingKeys: params });\n        return param_1.Param.equals(schema, param_1.Param.values(schema, params), this.params);\n    };\n    ;\n    /**\n     * Generates a URL for a state and parameters\n     *\n     * Returns the url for the given state populated with the given params.\n     *\n     * #### Example:\n     * ```js\n     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n     * ```\n     *\n     * @param stateOrName The state name or state object you'd like to generate a url from.\n     * @param params An object of parameter values to fill the state's required parameters.\n     * @param options Options object. The options are:\n     *\n     * @returns {string} compiled state url\n     */\n    StateService.prototype.href = function (stateOrName, params, options) {\n        var defaultHrefOpts = {\n            lossy: true,\n            inherit: true,\n            absolute: false,\n            relative: this.$current\n        };\n        options = common_1.defaults(options, defaultHrefOpts);\n        params = params || {};\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n        if (!predicates_1.isDefined(state)) return null;\n        if (options.inherit) params = this.params.$inherit(params, this.$current, state);\n        var nav = state && options.lossy ? state.navigable : state;\n        if (!nav || nav.url === undefined || nav.url === null) {\n            return null;\n        }\n        return this.router.urlRouter.href(nav.url, params, {\n            absolute: options.absolute\n        });\n    };\n    ;\n    /**\n     * Sets or gets the default [[transitionTo]] error handler.\n     *\n     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n     * This includes errors caused by resolves and transition hooks.\n     *\n     * Note:\n     * This handler does not receive certain Transition rejections.\n     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n     *\n     * The built-in default error handler logs the error to the console.\n     *\n     * You can provide your own custom handler.\n     *\n     * #### Example:\n     * ```js\n     * stateService.defaultErrorHandler(function() {\n     *   // Do not log transitionTo errors\n     * });\n     * ```\n     *\n     * @param handler a global error handler function\n     * @returns the current global error handler\n     */\n    StateService.prototype.defaultErrorHandler = function (handler) {\n        return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n    };\n    StateService.prototype.get = function (stateOrName, base) {\n        var reg = this.router.stateRegistry;\n        if (arguments.length === 0) return reg.get();\n        return reg.get(stateOrName, base || this.$current);\n    };\n    /**\n     * Lazy loads a state\n     *\n     * Explicitly runs a state's [[StateDeclaration.lazyLoad]] function.\n     *\n     * @param stateOrName the state that should be lazy loaded\n     * @param transition the optional Transition context to use (if the lazyLoad function requires an injector, etc)\n     * Note: If no transition is provided, a noop transition is created using the from the current state to the current state.\n     * This noop transition is not actually run.\n     *\n     * @returns a promise to lazy load\n     */\n    StateService.prototype.lazyLoad = function (stateOrName, transition) {\n        var state = this.get(stateOrName);\n        if (!state || !state.lazyLoad) throw new Error(\"Can not lazy load \" + stateOrName);\n        var currentPath = this.getCurrentPath();\n        var target = pathFactory_1.PathUtils.makeTargetState(currentPath);\n        transition = transition || this.router.transitionService.create(currentPath, target);\n        return lazyLoad_1.lazyLoadState(transition, state);\n    };\n    return StateService;\n}();\nexports.StateService = StateService;\n//# sourceMappingURL=stateService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @coreapi\n * @module core\n */ /** */\nvar urlMatcherFactory_1 = __webpack_require__(40);\nvar urlRouter_1 = __webpack_require__(41);\nvar transitionService_1 = __webpack_require__(27);\nvar view_1 = __webpack_require__(43);\nvar stateRegistry_1 = __webpack_require__(37);\nvar stateService_1 = __webpack_require__(38);\nvar globals_1 = __webpack_require__(44);\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\nvar urlService_1 = __webpack_require__(45);\nvar trace_1 = __webpack_require__(6);\n/** @hidden */\nvar _routerInstance = 0;\n/**\n * The master class used to instantiate an instance of UI-Router.\n *\n * UI-Router (for each specific framework) will create an instance of this class during bootstrap.\n * This class instantiates and wires the UI-Router services together.\n *\n * After a new instance of the UIRouter class is created, it should be configured for your app.\n * For instance, app states should be registered with the [[UIRouter.stateRegistry]].\n *\n * ---\n *\n * Normally the framework code will bootstrap UI-Router.\n * If you are bootstrapping UIRouter manually, tell it to monitor the URL by calling\n * [[UrlService.listen]] then [[UrlService.sync]].\n */\nvar UIRouter = function () {\n    /**\n     * Creates a new `UIRouter` object\n     *\n     * @param locationService a [[LocationServices]] implementation\n     * @param locationConfig a [[LocationConfig]] implementation\n     * @internalapi\n     */\n    function UIRouter(locationService, locationConfig) {\n        if (locationService === void 0) {\n            locationService = urlService_1.UrlService.locationServiceStub;\n        }\n        if (locationConfig === void 0) {\n            locationConfig = urlService_1.UrlService.locationConfigStub;\n        }\n        this.locationService = locationService;\n        this.locationConfig = locationConfig;\n        /** @hidden */this.$id = _routerInstance++;\n        /** @hidden */this._disposed = false;\n        /** @hidden */this._disposables = [];\n        /** Provides trace information to the console */\n        this.trace = trace_1.trace;\n        /** Provides services related to ui-view synchronization */\n        this.viewService = new view_1.ViewService();\n        /** Provides services related to Transitions */\n        this.transitionService = new transitionService_1.TransitionService(this);\n        /** Global router state */\n        this.globals = new globals_1.UIRouterGlobals();\n        /**\n         * Deprecated for public use. Use [[urlService]] instead.\n         * @deprecated Use [[urlService]] instead\n         */\n        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();\n        /**\n         * Deprecated for public use. Use [[urlService]] instead.\n         * @deprecated Use [[urlService]] instead\n         */\n        this.urlRouter = new urlRouter_1.UrlRouter(this);\n        /** Provides a registry for states, and related registration services */\n        this.stateRegistry = new stateRegistry_1.StateRegistry(this);\n        /** Provides services related to states */\n        this.stateService = new stateService_1.StateService(this);\n        /** Provides services related to the URL */\n        this.urlService = new urlService_1.UrlService(this);\n        /** @hidden */\n        this._plugins = {};\n        this.viewService._pluginapi._rootViewContext(this.stateRegistry.root());\n        this.globals.$current = this.stateRegistry.root();\n        this.globals.current = this.globals.$current.self;\n        this.disposable(this.globals);\n        this.disposable(this.stateService);\n        this.disposable(this.stateRegistry);\n        this.disposable(this.transitionService);\n        this.disposable(this.urlRouter);\n        this.disposable(locationService);\n        this.disposable(locationConfig);\n    }\n    /** Registers an object to be notified when the router is disposed */\n    UIRouter.prototype.disposable = function (disposable) {\n        this._disposables.push(disposable);\n    };\n    /**\n     * Disposes this router instance\n     *\n     * When called, clears resources retained by the router by calling `dispose(this)` on all\n     * registered [[disposable]] objects.\n     *\n     * Or, if a `disposable` object is provided, calls `dispose(this)` on that object only.\n     *\n     * @param disposable (optional) the disposable to dispose\n     */\n    UIRouter.prototype.dispose = function (disposable) {\n        var _this = this;\n        if (disposable && predicates_1.isFunction(disposable.dispose)) {\n            disposable.dispose(this);\n            return undefined;\n        }\n        this._disposed = true;\n        this._disposables.slice().forEach(function (d) {\n            try {\n                typeof d.dispose === \'function\' && d.dispose(_this);\n                common_1.removeFrom(_this._disposables, d);\n            } catch (ignored) {}\n        });\n    };\n    /**\n     * Adds a plugin to UI-Router\n     *\n     * This method adds a UI-Router Plugin.\n     * A plugin can enhance or change UI-Router behavior using any public API.\n     *\n     * #### Example:\n     * ```js\n     * import { MyCoolPlugin } from "ui-router-cool-plugin";\n     *\n     * var plugin = router.addPlugin(MyCoolPlugin);\n     * ```\n     *\n     * ### Plugin authoring\n     *\n     * A plugin is simply a class (or constructor function) which accepts a [[UIRouter]] instance and (optionally) an options object.\n     *\n     * The plugin can implement its functionality using any of the public APIs of [[UIRouter]].\n     * For example, it may configure router options or add a Transition Hook.\n     *\n     * The plugin can then be published as a separate module.\n     *\n     * #### Example:\n     * ```js\n     * export class MyAuthPlugin implements UIRouterPlugin {\n     *   constructor(router: UIRouter, options: any) {\n     *     this.name = "MyAuthPlugin";\n     *     let $transitions = router.transitionService;\n     *     let $state = router.stateService;\n     *\n     *     let authCriteria = {\n     *       to: (state) => state.data && state.data.requiresAuth\n     *     };\n     *\n     *     function authHook(transition: Transition) {\n     *       let authService = transition.injector().get(\'AuthService\');\n     *       if (!authService.isAuthenticated()) {\n     *         return $state.target(\'login\');\n     *       }\n     *     }\n     *\n     *     $transitions.onStart(authCriteria, authHook);\n     *   }\n     * }\n     * ```\n     *\n     * @param plugin one of:\n     *        - a plugin class which implements [[UIRouterPlugin]]\n     *        - a constructor function for a [[UIRouterPlugin]] which accepts a [[UIRouter]] instance\n     *        - a factory function which accepts a [[UIRouter]] instance and returns a [[UIRouterPlugin]] instance\n     * @param options options to pass to the plugin class/factory\n     * @returns the registered plugin instance\n     */\n    UIRouter.prototype.plugin = function (plugin, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var pluginInstance = new plugin(this, options);\n        if (!pluginInstance.name) throw new Error("Required property `name` missing on plugin: " + pluginInstance);\n        this._disposables.push(pluginInstance);\n        return this._plugins[pluginInstance.name] = pluginInstance;\n    };\n    UIRouter.prototype.getPlugin = function (pluginName) {\n        return pluginName ? this._plugins[pluginName] : common_1.values(this._plugins);\n    };\n    return UIRouter;\n}();\nexports.UIRouter = UIRouter;\n//# sourceMappingURL=router.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @internalapi\n * @module url\n */ /** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\nvar urlMatcher_1 = __webpack_require__(20);\nvar param_1 = __webpack_require__(9);\nvar paramTypes_1 = __webpack_require__(32);\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nvar UrlMatcherFactory = function () {\n    function UrlMatcherFactory() {\n        var _this = this;\n        /** @hidden */this.paramTypes = new paramTypes_1.ParamTypes();\n        /** @hidden */this._isCaseInsensitive = false;\n        /** @hidden */this._isStrictMode = true;\n        /** @hidden */this._defaultSquashPolicy = false;\n        /** @hidden */\n        this._getConfig = function (config) {\n            return common_1.extend({ strict: _this._isStrictMode, caseInsensitive: _this._isCaseInsensitive }, config);\n        };\n        /** @internalapi Creates a new [[Param]] for a given location (DefType) */\n        this.paramFactory = {\n            /** Creates a new [[Param]] from a CONFIG block */\n            fromConfig: function fromConfig(id, type, config) {\n                return new param_1.Param(id, type, config, param_1.DefType.CONFIG, _this);\n            },\n            /** Creates a new [[Param]] from a url PATH */\n            fromPath: function fromPath(id, type, config) {\n                return new param_1.Param(id, type, config, param_1.DefType.PATH, _this);\n            },\n            /** Creates a new [[Param]] from a url SEARCH */\n            fromSearch: function fromSearch(id, type, config) {\n                return new param_1.Param(id, type, config, param_1.DefType.SEARCH, _this);\n            }\n        };\n        common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });\n    }\n    /** @inheritdoc */\n    UrlMatcherFactory.prototype.caseInsensitive = function (value) {\n        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;\n    };\n    /** @inheritdoc */\n    UrlMatcherFactory.prototype.strictMode = function (value) {\n        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;\n    };\n    /** @inheritdoc */\n    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {\n        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value)) throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");\n        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;\n    };\n    /**\n     * Creates a [[UrlMatcher]] for the specified pattern.\n     *\n     * @param pattern  The URL pattern.\n     * @param config  The config object hash.\n     * @returns The UrlMatcher.\n     */\n    UrlMatcherFactory.prototype.compile = function (pattern, config) {\n        return new urlMatcher_1.UrlMatcher(pattern, this.paramTypes, this.paramFactory, this._getConfig(config));\n    };\n    /**\n     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n     *\n     * @param object  The object to perform the type check against.\n     * @returns `true` if the object matches the `UrlMatcher` interface, by\n     *          implementing all the same methods.\n     */\n    UrlMatcherFactory.prototype.isMatcher = function (object) {\n        // TODO: typeof?\n        if (!predicates_1.isObject(object)) return false;\n        var result = true;\n        common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {\n            if (predicates_1.isFunction(val)) result = result && predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]);\n        });\n        return result;\n    };\n    ;\n    /**\n     * Creates and registers a custom [[ParamType]] object\n     *\n     * A [[ParamType]] can be used to generate URLs with typed parameters.\n     *\n     * @param name  The type name.\n     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n     * @param definitionFn A function that is injected before the app runtime starts.\n     *        The result of this function should be a [[ParamTypeDefinition]].\n     *        The result is merged into the existing `definition`.\n     *        See [[ParamType]] for information on the values accepted.\n     *\n     * @returns - if a type was registered: the [[UrlMatcherFactory]]\n     *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n     *\n     * Note: Register custom types *before using them* in a state definition.\n     *\n     * See [[ParamTypeDefinition]] for examples\n     */\n    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {\n        var type = this.paramTypes.type(name, definition, definitionFn);\n        return !predicates_1.isDefined(definition) ? type : this;\n    };\n    ;\n    /** @hidden */\n    UrlMatcherFactory.prototype.$get = function () {\n        this.paramTypes.enqueue = false;\n        this.paramTypes._flushTypeQueue();\n        return this;\n    };\n    ;\n    /** @internalapi */\n    UrlMatcherFactory.prototype.dispose = function () {\n        this.paramTypes.dispose();\n    };\n    return UrlMatcherFactory;\n}();\nexports.UrlMatcherFactory = UrlMatcherFactory;\n//# sourceMappingURL=urlMatcherFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @internalapi\n * @module url\n */\n/** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar predicates_1 = __webpack_require__(1);\nvar urlMatcher_1 = __webpack_require__(20);\nvar hof_1 = __webpack_require__(2);\nvar urlRule_1 = __webpack_require__(42);\nvar targetState_1 = __webpack_require__(7);\n/** @hidden */\nfunction appendBasePath(url, isHtml5, absolute, baseHref) {\n    if (baseHref === \'/\') return url;\n    if (isHtml5) return baseHref.slice(0, -1) + url;\n    if (absolute) return baseHref.slice(1) + url;\n    return url;\n}\n/** @hidden */\nvar getMatcher = hof_1.prop("urlMatcher");\n/**\n * Default rule priority sorting function.\n *\n * Sorts rules by:\n *\n * - Explicit priority (set rule priority using [[UrlRulesApi.when]])\n * - Rule type (STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1)\n * - `UrlMatcher` specificity ([[UrlMatcher.compare]]): works for STATE and URLMATCHER types to pick the most specific rule.\n * - Registration order (for rule types other than STATE and URLMATCHER)\n *\n * @coreapi\n */\nvar defaultRuleSortFn;\ndefaultRuleSortFn = common_1.composeSort(common_1.sortBy(hof_1.pipe(hof_1.prop("priority"), function (x) {\n    return -x;\n})), common_1.sortBy(hof_1.pipe(hof_1.prop("type"), function (type) {\n    return { "STATE": 4, "URLMATCHER": 4, "REGEXP": 3, "RAW": 2, "OTHER": 1 }[type];\n})), function (a, b) {\n    return getMatcher(a) && getMatcher(b) ? urlMatcher_1.UrlMatcher.compare(getMatcher(a), getMatcher(b)) : 0;\n}, common_1.sortBy(hof_1.prop("$id"), common_1.inArray(["REGEXP", "RAW", "OTHER"])));\n/**\n * Updates URL and responds to URL changes\n *\n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRulesApi]] which can be found as [[UrlService.rules]].\n *\n * This class updates the URL when the state changes.\n * It also responds to changes in the URL.\n */\nvar UrlRouter = function () {\n    /** @hidden */\n    function UrlRouter(router) {\n        /** @hidden */this._sortFn = defaultRuleSortFn;\n        /** @hidden */this._rules = [];\n        /** @hidden */this.interceptDeferred = false;\n        /** @hidden */this._id = 0;\n        /** @hidden */this._sorted = false;\n        this._router = router;\n        this.urlRuleFactory = new urlRule_1.UrlRuleFactory(router);\n        common_1.createProxyFunctions(hof_1.val(UrlRouter.prototype), this, hof_1.val(this));\n    }\n    /** @internalapi */\n    UrlRouter.prototype.dispose = function () {\n        this.listen(false);\n        this._rules = [];\n        delete this._otherwiseFn;\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.sort = function (compareFn) {\n        this._rules.sort(this._sortFn = compareFn || this._sortFn);\n        this._sorted = true;\n    };\n    UrlRouter.prototype.ensureSorted = function () {\n        this._sorted || this.sort();\n    };\n    /**\n     * Given a URL, check all rules and return the best [[MatchResult]]\n     * @param url\n     * @returns {MatchResult}\n     */\n    UrlRouter.prototype.match = function (url) {\n        var _this = this;\n        this.ensureSorted();\n        url = common_1.extend({ path: \'\', search: {}, hash: \'\' }, url);\n        var rules = this.rules();\n        if (this._otherwiseFn) rules.push(this._otherwiseFn);\n        // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined\n        var checkRule = function checkRule(rule) {\n            var match = rule.match(url, _this._router);\n            return match && { match: match, rule: rule, weight: rule.matchPriority(match) };\n        };\n        // The rules are pre-sorted.\n        // - Find the first matching rule.\n        // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.\n        // - Choose the rule with the highest match weight.\n        var best;\n        for (var i = 0; i < rules.length; i++) {\n            // Stop when there is a \'best\' rule and the next rule sorts differently than it.\n            if (best && this._sortFn(rules[i], best.rule) !== 0) break;\n            var current = checkRule(rules[i]);\n            // Pick the best MatchResult\n            best = !best || current && current.weight > best.weight ? current : best;\n        }\n        return best;\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.sync = function (evt) {\n        if (evt && evt.defaultPrevented) return;\n        var router = this._router,\n            $url = router.urlService,\n            $state = router.stateService;\n        var url = {\n            path: $url.path(), search: $url.search(), hash: $url.hash()\n        };\n        var best = this.match(url);\n        var applyResult = hof_1.pattern([[predicates_1.isString, function (newurl) {\n            return $url.url(newurl, true);\n        }], [targetState_1.TargetState.isDef, function (def) {\n            return $state.go(def.state, def.params, def.options);\n        }], [hof_1.is(targetState_1.TargetState), function (target) {\n            return $state.go(target.state(), target.params(), target.options());\n        }]]);\n        applyResult(best && best.rule.handler(best.match, url, router));\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.listen = function (enabled) {\n        var _this = this;\n        if (enabled === false) {\n            this._stopFn && this._stopFn();\n            delete this._stopFn;\n        } else {\n            return this._stopFn = this._stopFn || this._router.urlService.onChange(function (evt) {\n                return _this.sync(evt);\n            });\n        }\n    };\n    /**\n     * Internal API.\n     * @internalapi\n     */\n    UrlRouter.prototype.update = function (read) {\n        var $url = this._router.locationService;\n        if (read) {\n            this.location = $url.path();\n            return;\n        }\n        if ($url.path() === this.location) return;\n        $url.url(this.location, true);\n    };\n    /**\n     * Internal API.\n     *\n     * Pushes a new location to the browser history.\n     *\n     * @internalapi\n     * @param urlMatcher\n     * @param params\n     * @param options\n     */\n    UrlRouter.prototype.push = function (urlMatcher, params, options) {\n        var replace = options && !!options.replace;\n        this._router.urlService.url(urlMatcher.format(params || {}), replace);\n    };\n    /**\n     * Builds and returns a URL with interpolated parameters\n     *\n     * #### Example:\n     * ```js\n     * matcher = $umf.compile("/about/:person");\n     * params = { person: "bob" };\n     * $bob = $urlRouter.href(matcher, params);\n     * // $bob == "/about/bob";\n     * ```\n     *\n     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n     * @param params An object of parameter values to fill the matcher\'s required parameters.\n     * @param options Options object. The options are:\n     *\n     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".\n     *\n     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n     */\n    UrlRouter.prototype.href = function (urlMatcher, params, options) {\n        var url = urlMatcher.format(params);\n        if (url == null) return null;\n        options = options || { absolute: false };\n        var cfg = this._router.urlService.config;\n        var isHtml5 = cfg.html5Mode();\n        if (!isHtml5 && url !== null) {\n            url = "#" + cfg.hashPrefix() + url;\n        }\n        url = appendBasePath(url, isHtml5, options.absolute, cfg.baseHref());\n        if (!options.absolute || !url) {\n            return url;\n        }\n        var slash = !isHtml5 && url ? \'/\' : \'\',\n            port = cfg.port();\n        port = port === 80 || port === 443 ? \'\' : \':\' + port;\n        return [cfg.protocol(), \'://\', cfg.host(), port, slash, url].join(\'\');\n    };\n    /**\n     * Manually adds a URL Rule.\n     *\n     * Usually, a url rule is added using [[StateDeclaration.url]] or [[when]].\n     * This api can be used directly for more control (to register a [[BaseUrlRule]], for example).\n     * Rules can be created using [[UrlRouter.urlRuleFactory]], or create manually as simple objects.\n     *\n     * A rule should have a `match` function which returns truthy if the rule matched.\n     * It should also have a `handler` function which is invoked if the rule is the best match.\n     *\n     * @return a function that deregisters the rule\n     */\n    UrlRouter.prototype.rule = function (rule) {\n        var _this = this;\n        if (!urlRule_1.UrlRuleFactory.isUrlRule(rule)) throw new Error("invalid rule");\n        rule.$id = this._id++;\n        rule.priority = rule.priority || 0;\n        this._rules.push(rule);\n        this._sorted = false;\n        return function () {\n            return _this.removeRule(rule);\n        };\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.removeRule = function (rule) {\n        common_1.removeFrom(this._rules, rule);\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.rules = function () {\n        this.ensureSorted();\n        return this._rules.slice();\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.otherwise = function (handler) {\n        var handlerFn = getHandlerFn(handler);\n        this._otherwiseFn = this.urlRuleFactory.create(hof_1.val(true), handlerFn);\n        this._sorted = false;\n    };\n    ;\n    /** @inheritdoc */\n    UrlRouter.prototype.initial = function (handler) {\n        var handlerFn = getHandlerFn(handler);\n        var matchFn = function matchFn(urlParts, router) {\n            return router.globals.transitionHistory.size() === 0 && !!/^\\/?$/.exec(urlParts.path);\n        };\n        this.rule(this.urlRuleFactory.create(matchFn, handlerFn));\n    };\n    ;\n    /** @inheritdoc */\n    UrlRouter.prototype.when = function (matcher, handler, options) {\n        var rule = this.urlRuleFactory.create(matcher, handler);\n        if (predicates_1.isDefined(options && options.priority)) rule.priority = options.priority;\n        this.rule(rule);\n        return rule;\n    };\n    ;\n    /** @inheritdoc */\n    UrlRouter.prototype.deferIntercept = function (defer) {\n        if (defer === undefined) defer = true;\n        this.interceptDeferred = defer;\n    };\n    ;\n    return UrlRouter;\n}();\nexports.UrlRouter = UrlRouter;\nfunction getHandlerFn(handler) {\n    if (!predicates_1.isFunction(handler) && !predicates_1.isString(handler) && !hof_1.is(targetState_1.TargetState)(handler) && !targetState_1.TargetState.isDef(handler)) {\n        throw new Error("\'handler\' must be a string, function, TargetState, or have a state: \'newtarget\' property");\n    }\n    return predicates_1.isFunction(handler) ? handler : hof_1.val(handler);\n}\n//# sourceMappingURL=urlRouter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///41\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module url\n */ /** */\nvar urlMatcher_1 = __webpack_require__(20);\nvar predicates_1 = __webpack_require__(1);\nvar common_1 = __webpack_require__(0);\nvar hof_1 = __webpack_require__(2);\n/**\n * Creates a [[UrlRule]]\n *\n * Creates a [[UrlRule]] from a:\n *\n * - `string`\n * - [[UrlMatcher]]\n * - `RegExp`\n * - [[StateObject]]\n * @internalapi\n */\nvar UrlRuleFactory = function () {\n    function UrlRuleFactory(router) {\n        this.router = router;\n    }\n    UrlRuleFactory.prototype.compile = function (str) {\n        return this.router.urlMatcherFactory.compile(str);\n    };\n    UrlRuleFactory.prototype.create = function (what, handler) {\n        var _this = this;\n        var makeRule = hof_1.pattern([[predicates_1.isString, function (_what) {\n            return makeRule(_this.compile(_what));\n        }], [hof_1.is(urlMatcher_1.UrlMatcher), function (_what) {\n            return _this.fromUrlMatcher(_what, handler);\n        }], [predicates_1.isState, function (_what) {\n            return _this.fromState(_what, _this.router);\n        }], [hof_1.is(RegExp), function (_what) {\n            return _this.fromRegExp(_what, handler);\n        }], [predicates_1.isFunction, function (_what) {\n            return new BaseUrlRule(_what, handler);\n        }]]);\n        var rule = makeRule(what);\n        if (!rule) throw new Error(\"invalid 'what' in when()\");\n        return rule;\n    };\n    /**\n     * A UrlRule which matches based on a UrlMatcher\n     *\n     * The `handler` may be either a `string`, a [[UrlRuleHandlerFn]] or another [[UrlMatcher]]\n     *\n     * ## Handler as a function\n     *\n     * If `handler` is a function, the function is invoked with:\n     *\n     * - matched parameter values ([[RawParams]] from [[UrlMatcher.exec]])\n     * - url: the current Url ([[UrlParts]])\n     * - router: the router object ([[UIRouter]])\n     *\n     * #### Example:\n     * ```js\n     * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n     * var rule = factory.fromUrlMatcher(urlMatcher, match => \"/home/\" + match.fooId + \"/\" + match.barId);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match); // '/home/123/456'\n     * ```\n     *\n     * ## Handler as UrlMatcher\n     *\n     * If `handler` is a UrlMatcher, the handler matcher is used to create the new url.\n     * The `handler` UrlMatcher is formatted using the matched param from the first matcher.\n     * The url is replaced with the result.\n     *\n     * #### Example:\n     * ```js\n     * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n     * var handler = $umf.compile(\"/home/:fooId/:barId\");\n     * var rule = factory.fromUrlMatcher(urlMatcher, handler);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match); // '/home/123/456'\n     * ```\n     */\n    UrlRuleFactory.prototype.fromUrlMatcher = function (urlMatcher, handler) {\n        var _handler = handler;\n        if (predicates_1.isString(handler)) handler = this.router.urlMatcherFactory.compile(handler);\n        if (hof_1.is(urlMatcher_1.UrlMatcher)(handler)) _handler = function _handler(match) {\n            return handler.format(match);\n        };\n        function match(url) {\n            var match = urlMatcher.exec(url.path, url.search, url.hash);\n            return urlMatcher.validates(match) && match;\n        }\n        // Prioritize URLs, lowest to highest:\n        // - Some optional URL parameters, but none matched\n        // - No optional parameters in URL\n        // - Some optional parameters, some matched\n        // - Some optional parameters, all matched\n        function matchPriority(params) {\n            var optional = urlMatcher.parameters().filter(function (param) {\n                return param.isOptional;\n            });\n            if (!optional.length) return 0.000001;\n            var matched = optional.filter(function (param) {\n                return params[param.id];\n            });\n            return matched.length / optional.length;\n        }\n        var details = { urlMatcher: urlMatcher, matchPriority: matchPriority, type: \"URLMATCHER\" };\n        return common_1.extend(new BaseUrlRule(match, _handler), details);\n    };\n    /**\n     * A UrlRule which matches a state by its url\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromState($state.get('foo'), router);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match);\n     * // Starts a transition to 'foo' with params: { fooId: '123', barId: '456' }\n     * ```\n     */\n    UrlRuleFactory.prototype.fromState = function (state, router) {\n        /**\n         * Handles match by transitioning to matched state\n         *\n         * First checks if the router should start a new transition.\n         * A new transition is not required if the current state's URL\n         * and the new URL are already identical\n         */\n        var handler = function handler(match) {\n            var $state = router.stateService;\n            var globals = router.globals;\n            if ($state.href(state, match) !== $state.href(globals.current, globals.params)) {\n                $state.transitionTo(state, match, { inherit: true, source: \"url\" });\n            }\n        };\n        var details = { state: state, type: \"STATE\" };\n        return common_1.extend(this.fromUrlMatcher(state.url, handler), details);\n    };\n    /**\n     * A UrlRule which matches based on a regular expression\n     *\n     * The `handler` may be either a [[UrlRuleHandlerFn]] or a string.\n     *\n     * ## Handler as a function\n     *\n     * If `handler` is a function, the function is invoked with:\n     *\n     * - regexp match array (from `regexp`)\n     * - url: the current Url ([[UrlParts]])\n     * - router: the router object ([[UIRouter]])\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, match => \"/home/\" + match[1])\n     * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n     * var result = rule.handler(match); // '/home/bar'\n     * ```\n     *\n     * ## Handler as string\n     *\n     * If `handler` is a string, the url is *replaced by the string* when the Rule is invoked.\n     * The string is first interpolated using `string.replace()` style pattern.\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, \"/home/$1\")\n     * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n     * var result = rule.handler(match); // '/home/bar'\n     * ```\n     */\n    UrlRuleFactory.prototype.fromRegExp = function (regexp, handler) {\n        if (regexp.global || regexp.sticky) throw new Error(\"Rule RegExp must not be global or sticky\");\n        /**\n         * If handler is a string, the url will be replaced by the string.\n         * If the string has any String.replace() style variables in it (like `$2`),\n         * they will be replaced by the captures from [[match]]\n         */\n        var redirectUrlTo = function redirectUrlTo(match) {\n            // Interpolates matched values into $1 $2, etc using a String.replace()-style pattern\n            return handler.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n                return match[what === '$' ? 0 : Number(what)];\n            });\n        };\n        var _handler = predicates_1.isString(handler) ? redirectUrlTo : handler;\n        var match = function match(url) {\n            return regexp.exec(url.path);\n        };\n        var details = { regexp: regexp, type: \"REGEXP\" };\n        return common_1.extend(new BaseUrlRule(match, _handler), details);\n    };\n    return UrlRuleFactory;\n}();\nUrlRuleFactory.isUrlRule = function (obj) {\n    return obj && ['type', 'match', 'handler'].every(function (key) {\n        return predicates_1.isDefined(obj[key]);\n    });\n};\nexports.UrlRuleFactory = UrlRuleFactory;\n/**\n * A base rule which calls `match`\n *\n * The value from the `match` function is passed through to the `handler`.\n * @internalapi\n */\nvar BaseUrlRule = function () {\n    function BaseUrlRule(match, handler) {\n        var _this = this;\n        this.match = match;\n        this.type = \"RAW\";\n        this.matchPriority = function (match) {\n            return 0 - _this.$id;\n        };\n        this.handler = handler || common_1.identity;\n    }\n    return BaseUrlRule;\n}();\nexports.BaseUrlRule = BaseUrlRule;\n//# sourceMappingURL=urlRule.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @coreapi\n * @module view\n */ /** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar hof_1 = __webpack_require__(2);\nvar predicates_1 = __webpack_require__(1);\nvar trace_1 = __webpack_require__(6);\n/**\n * The View service\n *\n * This service pairs existing `ui-view` components (which live in the DOM)\n * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n *\n * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n *   The views from exited states are deactivated via [[deactivateViewConfig]].\n *   (See: the [[registerActivateViews]] Transition Hook)\n *\n * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n *\n * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])\n * are configured with the matching [[ViewConfig]](s)\n *\n */\nvar ViewService = function () {\n    function ViewService() {\n        var _this = this;\n        this._uiViews = [];\n        this._viewConfigs = [];\n        this._viewConfigFactories = {};\n        this._pluginapi = {\n            _rootViewContext: this._rootViewContext.bind(this),\n            _viewConfigFactory: this._viewConfigFactory.bind(this),\n            _registeredUIViews: function _registeredUIViews() {\n                return _this._uiViews;\n            },\n            _activeViewConfigs: function _activeViewConfigs() {\n                return _this._viewConfigs;\n            }\n        };\n    }\n    ViewService.prototype._rootViewContext = function (context) {\n        return this._rootContext = context || this._rootContext;\n    };\n    ;\n    ViewService.prototype._viewConfigFactory = function (viewType, factory) {\n        this._viewConfigFactories[viewType] = factory;\n    };\n    ViewService.prototype.createViewConfig = function (path, decl) {\n        var cfgFactory = this._viewConfigFactories[decl.$type];\n        if (!cfgFactory) throw new Error("ViewService: No view config factory registered for type " + decl.$type);\n        var cfgs = cfgFactory(path, decl);\n        return predicates_1.isArray(cfgs) ? cfgs : [cfgs];\n    };\n    /**\n     * Deactivates a ViewConfig.\n     *\n     * This function deactivates a `ViewConfig`.\n     * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.\n     *\n     * @param viewConfig The ViewConfig view to deregister.\n     */\n    ViewService.prototype.deactivateViewConfig = function (viewConfig) {\n        trace_1.trace.traceViewServiceEvent("<- Removing", viewConfig);\n        common_1.removeFrom(this._viewConfigs, viewConfig);\n    };\n    ViewService.prototype.activateViewConfig = function (viewConfig) {\n        trace_1.trace.traceViewServiceEvent("-> Registering", viewConfig);\n        this._viewConfigs.push(viewConfig);\n    };\n    ViewService.prototype.sync = function () {\n        var _this = this;\n        var uiViewsByFqn = this._uiViews.map(function (uiv) {\n            return [uiv.fqn, uiv];\n        }).reduce(common_1.applyPairs, {});\n        // Return a weighted depth value for a uiView.\n        // The depth is the nesting depth of ui-views (based on FQN; times 10,000)\n        // plus the depth of the state that is populating the uiView\n        function uiViewDepth(uiView) {\n            var stateDepth = function stateDepth(context) {\n                return context && context.parent ? stateDepth(context.parent) + 1 : 1;\n            };\n            return uiView.fqn.split(".").length * 10000 + stateDepth(uiView.creationContext);\n        }\n        // Return the ViewConfig\'s context\'s depth in the context tree.\n        function viewConfigDepth(config) {\n            var context = config.viewDecl.$context,\n                count = 0;\n            while (++count && context.parent) {\n                context = context.parent;\n            }return count;\n        }\n        // Given a depth function, returns a compare function which can return either ascending or descending order\n        var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) {\n            return posNeg * (depthFn(left) - depthFn(right));\n        });\n        var matchingConfigPair = function matchingConfigPair(uiView) {\n            var matchingConfigs = _this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));\n            if (matchingConfigs.length > 1) {\n                // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)\n                // Sort by depth and return the match from the deepest child\n                // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);\n                matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n            }\n            return [uiView, matchingConfigs[0]];\n        };\n        var configureUIView = function configureUIView(_a) {\n            var uiView = _a[0],\n                viewConfig = _a[1];\n            // If a parent ui-view is reconfigured, it could destroy child ui-views.\n            // Before configuring a child ui-view, make sure it\'s still in the active uiViews array.\n            if (_this._uiViews.indexOf(uiView) !== -1) uiView.configUpdated(viewConfig);\n        };\n        // Sort views by FQN and state depth. Process uiviews nearest the root first.\n        this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\n    };\n    ;\n    /**\n     * Registers a `ui-view` component\n     *\n     * When a `ui-view` component is created, it uses this method to register itself.\n     * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].\n     *\n     * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,\n     * and what the view\'s state context is.\n     *\n     * Note: There is no corresponding `deregisterUIView`.\n     *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n     *\n     * @param uiView The metadata for a UIView\n     * @return a de-registration function used when the view is destroyed.\n     */\n    ViewService.prototype.registerUIView = function (uiView) {\n        trace_1.trace.traceViewServiceUIViewEvent("-> Registering", uiView);\n        var uiViews = this._uiViews;\n        var fqnMatches = function fqnMatches(uiv) {\n            return uiv.fqn === uiView.fqn;\n        };\n        if (uiViews.filter(fqnMatches).length) trace_1.trace.traceViewServiceUIViewEvent("!!!! duplicate uiView named:", uiView);\n        uiViews.push(uiView);\n        this.sync();\n        return function () {\n            var idx = uiViews.indexOf(uiView);\n            if (idx === -1) {\n                trace_1.trace.traceViewServiceUIViewEvent("Tried removing non-registered uiView", uiView);\n                return;\n            }\n            trace_1.trace.traceViewServiceUIViewEvent("<- Deregistering", uiView);\n            common_1.removeFrom(uiViews)(uiView);\n        };\n    };\n    ;\n    /**\n     * Returns the list of views currently available on the page, by fully-qualified name.\n     *\n     * @return {Array} Returns an array of fully-qualified view names.\n     */\n    ViewService.prototype.available = function () {\n        return this._uiViews.map(hof_1.prop("fqn"));\n    };\n    /**\n     * Returns the list of views on the page containing loaded content.\n     *\n     * @return {Array} Returns an array of fully-qualified view names.\n     */\n    ViewService.prototype.active = function () {\n        return this._uiViews.filter(hof_1.prop("$config")).map(hof_1.prop("name"));\n    };\n    /**\n     * Normalizes a view\'s name from a state.views configuration block.\n     *\n     * This should be used by a framework implementation to calculate the values for\n     * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].\n     *\n     * @param context the context object (state declaration) that the view belongs to\n     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n     *\n     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n     */\n    ViewService.normalizeUIViewTarget = function (context, rawViewName) {\n        if (rawViewName === void 0) {\n            rawViewName = "";\n        }\n        // TODO: Validate incoming view name with a regexp to allow:\n        // ex: "view.name@foo.bar" , "^.^.view.name" , "view.name@^.^" , "" ,\n        // "@" , "$default@^" , "!$default.$default" , "!foo.bar"\n        var viewAtContext = rawViewName.split("@");\n        var uiViewName = viewAtContext[0] || "$default"; // default to unnamed view\n        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : "^"; // default to parent context\n        // Handle relative view-name sugar syntax.\n        // Matches rawViewName "^.^.^.foo.bar" into array: ["^.^.^.foo.bar", "^.^.^", "foo.bar"],\n        var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n        if (relativeViewNameSugar) {\n            // Clobbers existing contextAnchor (rawViewName validation will fix this)\n            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to "^.^.^"\n            uiViewName = relativeViewNameSugar[2]; // set view-name to "foo.bar"\n        }\n        if (uiViewName.charAt(0) === \'!\') {\n            uiViewName = uiViewName.substr(1);\n            uiViewContextAnchor = ""; // target absolutely from root\n        }\n        // handle parent relative targeting "^.^.^"\n        var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n        if (relativeMatch.exec(uiViewContextAnchor)) {\n            var anchor = uiViewContextAnchor.split(".").reduce(function (anchor, x) {\n                return anchor.parent;\n            }, context);\n            uiViewContextAnchor = anchor.name;\n        } else if (uiViewContextAnchor === \'.\') {\n            uiViewContextAnchor = context.name;\n        }\n        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };\n    };\n    return ViewService;\n}();\n/**\n * Given a ui-view and a ViewConfig, determines if they "match".\n *\n * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n *\n * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n *\n * In order for a ui-view to match ViewConfig, ui-view\'s $type must match the ViewConfig\'s $type\n *\n * If the ViewConfig\'s target ui-view name is a simple name (no dots), then a ui-view matches if:\n * - the ui-view\'s name matches the ViewConfig\'s target name\n * - the ui-view\'s context matches the ViewConfig\'s anchor\n *\n * If the ViewConfig\'s target ui-view name is a segmented name (with dots), then a ui-view matches if:\n * - There exists a parent ui-view where:\n *    - the parent ui-view\'s name matches the first segment (index 0) of the ViewConfig\'s target name\n *    - the parent ui-view\'s context matches the ViewConfig\'s anchor\n * - And the remaining segments (index 1..n) of the ViewConfig\'s target name match the tail of the ui-view\'s fqn\n *\n * Example:\n *\n * DOM:\n * <ui-view>                        \x3c!-- created in the root context (name: "") --\x3e\n *   <ui-view name="foo">                \x3c!-- created in the context named: "A"      --\x3e\n *     <ui-view>                    \x3c!-- created in the context named: "A.B"    --\x3e\n *       <ui-view name="bar">            \x3c!-- created in the context named: "A.B.C"  --\x3e\n *       </ui-view>\n *     </ui-view>\n *   </ui-view>\n * </ui-view>\n *\n * uiViews: [\n *  { fqn: "$default",                  creationContext: { name: "" } },\n *  { fqn: "$default.foo",              creationContext: { name: "A" } },\n *  { fqn: "$default.foo.$default",     creationContext: { name: "A.B" } }\n *  { fqn: "$default.foo.$default.bar", creationContext: { name: "A.B.C" } }\n * ]\n *\n * These four view configs all match the ui-view with the fqn: "$default.foo.$default.bar":\n *\n * - ViewConfig1: { uiViewName: "bar",                       uiViewContextAnchor: "A.B.C" }\n * - ViewConfig2: { uiViewName: "$default.bar",              uiViewContextAnchor: "A.B" }\n * - ViewConfig3: { uiViewName: "foo.$default.bar",          uiViewContextAnchor: "A" }\n * - ViewConfig4: { uiViewName: "$default.foo.$default.bar", uiViewContextAnchor: "" }\n *\n * Using ViewConfig3 as an example, it matches the ui-view with fqn "$default.foo.$default.bar" because:\n * - The ViewConfig\'s segmented target name is: [ "foo", "$default", "bar" ]\n * - There exists a parent ui-view (which has fqn: "$default.foo") where:\n *    - the parent ui-view\'s name "foo" matches the first segment "foo" of the ViewConfig\'s target name\n *    - the parent ui-view\'s context "A" matches the ViewConfig\'s anchor context "A"\n * - And the remaining segments [ "$default", "bar" ].join("."_ of the ViewConfig\'s target name match\n *   the tail of the ui-view\'s fqn "default.bar"\n *\n * @internalapi\n */\nViewService.matches = function (uiViewsByFqn, uiView) {\n    return function (viewConfig) {\n        // Don\'t supply an ng1 ui-view with an ng2 ViewConfig, etc\n        if (uiView.$type !== viewConfig.viewDecl.$type) return false;\n        // Split names apart from both viewConfig and uiView into segments\n        var vc = viewConfig.viewDecl;\n        var vcSegments = vc.$uiViewName.split(".");\n        var uivSegments = uiView.fqn.split(".");\n        // Check if the tails of the segment arrays match. ex, these arrays\' tails match:\n        // vc: ["foo", "bar"], uiv fqn: ["$default", "foo", "bar"]\n        if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length))) return false;\n        // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n        // ["$default", "foo"].join(".") == "$default.foo", does the ui-view $default.foo context match?\n        var negOffset = 1 - vcSegments.length || undefined;\n        var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(".");\n        var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n        return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n    };\n};\nexports.ViewService = ViewService;\n//# sourceMappingURL=view.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///43\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @coreapi\n * @module core\n */ /** */\nvar stateParams_1 = __webpack_require__(33);\nvar queue_1 = __webpack_require__(23);\n/**\n * Global router state\n *\n * This is where we hold the global mutable state such as current state, current\n * params, current transition, etc.\n */\nvar UIRouterGlobals = function () {\n  function UIRouterGlobals() {\n    /**\n     * Current parameter values\n     *\n     * The parameter values from the latest successful transition\n     */\n    this.params = new stateParams_1.StateParams();\n    /** @internalapi */\n    this.lastStartedTransitionId = -1;\n    /** @internalapi */\n    this.transitionHistory = new queue_1.Queue([], 1);\n    /** @internalapi */\n    this.successfulTransitions = new queue_1.Queue([], 1);\n  }\n  UIRouterGlobals.prototype.dispose = function () {\n    this.transitionHistory.clear();\n    this.successfulTransitions.clear();\n    this.transition = null;\n  };\n  return UIRouterGlobals;\n}();\nexports.UIRouterGlobals = UIRouterGlobals;\n//# sourceMappingURL=globals.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2dsb2JhbHMuanM/NjEwMCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0YXRlUGFyYW1zXzEiLCJyZXF1aXJlIiwicXVldWVfMSIsIlVJUm91dGVyR2xvYmFscyIsInBhcmFtcyIsIlN0YXRlUGFyYW1zIiwibGFzdFN0YXJ0ZWRUcmFuc2l0aW9uSWQiLCJ0cmFuc2l0aW9uSGlzdG9yeSIsIlF1ZXVlIiwic3VjY2Vzc2Z1bFRyYW5zaXRpb25zIiwicHJvdG90eXBlIiwiZGlzcG9zZSIsImNsZWFyIiwidHJhbnNpdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBOzs7SUFHSTtBQUNKLElBQUlDLGdCQUFnQixtQkFBQUMsQ0FBUSxFQUFSLENBQXBCO0FBQ0EsSUFBSUMsVUFBVSxtQkFBQUQsQ0FBUSxFQUFSLENBQWQ7QUFDQTs7Ozs7O0FBTUEsSUFBSUUsa0JBQW1CLFlBQVk7QUFDL0IsV0FBU0EsZUFBVCxHQUEyQjtBQUN2Qjs7Ozs7QUFLQSxTQUFLQyxNQUFMLEdBQWMsSUFBSUosY0FBY0ssV0FBbEIsRUFBZDtBQUNBO0FBQ0EsU0FBS0MsdUJBQUwsR0FBK0IsQ0FBQyxDQUFoQztBQUNBO0FBQ0EsU0FBS0MsaUJBQUwsR0FBeUIsSUFBSUwsUUFBUU0sS0FBWixDQUFrQixFQUFsQixFQUFzQixDQUF0QixDQUF6QjtBQUNBO0FBQ0EsU0FBS0MscUJBQUwsR0FBNkIsSUFBSVAsUUFBUU0sS0FBWixDQUFrQixFQUFsQixFQUFzQixDQUF0QixDQUE3QjtBQUNIO0FBQ0RMLGtCQUFnQk8sU0FBaEIsQ0FBMEJDLE9BQTFCLEdBQW9DLFlBQVk7QUFDNUMsU0FBS0osaUJBQUwsQ0FBdUJLLEtBQXZCO0FBQ0EsU0FBS0gscUJBQUwsQ0FBMkJHLEtBQTNCO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQixJQUFsQjtBQUNILEdBSkQ7QUFLQSxTQUFPVixlQUFQO0FBQ0gsQ0FyQnNCLEVBQXZCO0FBc0JBTCxRQUFRSyxlQUFSLEdBQTBCQSxlQUExQjtBQUNBIiwiZmlsZSI6IjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBjb3JlYXBpXG4gKiBAbW9kdWxlIGNvcmVcbiAqLyAvKiogKi9cbnZhciBzdGF0ZVBhcmFtc18xID0gcmVxdWlyZShcIi4vcGFyYW1zL3N0YXRlUGFyYW1zXCIpO1xudmFyIHF1ZXVlXzEgPSByZXF1aXJlKFwiLi9jb21tb24vcXVldWVcIik7XG4vKipcbiAqIEdsb2JhbCByb3V0ZXIgc3RhdGVcbiAqXG4gKiBUaGlzIGlzIHdoZXJlIHdlIGhvbGQgdGhlIGdsb2JhbCBtdXRhYmxlIHN0YXRlIHN1Y2ggYXMgY3VycmVudCBzdGF0ZSwgY3VycmVudFxuICogcGFyYW1zLCBjdXJyZW50IHRyYW5zaXRpb24sIGV0Yy5cbiAqL1xudmFyIFVJUm91dGVyR2xvYmFscyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVUlSb3V0ZXJHbG9iYWxzKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVudCBwYXJhbWV0ZXIgdmFsdWVzXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBwYXJhbWV0ZXIgdmFsdWVzIGZyb20gdGhlIGxhdGVzdCBzdWNjZXNzZnVsIHRyYW5zaXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucGFyYW1zID0gbmV3IHN0YXRlUGFyYW1zXzEuU3RhdGVQYXJhbXMoKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbGFwaSAqL1xuICAgICAgICB0aGlzLmxhc3RTdGFydGVkVHJhbnNpdGlvbklkID0gLTE7XG4gICAgICAgIC8qKiBAaW50ZXJuYWxhcGkgKi9cbiAgICAgICAgdGhpcy50cmFuc2l0aW9uSGlzdG9yeSA9IG5ldyBxdWV1ZV8xLlF1ZXVlKFtdLCAxKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbGFwaSAqL1xuICAgICAgICB0aGlzLnN1Y2Nlc3NmdWxUcmFuc2l0aW9ucyA9IG5ldyBxdWV1ZV8xLlF1ZXVlKFtdLCAxKTtcbiAgICB9XG4gICAgVUlSb3V0ZXJHbG9iYWxzLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRyYW5zaXRpb25IaXN0b3J5LmNsZWFyKCk7XG4gICAgICAgIHRoaXMuc3VjY2Vzc2Z1bFRyYW5zaXRpb25zLmNsZWFyKCk7XG4gICAgICAgIHRoaXMudHJhbnNpdGlvbiA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gVUlSb3V0ZXJHbG9iYWxzO1xufSgpKTtcbmV4cG9ydHMuVUlSb3V0ZXJHbG9iYWxzID0gVUlSb3V0ZXJHbG9iYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFscy5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2dsb2JhbHMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44\n')},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * @coreapi\n * @module url\n */ /** */\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar coreservices_1 = __webpack_require__(3);\nvar common_1 = __webpack_require__(0);\n/** @hidden */\nvar makeStub = function makeStub(keys) {\n    return keys.reduce(function (acc, key) {\n        return acc[key] = coreservices_1.notImplemented(key), acc;\n    }, { dispose: common_1.noop });\n};\n/** @hidden */var locationServicesFns = ["url", "path", "search", "hash", "onChange"];\n/** @hidden */var locationConfigFns = ["port", "protocol", "host", "baseHref", "html5Mode", "hashPrefix"];\n/** @hidden */var umfFns = ["type", "caseInsensitive", "strictMode", "defaultSquashPolicy"];\n/** @hidden */var rulesFns = ["sort", "when", "initial", "otherwise", "rules", "rule", "removeRule"];\n/** @hidden */var syncFns = ["deferIntercept", "listen", "sync", "match"];\n/**\n * API for URL management\n */\nvar UrlService = function () {\n    /** @hidden */\n    function UrlService(router, lateBind) {\n        if (lateBind === void 0) {\n            lateBind = true;\n        }\n        this.router = router;\n        this.rules = {};\n        this.config = {};\n        // proxy function calls from UrlService to the LocationService/LocationConfig\n        var locationServices = function locationServices() {\n            return router.locationService;\n        };\n        common_1.createProxyFunctions(locationServices, this, locationServices, locationServicesFns, lateBind);\n        var locationConfig = function locationConfig() {\n            return router.locationConfig;\n        };\n        common_1.createProxyFunctions(locationConfig, this.config, locationConfig, locationConfigFns, lateBind);\n        var umf = function umf() {\n            return router.urlMatcherFactory;\n        };\n        common_1.createProxyFunctions(umf, this.config, umf, umfFns);\n        var urlRouter = function urlRouter() {\n            return router.urlRouter;\n        };\n        common_1.createProxyFunctions(urlRouter, this.rules, urlRouter, rulesFns);\n        common_1.createProxyFunctions(urlRouter, this, urlRouter, syncFns);\n    }\n    UrlService.prototype.url = function (newurl, replace, state) {\n        return;\n    };\n    ;\n    /** @inheritdoc */\n    UrlService.prototype.path = function () {\n        return;\n    };\n    ;\n    /** @inheritdoc */\n    UrlService.prototype.search = function () {\n        return;\n    };\n    ;\n    /** @inheritdoc */\n    UrlService.prototype.hash = function () {\n        return;\n    };\n    ;\n    /** @inheritdoc */\n    UrlService.prototype.onChange = function (callback) {\n        return;\n    };\n    ;\n    /**\n     * Returns the current URL parts\n     *\n     * This method returns the current URL components as a [[UrlParts]] object.\n     *\n     * @returns the current url parts\n     */\n    UrlService.prototype.parts = function () {\n        return { path: this.path(), search: this.search(), hash: this.hash() };\n    };\n    UrlService.prototype.dispose = function () {};\n    /** @inheritdoc */\n    UrlService.prototype.sync = function (evt) {\n        return;\n    };\n    /** @inheritdoc */\n    UrlService.prototype.listen = function (enabled) {\n        return;\n    };\n    ;\n    /** @inheritdoc */\n    UrlService.prototype.deferIntercept = function (defer) {\n        return;\n    };\n    /** @inheritdoc */\n    UrlService.prototype.match = function (urlParts) {\n        return;\n    };\n    return UrlService;\n}();\n/** @hidden */\nUrlService.locationServiceStub = makeStub(locationServicesFns);\n/** @hidden */\nUrlService.locationConfigStub = makeStub(locationConfigFns);\nexports.UrlService = UrlService;\n//# sourceMappingURL=urlService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar coreservices_1 = __webpack_require__(3);\n/**\n * A [[TransitionHookFn]] that performs lazy loading\n *\n * When entering a state \"abc\" which has a `lazyLoad` function defined:\n * - Invoke the `lazyLoad` function (unless it is already in process)\n *   - Flag the hook function as \"in process\"\n *   - The function should return a promise (that resolves when lazy loading is complete)\n * - Wait for the promise to settle\n *   - If the promise resolves to a [[LazyLoadResult]], then register those states\n *   - Flag the hook function as \"not in process\"\n * - If the hook was successful\n *   - Remove the `lazyLoad` function from the state declaration\n * - If all the hooks were successful\n *   - Retry the transition (by returning a TargetState)\n *\n * ```\n * .state('abc', {\n *   component: 'fooComponent',\n *   lazyLoad: () => System.import('./fooComponent')\n *   });\n * ```\n *\n * See [[StateDeclaration.lazyLoad]]\n */\nvar lazyLoadHook = function lazyLoadHook(transition) {\n    var router = transition.router;\n    function retryTransition() {\n        if (transition.originalTransition().options().source !== 'url') {\n            // The original transition was not triggered via url sync\n            // The lazy state should be loaded now, so re-try the original transition\n            var orig = transition.targetState();\n            return router.stateService.target(orig.identifier(), orig.params(), orig.options());\n        }\n        // The original transition was triggered via url sync\n        // Run the URL rules and find the best match\n        var $url = router.urlService;\n        var result = $url.match($url.parts());\n        var rule = result && result.rule;\n        // If the best match is a state, redirect the transition (instead\n        // of calling sync() which supersedes the current transition)\n        if (rule && rule.type === \"STATE\") {\n            var state = rule.state;\n            var params = result.match;\n            return router.stateService.target(state, params, transition.options());\n        }\n        // No matching state found, so let .sync() choose the best non-state match/otherwise\n        router.urlService.sync();\n    }\n    var promises = transition.entering().filter(function (state) {\n        return !!state.$$state().lazyLoad;\n    }).map(function (state) {\n        return lazyLoadState(transition, state);\n    });\n    return coreservices_1.services.$q.all(promises).then(retryTransition);\n};\nexports.registerLazyLoadHook = function (transitionService) {\n    return transitionService.onBefore({ entering: function entering(state) {\n            return !!state.lazyLoad;\n        } }, lazyLoadHook);\n};\n/**\n * Invokes a state's lazy load function\n *\n * @param transition a Transition context\n * @param state the state to lazy load\n * @returns A promise for the lazy load result\n */\nfunction lazyLoadState(transition, state) {\n    var lazyLoadFn = state.$$state().lazyLoad;\n    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n    var promise = lazyLoadFn['_promise'];\n    if (!promise) {\n        var success = function success(result) {\n            delete state.lazyLoad;\n            delete state.$$state().lazyLoad;\n            delete lazyLoadFn['_promise'];\n            return result;\n        };\n        var error = function error(err) {\n            delete lazyLoadFn['_promise'];\n            return coreservices_1.services.$q.reject(err);\n        };\n        promise = lazyLoadFn['_promise'] = coreservices_1.services.$q.when(lazyLoadFn(transition, state)).then(updateStateRegistry).then(success, error);\n    }\n    /** Register any lazy loaded state definitions */\n    function updateStateRegistry(result) {\n        if (result && Array.isArray(result.states)) {\n            result.states.forEach(function (state) {\n                return transition.router.stateRegistry.register(state);\n            });\n        }\n        return result;\n    }\n    return promise;\n}\nexports.lazyLoadState = lazyLoadState;\n//# sourceMappingURL=lazyLoad.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar transitionHook_1 = __webpack_require__(12);\n/**\n * This class defines a type of hook, such as `onBefore` or `onEnter`.\n * Plugins can define custom hook types, such as sticky states does for `onInactive`.\n *\n * @interalapi\n */\nvar TransitionEventType = function () {\n    function TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous) {\n        if (reverseSort === void 0) {\n            reverseSort = false;\n        }\n        if (getResultHandler === void 0) {\n            getResultHandler = transitionHook_1.TransitionHook.HANDLE_RESULT;\n        }\n        if (getErrorHandler === void 0) {\n            getErrorHandler = transitionHook_1.TransitionHook.REJECT_ERROR;\n        }\n        if (synchronous === void 0) {\n            synchronous = false;\n        }\n        this.name = name;\n        this.hookPhase = hookPhase;\n        this.hookOrder = hookOrder;\n        this.criteriaMatchPath = criteriaMatchPath;\n        this.reverseSort = reverseSort;\n        this.getResultHandler = getResultHandler;\n        this.getErrorHandler = getErrorHandler;\n        this.synchronous = synchronous;\n    }\n    return TransitionEventType;\n}();\nexports.TransitionEventType = TransitionEventType;\n//# sourceMappingURL=transitionEventType.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3RyYW5zaXRpb24vdHJhbnNpdGlvbkV2ZW50VHlwZS5qcz83NGFhIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHJhbnNpdGlvbkhvb2tfMSIsInJlcXVpcmUiLCJUcmFuc2l0aW9uRXZlbnRUeXBlIiwibmFtZSIsImhvb2tQaGFzZSIsImhvb2tPcmRlciIsImNyaXRlcmlhTWF0Y2hQYXRoIiwicmV2ZXJzZVNvcnQiLCJnZXRSZXN1bHRIYW5kbGVyIiwiZ2V0RXJyb3JIYW5kbGVyIiwic3luY2hyb25vdXMiLCJUcmFuc2l0aW9uSG9vayIsIkhBTkRMRV9SRVNVTFQiLCJSRUpFQ1RfRVJST1IiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQSxJQUFJQyxtQkFBbUIsbUJBQUFDLENBQVEsRUFBUixDQUF2QjtBQUNBOzs7Ozs7QUFNQSxJQUFJQyxzQkFBdUIsWUFBWTtBQUNuQyxhQUFTQSxtQkFBVCxDQUE2QkMsSUFBN0IsRUFBbUNDLFNBQW5DLEVBQThDQyxTQUE5QyxFQUF5REMsaUJBQXpELEVBQTRFQyxXQUE1RSxFQUF5RkMsZ0JBQXpGLEVBQTJHQyxlQUEzRyxFQUE0SEMsV0FBNUgsRUFBeUk7QUFDckksWUFBSUgsZ0JBQWdCLEtBQUssQ0FBekIsRUFBNEI7QUFBRUEsMEJBQWMsS0FBZDtBQUFzQjtBQUNwRCxZQUFJQyxxQkFBcUIsS0FBSyxDQUE5QixFQUFpQztBQUFFQSwrQkFBbUJSLGlCQUFpQlcsY0FBakIsQ0FBZ0NDLGFBQW5EO0FBQW1FO0FBQ3RHLFlBQUlILG9CQUFvQixLQUFLLENBQTdCLEVBQWdDO0FBQUVBLDhCQUFrQlQsaUJBQWlCVyxjQUFqQixDQUFnQ0UsWUFBbEQ7QUFBaUU7QUFDbkcsWUFBSUgsZ0JBQWdCLEtBQUssQ0FBekIsRUFBNEI7QUFBRUEsMEJBQWMsS0FBZDtBQUFzQjtBQUNwRCxhQUFLUCxJQUFMLEdBQVlBLElBQVo7QUFDQSxhQUFLQyxTQUFMLEdBQWlCQSxTQUFqQjtBQUNBLGFBQUtDLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsYUFBS0MsaUJBQUwsR0FBeUJBLGlCQUF6QjtBQUNBLGFBQUtDLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0EsYUFBS0MsZ0JBQUwsR0FBd0JBLGdCQUF4QjtBQUNBLGFBQUtDLGVBQUwsR0FBdUJBLGVBQXZCO0FBQ0EsYUFBS0MsV0FBTCxHQUFtQkEsV0FBbkI7QUFDSDtBQUNELFdBQU9SLG1CQUFQO0FBQ0gsQ0FoQjBCLEVBQTNCO0FBaUJBSixRQUFRSSxtQkFBUixHQUE4QkEsbUJBQTlCO0FBQ0EiLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0cmFuc2l0aW9uSG9va18xID0gcmVxdWlyZShcIi4vdHJhbnNpdGlvbkhvb2tcIik7XG4vKipcbiAqIFRoaXMgY2xhc3MgZGVmaW5lcyBhIHR5cGUgb2YgaG9vaywgc3VjaCBhcyBgb25CZWZvcmVgIG9yIGBvbkVudGVyYC5cbiAqIFBsdWdpbnMgY2FuIGRlZmluZSBjdXN0b20gaG9vayB0eXBlcywgc3VjaCBhcyBzdGlja3kgc3RhdGVzIGRvZXMgZm9yIGBvbkluYWN0aXZlYC5cbiAqXG4gKiBAaW50ZXJhbGFwaVxuICovXG52YXIgVHJhbnNpdGlvbkV2ZW50VHlwZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNpdGlvbkV2ZW50VHlwZShuYW1lLCBob29rUGhhc2UsIGhvb2tPcmRlciwgY3JpdGVyaWFNYXRjaFBhdGgsIHJldmVyc2VTb3J0LCBnZXRSZXN1bHRIYW5kbGVyLCBnZXRFcnJvckhhbmRsZXIsIHN5bmNocm9ub3VzKSB7XG4gICAgICAgIGlmIChyZXZlcnNlU29ydCA9PT0gdm9pZCAwKSB7IHJldmVyc2VTb3J0ID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKGdldFJlc3VsdEhhbmRsZXIgPT09IHZvaWQgMCkgeyBnZXRSZXN1bHRIYW5kbGVyID0gdHJhbnNpdGlvbkhvb2tfMS5UcmFuc2l0aW9uSG9vay5IQU5ETEVfUkVTVUxUOyB9XG4gICAgICAgIGlmIChnZXRFcnJvckhhbmRsZXIgPT09IHZvaWQgMCkgeyBnZXRFcnJvckhhbmRsZXIgPSB0cmFuc2l0aW9uSG9va18xLlRyYW5zaXRpb25Ib29rLlJFSkVDVF9FUlJPUjsgfVxuICAgICAgICBpZiAoc3luY2hyb25vdXMgPT09IHZvaWQgMCkgeyBzeW5jaHJvbm91cyA9IGZhbHNlOyB9XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuaG9va1BoYXNlID0gaG9va1BoYXNlO1xuICAgICAgICB0aGlzLmhvb2tPcmRlciA9IGhvb2tPcmRlcjtcbiAgICAgICAgdGhpcy5jcml0ZXJpYU1hdGNoUGF0aCA9IGNyaXRlcmlhTWF0Y2hQYXRoO1xuICAgICAgICB0aGlzLnJldmVyc2VTb3J0ID0gcmV2ZXJzZVNvcnQ7XG4gICAgICAgIHRoaXMuZ2V0UmVzdWx0SGFuZGxlciA9IGdldFJlc3VsdEhhbmRsZXI7XG4gICAgICAgIHRoaXMuZ2V0RXJyb3JIYW5kbGVyID0gZ2V0RXJyb3JIYW5kbGVyO1xuICAgICAgICB0aGlzLnN5bmNocm9ub3VzID0gc3luY2hyb25vdXM7XG4gICAgfVxuICAgIHJldHVybiBUcmFuc2l0aW9uRXZlbnRUeXBlO1xufSgpKTtcbmV4cG9ydHMuVHJhbnNpdGlvbkV2ZW50VHlwZSA9IFRyYW5zaXRpb25FdmVudFR5cGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2l0aW9uRXZlbnRUeXBlLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvdHJhbnNpdGlvbi90cmFuc2l0aW9uRXZlbnRUeXBlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar index_1 = __webpack_require__(15);\n/**\n * An angular1-like promise api\n *\n * This object implements four methods similar to the\n * [angular 1 promise api](https://docs.angularjs.org/api/ng/service/$q)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This API provides native ES6 promise support wrapped as a $q-like API.\n * Internally, UI-Router uses this $q object to perform promise operations.\n * The `angular-ui-router` (ui-router for angular 1) uses the $q API provided by angular.\n *\n * $q-like promise api\n */\nexports.$q = {\n    /** Normalizes a value as a promise */\n    when: function when(val) {\n        return new Promise(function (resolve, reject) {\n            return resolve(val);\n        });\n    },\n    /** Normalizes a value as a promise rejection */\n    reject: function reject(val) {\n        return new Promise(function (resolve, reject) {\n            reject(val);\n        });\n    },\n    /** @returns a deferred object, which has `resolve` and `reject` functions */\n    defer: function defer() {\n        var deferred = {};\n        deferred.promise = new Promise(function (resolve, reject) {\n            deferred.resolve = resolve;\n            deferred.reject = reject;\n        });\n        return deferred;\n    },\n    /** Like Promise.all(), but also supports object key/promise notation like $q */\n    all: function all(promises) {\n        if (index_1.isArray(promises)) {\n            return Promise.all(promises);\n        }\n        if (index_1.isObject(promises)) {\n            // Convert promises map to promises array.\n            // When each promise resolves, map it to a tuple { key: key, val: val }\n            var chain = Object.keys(promises).map(function (key) {\n                return promises[key].then(function (val) {\n                    return { key: key, val: val };\n                });\n            });\n            // Then wait for all promises to resolve, and convert them back to an object\n            return exports.$q.all(chain).then(function (values) {\n                return values.reduce(function (acc, tuple) {\n                    acc[tuple.key] = tuple.val;return acc;\n                }, {});\n            });\n        }\n    }\n};\n//# sourceMappingURL=q.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvcS5qcz8yOTUxIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW5kZXhfMSIsInJlcXVpcmUiLCIkcSIsIndoZW4iLCJ2YWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRlZmVyIiwiZGVmZXJyZWQiLCJwcm9taXNlIiwiYWxsIiwicHJvbWlzZXMiLCJpc0FycmF5IiwiaXNPYmplY3QiLCJjaGFpbiIsImtleXMiLCJtYXAiLCJrZXkiLCJ0aGVuIiwidmFsdWVzIiwicmVkdWNlIiwiYWNjIiwidHVwbGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQTs7OztBQUlBO0FBQ0EsSUFBSUMsVUFBVSxtQkFBQUMsQ0FBUSxFQUFSLENBQWQ7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O0FBZUFILFFBQVFJLEVBQVIsR0FBYTtBQUNUO0FBQ0FDLFVBQU0sY0FBVUMsR0FBVixFQUFlO0FBQUUsZUFBTyxJQUFJQyxPQUFKLENBQVksVUFBVUMsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFBRSxtQkFBT0QsUUFBUUYsR0FBUixDQUFQO0FBQXNCLFNBQS9ELENBQVA7QUFBMEUsS0FGeEY7QUFHVDtBQUNBRyxZQUFRLGdCQUFVSCxHQUFWLEVBQWU7QUFBRSxlQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUFFQSxtQkFBT0gsR0FBUDtBQUFjLFNBQXZELENBQVA7QUFBa0UsS0FKbEY7QUFLVDtBQUNBSSxXQUFPLGlCQUFZO0FBQ2YsWUFBSUMsV0FBVyxFQUFmO0FBQ0FBLGlCQUFTQyxPQUFULEdBQW1CLElBQUlMLE9BQUosQ0FBWSxVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN0REUscUJBQVNILE9BQVQsR0FBbUJBLE9BQW5CO0FBQ0FHLHFCQUFTRixNQUFULEdBQWtCQSxNQUFsQjtBQUNILFNBSGtCLENBQW5CO0FBSUEsZUFBT0UsUUFBUDtBQUNILEtBYlE7QUFjVDtBQUNBRSxTQUFLLGFBQVVDLFFBQVYsRUFBb0I7QUFDckIsWUFBSVosUUFBUWEsT0FBUixDQUFnQkQsUUFBaEIsQ0FBSixFQUErQjtBQUMzQixtQkFBT1AsUUFBUU0sR0FBUixDQUFZQyxRQUFaLENBQVA7QUFDSDtBQUNELFlBQUlaLFFBQVFjLFFBQVIsQ0FBaUJGLFFBQWpCLENBQUosRUFBZ0M7QUFDNUI7QUFDQTtBQUNBLGdCQUFJRyxRQUFRbkIsT0FBT29CLElBQVAsQ0FBWUosUUFBWixFQUNQSyxHQURPLENBQ0gsVUFBVUMsR0FBVixFQUFlO0FBQUUsdUJBQU9OLFNBQVNNLEdBQVQsRUFBY0MsSUFBZCxDQUFtQixVQUFVZixHQUFWLEVBQWU7QUFBRSwyQkFBUSxFQUFFYyxLQUFLQSxHQUFQLEVBQVlkLEtBQUtBLEdBQWpCLEVBQVI7QUFBa0MsaUJBQXRFLENBQVA7QUFBaUYsYUFEL0YsQ0FBWjtBQUVBO0FBQ0EsbUJBQU9OLFFBQVFJLEVBQVIsQ0FBV1MsR0FBWCxDQUFlSSxLQUFmLEVBQXNCSSxJQUF0QixDQUEyQixVQUFVQyxNQUFWLEVBQWtCO0FBQ2hELHVCQUFPQSxPQUFPQyxNQUFQLENBQWMsVUFBVUMsR0FBVixFQUFlQyxLQUFmLEVBQXNCO0FBQUVELHdCQUFJQyxNQUFNTCxHQUFWLElBQWlCSyxNQUFNbkIsR0FBdkIsQ0FBNEIsT0FBT2tCLEdBQVA7QUFBYSxpQkFBL0UsRUFBaUYsRUFBakYsQ0FBUDtBQUNILGFBRk0sQ0FBUDtBQUdIO0FBQ0o7QUE3QlEsQ0FBYjtBQStCQSIsImZpbGUiOiI0OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAaW50ZXJuYWxhcGlcbiAqIEBtb2R1bGUgdmFuaWxsYVxuICovXG4vKiogKi9cbnZhciBpbmRleF8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9pbmRleFwiKTtcbi8qKlxuICogQW4gYW5ndWxhcjEtbGlrZSBwcm9taXNlIGFwaVxuICpcbiAqIFRoaXMgb2JqZWN0IGltcGxlbWVudHMgZm91ciBtZXRob2RzIHNpbWlsYXIgdG8gdGhlXG4gKiBbYW5ndWxhciAxIHByb21pc2UgYXBpXShodHRwczovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcvc2VydmljZS8kcSlcbiAqXG4gKiBVSS1Sb3V0ZXIgZXZvbHZlZCBmcm9tIGFuIGFuZ3VsYXIgMSBsaWJyYXJ5IHRvIGEgZnJhbWV3b3JrIGFnbm9zdGljIGxpYnJhcnkuXG4gKiBIb3dldmVyLCBzb21lIG9mIHRoZSBgQHVpcm91dGVyL2NvcmVgIGNvZGUgdXNlcyB0aGVzZSBuZzEgc3R5bGUgQVBJcyB0byBzdXBwb3J0IG5nMSBzdHlsZSBkZXBlbmRlbmN5IGluamVjdGlvbi5cbiAqXG4gKiBUaGlzIEFQSSBwcm92aWRlcyBuYXRpdmUgRVM2IHByb21pc2Ugc3VwcG9ydCB3cmFwcGVkIGFzIGEgJHEtbGlrZSBBUEkuXG4gKiBJbnRlcm5hbGx5LCBVSS1Sb3V0ZXIgdXNlcyB0aGlzICRxIG9iamVjdCB0byBwZXJmb3JtIHByb21pc2Ugb3BlcmF0aW9ucy5cbiAqIFRoZSBgYW5ndWxhci11aS1yb3V0ZXJgICh1aS1yb3V0ZXIgZm9yIGFuZ3VsYXIgMSkgdXNlcyB0aGUgJHEgQVBJIHByb3ZpZGVkIGJ5IGFuZ3VsYXIuXG4gKlxuICogJHEtbGlrZSBwcm9taXNlIGFwaVxuICovXG5leHBvcnRzLiRxID0ge1xuICAgIC8qKiBOb3JtYWxpemVzIGEgdmFsdWUgYXMgYSBwcm9taXNlICovXG4gICAgd2hlbjogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyByZXR1cm4gcmVzb2x2ZSh2YWwpOyB9KTsgfSxcbiAgICAvKiogTm9ybWFsaXplcyBhIHZhbHVlIGFzIGEgcHJvbWlzZSByZWplY3Rpb24gKi9cbiAgICByZWplY3Q6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgcmVqZWN0KHZhbCk7IH0pOyB9LFxuICAgIC8qKiBAcmV0dXJucyBhIGRlZmVycmVkIG9iamVjdCwgd2hpY2ggaGFzIGByZXNvbHZlYCBhbmQgYHJlamVjdGAgZnVuY3Rpb25zICovXG4gICAgZGVmZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0ge307XG4gICAgICAgIGRlZmVycmVkLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZDtcbiAgICB9LFxuICAgIC8qKiBMaWtlIFByb21pc2UuYWxsKCksIGJ1dCBhbHNvIHN1cHBvcnRzIG9iamVjdCBrZXkvcHJvbWlzZSBub3RhdGlvbiBsaWtlICRxICovXG4gICAgYWxsOiBmdW5jdGlvbiAocHJvbWlzZXMpIHtcbiAgICAgICAgaWYgKGluZGV4XzEuaXNBcnJheShwcm9taXNlcykpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4XzEuaXNPYmplY3QocHJvbWlzZXMpKSB7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IHByb21pc2VzIG1hcCB0byBwcm9taXNlcyBhcnJheS5cbiAgICAgICAgICAgIC8vIFdoZW4gZWFjaCBwcm9taXNlIHJlc29sdmVzLCBtYXAgaXQgdG8gYSB0dXBsZSB7IGtleToga2V5LCB2YWw6IHZhbCB9XG4gICAgICAgICAgICB2YXIgY2hhaW4gPSBPYmplY3Qua2V5cyhwcm9taXNlcylcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHByb21pc2VzW2tleV0udGhlbihmdW5jdGlvbiAodmFsKSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiB2YWwgfSk7IH0pOyB9KTtcbiAgICAgICAgICAgIC8vIFRoZW4gd2FpdCBmb3IgYWxsIHByb21pc2VzIHRvIHJlc29sdmUsIGFuZCBjb252ZXJ0IHRoZW0gYmFjayB0byBhbiBvYmplY3RcbiAgICAgICAgICAgIHJldHVybiBleHBvcnRzLiRxLmFsbChjaGFpbikudGhlbihmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgdHVwbGUpIHsgYWNjW3R1cGxlLmtleV0gPSB0dXBsZS52YWw7IHJldHVybiBhY2M7IH0sIHt9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXEuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi92YW5pbGxhL3EuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar index_1 = __webpack_require__(15);\n// globally available injectables\nvar globals = {};\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nvar ARGUMENT_NAMES = /([^\\s,]+)/g;\n/**\n * A basic angular1-like injector api\n *\n * This object implements four methods similar to the\n * [angular 1 dependency injector](https://docs.angularjs.org/api/auto/service/$injector)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This object provides a naive implementation of a globally scoped dependency injection system.\n * It supports the following DI approaches:\n *\n * ### Function parameter names\n *\n * A function's `.toString()` is called, and the parameter names are parsed.\n * This only works when the parameter names aren't \"mangled\" by a minifier such as UglifyJS.\n *\n * ```js\n * function injectedFunction(FooService, BarService) {\n *   // FooService and BarService are injected\n * }\n * ```\n *\n * ### Function annotation\n *\n * A function may be annotated with an array of dependency names as the `$inject` property.\n *\n * ```js\n * injectedFunction.$inject = [ 'FooService', 'BarService' ];\n * function injectedFunction(fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }\n * ```\n *\n * ### Array notation\n *\n * An array provides the names of the dependencies to inject (as strings).\n * The function is the last element of the array.\n *\n * ```js\n * [ 'FooService', 'BarService', function (fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }]\n * ```\n *\n * @type {$InjectorLike}\n */\nexports.$injector = {\n    /** Gets an object from DI based on a string token */\n    get: function get(name) {\n        return globals[name];\n    },\n    /** Returns true if an object named `name` exists in global DI */\n    has: function has(name) {\n        return exports.$injector.get(name) != null;\n    },\n    /**\n     * Injects a function\n     *\n     * @param fn the function to inject\n     * @param context the function's `this` binding\n     * @param locals An object with additional DI tokens and values, such as `{ someToken: { foo: 1 } }`\n     */\n    invoke: function invoke(fn, context, locals) {\n        var all = index_1.extend({}, globals, locals || {});\n        var params = exports.$injector.annotate(fn);\n        var ensureExist = index_1.assertPredicate(function (key) {\n            return all.hasOwnProperty(key);\n        }, function (key) {\n            return \"DI can't find injectable: '\" + key + \"'\";\n        });\n        var args = params.filter(ensureExist).map(function (x) {\n            return all[x];\n        });\n        if (index_1.isFunction(fn)) return fn.apply(context, args);else return fn.slice(-1)[0].apply(context, args);\n    },\n    /**\n     * Returns a function's dependencies\n     *\n     * Analyzes a function (or array) and returns an array of DI tokens that the function requires.\n     * @return an array of `string`s\n     */\n    annotate: function annotate(fn) {\n        if (!index_1.isInjectable(fn)) throw new Error(\"Not an injectable function: \" + fn);\n        if (fn && fn.$inject) return fn.$inject;\n        if (index_1.isArray(fn)) return fn.slice(0, -1);\n        var fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n        var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n        return result || [];\n    }\n};\n//# sourceMappingURL=injector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvaW5qZWN0b3IuanM/YTA1NCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluZGV4XzEiLCJyZXF1aXJlIiwiZ2xvYmFscyIsIlNUUklQX0NPTU1FTlRTIiwiQVJHVU1FTlRfTkFNRVMiLCIkaW5qZWN0b3IiLCJnZXQiLCJuYW1lIiwiaGFzIiwiaW52b2tlIiwiZm4iLCJjb250ZXh0IiwibG9jYWxzIiwiYWxsIiwiZXh0ZW5kIiwicGFyYW1zIiwiYW5ub3RhdGUiLCJlbnN1cmVFeGlzdCIsImFzc2VydFByZWRpY2F0ZSIsImtleSIsImhhc093blByb3BlcnR5IiwiYXJncyIsImZpbHRlciIsIm1hcCIsIngiLCJpc0Z1bmN0aW9uIiwiYXBwbHkiLCJzbGljZSIsImlzSW5qZWN0YWJsZSIsIkVycm9yIiwiJGluamVjdCIsImlzQXJyYXkiLCJmblN0ciIsInRvU3RyaW5nIiwicmVwbGFjZSIsInJlc3VsdCIsImluZGV4T2YiLCJtYXRjaCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBOzs7O0FBSUE7QUFDQSxJQUFJQyxVQUFVLG1CQUFBQyxDQUFRLEVBQVIsQ0FBZDtBQUNBO0FBQ0EsSUFBSUMsVUFBVSxFQUFkO0FBQ0EsSUFBSUMsaUJBQWlCLGtDQUFyQjtBQUNBLElBQUlDLGlCQUFpQixZQUFyQjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStDQU4sUUFBUU8sU0FBUixHQUFvQjtBQUNoQjtBQUNBQyxTQUFLLGFBQVVDLElBQVYsRUFBZ0I7QUFBRSxlQUFPTCxRQUFRSyxJQUFSLENBQVA7QUFBdUIsS0FGOUI7QUFHaEI7QUFDQUMsU0FBSyxhQUFVRCxJQUFWLEVBQWdCO0FBQUUsZUFBT1QsUUFBUU8sU0FBUixDQUFrQkMsR0FBbEIsQ0FBc0JDLElBQXRCLEtBQStCLElBQXRDO0FBQTZDLEtBSnBEO0FBS2hCOzs7Ozs7O0FBT0FFLFlBQVEsZ0JBQVVDLEVBQVYsRUFBY0MsT0FBZCxFQUF1QkMsTUFBdkIsRUFBK0I7QUFDbkMsWUFBSUMsTUFBTWIsUUFBUWMsTUFBUixDQUFlLEVBQWYsRUFBbUJaLE9BQW5CLEVBQTRCVSxVQUFVLEVBQXRDLENBQVY7QUFDQSxZQUFJRyxTQUFTakIsUUFBUU8sU0FBUixDQUFrQlcsUUFBbEIsQ0FBMkJOLEVBQTNCLENBQWI7QUFDQSxZQUFJTyxjQUFjakIsUUFBUWtCLGVBQVIsQ0FBd0IsVUFBVUMsR0FBVixFQUFlO0FBQUUsbUJBQU9OLElBQUlPLGNBQUosQ0FBbUJELEdBQW5CLENBQVA7QUFBaUMsU0FBMUUsRUFBNEUsVUFBVUEsR0FBVixFQUFlO0FBQUUsbUJBQU8sZ0NBQWdDQSxHQUFoQyxHQUFzQyxHQUE3QztBQUFtRCxTQUFoSixDQUFsQjtBQUNBLFlBQUlFLE9BQU9OLE9BQU9PLE1BQVAsQ0FBY0wsV0FBZCxFQUEyQk0sR0FBM0IsQ0FBK0IsVUFBVUMsQ0FBVixFQUFhO0FBQUUsbUJBQU9YLElBQUlXLENBQUosQ0FBUDtBQUFnQixTQUE5RCxDQUFYO0FBQ0EsWUFBSXhCLFFBQVF5QixVQUFSLENBQW1CZixFQUFuQixDQUFKLEVBQ0ksT0FBT0EsR0FBR2dCLEtBQUgsQ0FBU2YsT0FBVCxFQUFrQlUsSUFBbEIsQ0FBUCxDQURKLEtBR0ksT0FBT1gsR0FBR2lCLEtBQUgsQ0FBUyxDQUFDLENBQVYsRUFBYSxDQUFiLEVBQWdCRCxLQUFoQixDQUFzQmYsT0FBdEIsRUFBK0JVLElBQS9CLENBQVA7QUFDUCxLQXJCZTtBQXNCaEI7Ozs7OztBQU1BTCxjQUFVLGtCQUFVTixFQUFWLEVBQWM7QUFDcEIsWUFBSSxDQUFDVixRQUFRNEIsWUFBUixDQUFxQmxCLEVBQXJCLENBQUwsRUFDSSxNQUFNLElBQUltQixLQUFKLENBQVUsaUNBQWlDbkIsRUFBM0MsQ0FBTjtBQUNKLFlBQUlBLE1BQU1BLEdBQUdvQixPQUFiLEVBQ0ksT0FBT3BCLEdBQUdvQixPQUFWO0FBQ0osWUFBSTlCLFFBQVErQixPQUFSLENBQWdCckIsRUFBaEIsQ0FBSixFQUNJLE9BQU9BLEdBQUdpQixLQUFILENBQVMsQ0FBVCxFQUFZLENBQUMsQ0FBYixDQUFQO0FBQ0osWUFBSUssUUFBUXRCLEdBQUd1QixRQUFILEdBQWNDLE9BQWQsQ0FBc0IvQixjQUF0QixFQUFzQyxFQUF0QyxDQUFaO0FBQ0EsWUFBSWdDLFNBQVNILE1BQU1MLEtBQU4sQ0FBWUssTUFBTUksT0FBTixDQUFjLEdBQWQsSUFBcUIsQ0FBakMsRUFBb0NKLE1BQU1JLE9BQU4sQ0FBYyxHQUFkLENBQXBDLEVBQXdEQyxLQUF4RCxDQUE4RGpDLGNBQTlELENBQWI7QUFDQSxlQUFPK0IsVUFBVSxFQUFqQjtBQUNIO0FBdENlLENBQXBCO0FBd0NBIiwiZmlsZSI6IjQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBpbnRlcm5hbGFwaVxuICogQG1vZHVsZSB2YW5pbGxhXG4gKi9cbi8qKiAqL1xudmFyIGluZGV4XzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2luZGV4XCIpO1xuLy8gZ2xvYmFsbHkgYXZhaWxhYmxlIGluamVjdGFibGVzXG52YXIgZ2xvYmFscyA9IHt9O1xudmFyIFNUUklQX0NPTU1FTlRTID0gLygoXFwvXFwvLiokKXwoXFwvXFwqW1xcc1xcU10qP1xcKlxcLykpL21nO1xudmFyIEFSR1VNRU5UX05BTUVTID0gLyhbXlxccyxdKykvZztcbi8qKlxuICogQSBiYXNpYyBhbmd1bGFyMS1saWtlIGluamVjdG9yIGFwaVxuICpcbiAqIFRoaXMgb2JqZWN0IGltcGxlbWVudHMgZm91ciBtZXRob2RzIHNpbWlsYXIgdG8gdGhlXG4gKiBbYW5ndWxhciAxIGRlcGVuZGVuY3kgaW5qZWN0b3JdKGh0dHBzOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9hdXRvL3NlcnZpY2UvJGluamVjdG9yKVxuICpcbiAqIFVJLVJvdXRlciBldm9sdmVkIGZyb20gYW4gYW5ndWxhciAxIGxpYnJhcnkgdG8gYSBmcmFtZXdvcmsgYWdub3N0aWMgbGlicmFyeS5cbiAqIEhvd2V2ZXIsIHNvbWUgb2YgdGhlIGBAdWlyb3V0ZXIvY29yZWAgY29kZSB1c2VzIHRoZXNlIG5nMSBzdHlsZSBBUElzIHRvIHN1cHBvcnQgbmcxIHN0eWxlIGRlcGVuZGVuY3kgaW5qZWN0aW9uLlxuICpcbiAqIFRoaXMgb2JqZWN0IHByb3ZpZGVzIGEgbmFpdmUgaW1wbGVtZW50YXRpb24gb2YgYSBnbG9iYWxseSBzY29wZWQgZGVwZW5kZW5jeSBpbmplY3Rpb24gc3lzdGVtLlxuICogSXQgc3VwcG9ydHMgdGhlIGZvbGxvd2luZyBESSBhcHByb2FjaGVzOlxuICpcbiAqICMjIyBGdW5jdGlvbiBwYXJhbWV0ZXIgbmFtZXNcbiAqXG4gKiBBIGZ1bmN0aW9uJ3MgYC50b1N0cmluZygpYCBpcyBjYWxsZWQsIGFuZCB0aGUgcGFyYW1ldGVyIG5hbWVzIGFyZSBwYXJzZWQuXG4gKiBUaGlzIG9ubHkgd29ya3Mgd2hlbiB0aGUgcGFyYW1ldGVyIG5hbWVzIGFyZW4ndCBcIm1hbmdsZWRcIiBieSBhIG1pbmlmaWVyIHN1Y2ggYXMgVWdsaWZ5SlMuXG4gKlxuICogYGBganNcbiAqIGZ1bmN0aW9uIGluamVjdGVkRnVuY3Rpb24oRm9vU2VydmljZSwgQmFyU2VydmljZSkge1xuICogICAvLyBGb29TZXJ2aWNlIGFuZCBCYXJTZXJ2aWNlIGFyZSBpbmplY3RlZFxuICogfVxuICogYGBgXG4gKlxuICogIyMjIEZ1bmN0aW9uIGFubm90YXRpb25cbiAqXG4gKiBBIGZ1bmN0aW9uIG1heSBiZSBhbm5vdGF0ZWQgd2l0aCBhbiBhcnJheSBvZiBkZXBlbmRlbmN5IG5hbWVzIGFzIHRoZSBgJGluamVjdGAgcHJvcGVydHkuXG4gKlxuICogYGBganNcbiAqIGluamVjdGVkRnVuY3Rpb24uJGluamVjdCA9IFsgJ0Zvb1NlcnZpY2UnLCAnQmFyU2VydmljZScgXTtcbiAqIGZ1bmN0aW9uIGluamVjdGVkRnVuY3Rpb24oZnMsIGJzKSB7XG4gKiAgIC8vIEZvb1NlcnZpY2UgYW5kIEJhclNlcnZpY2UgYXJlIGluamVjdGVkIGFzIGZzIGFuZCBicyBwYXJhbWV0ZXJzXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiAjIyMgQXJyYXkgbm90YXRpb25cbiAqXG4gKiBBbiBhcnJheSBwcm92aWRlcyB0aGUgbmFtZXMgb2YgdGhlIGRlcGVuZGVuY2llcyB0byBpbmplY3QgKGFzIHN0cmluZ3MpLlxuICogVGhlIGZ1bmN0aW9uIGlzIHRoZSBsYXN0IGVsZW1lbnQgb2YgdGhlIGFycmF5LlxuICpcbiAqIGBgYGpzXG4gKiBbICdGb29TZXJ2aWNlJywgJ0JhclNlcnZpY2UnLCBmdW5jdGlvbiAoZnMsIGJzKSB7XG4gKiAgIC8vIEZvb1NlcnZpY2UgYW5kIEJhclNlcnZpY2UgYXJlIGluamVjdGVkIGFzIGZzIGFuZCBicyBwYXJhbWV0ZXJzXG4gKiB9XVxuICogYGBgXG4gKlxuICogQHR5cGUgeyRJbmplY3Rvckxpa2V9XG4gKi9cbmV4cG9ydHMuJGluamVjdG9yID0ge1xuICAgIC8qKiBHZXRzIGFuIG9iamVjdCBmcm9tIERJIGJhc2VkIG9uIGEgc3RyaW5nIHRva2VuICovXG4gICAgZ2V0OiBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gZ2xvYmFsc1tuYW1lXTsgfSxcbiAgICAvKiogUmV0dXJucyB0cnVlIGlmIGFuIG9iamVjdCBuYW1lZCBgbmFtZWAgZXhpc3RzIGluIGdsb2JhbCBESSAqL1xuICAgIGhhczogZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGV4cG9ydHMuJGluamVjdG9yLmdldChuYW1lKSAhPSBudWxsOyB9LFxuICAgIC8qKlxuICAgICAqIEluamVjdHMgYSBmdW5jdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIGZuIHRoZSBmdW5jdGlvbiB0byBpbmplY3RcbiAgICAgKiBAcGFyYW0gY29udGV4dCB0aGUgZnVuY3Rpb24ncyBgdGhpc2AgYmluZGluZ1xuICAgICAqIEBwYXJhbSBsb2NhbHMgQW4gb2JqZWN0IHdpdGggYWRkaXRpb25hbCBESSB0b2tlbnMgYW5kIHZhbHVlcywgc3VjaCBhcyBgeyBzb21lVG9rZW46IHsgZm9vOiAxIH0gfWBcbiAgICAgKi9cbiAgICBpbnZva2U6IGZ1bmN0aW9uIChmbiwgY29udGV4dCwgbG9jYWxzKSB7XG4gICAgICAgIHZhciBhbGwgPSBpbmRleF8xLmV4dGVuZCh7fSwgZ2xvYmFscywgbG9jYWxzIHx8IHt9KTtcbiAgICAgICAgdmFyIHBhcmFtcyA9IGV4cG9ydHMuJGluamVjdG9yLmFubm90YXRlKGZuKTtcbiAgICAgICAgdmFyIGVuc3VyZUV4aXN0ID0gaW5kZXhfMS5hc3NlcnRQcmVkaWNhdGUoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gYWxsLmhhc093blByb3BlcnR5KGtleSk7IH0sIGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIFwiREkgY2FuJ3QgZmluZCBpbmplY3RhYmxlOiAnXCIgKyBrZXkgKyBcIidcIjsgfSk7XG4gICAgICAgIHZhciBhcmdzID0gcGFyYW1zLmZpbHRlcihlbnN1cmVFeGlzdCkubWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiBhbGxbeF07IH0pO1xuICAgICAgICBpZiAoaW5kZXhfMS5pc0Z1bmN0aW9uKGZuKSlcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGZuLnNsaWNlKC0xKVswXS5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBmdW5jdGlvbidzIGRlcGVuZGVuY2llc1xuICAgICAqXG4gICAgICogQW5hbHl6ZXMgYSBmdW5jdGlvbiAob3IgYXJyYXkpIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIERJIHRva2VucyB0aGF0IHRoZSBmdW5jdGlvbiByZXF1aXJlcy5cbiAgICAgKiBAcmV0dXJuIGFuIGFycmF5IG9mIGBzdHJpbmdgc1xuICAgICAqL1xuICAgIGFubm90YXRlOiBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgaWYgKCFpbmRleF8xLmlzSW5qZWN0YWJsZShmbikpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgYW4gaW5qZWN0YWJsZSBmdW5jdGlvbjogXCIgKyBmbik7XG4gICAgICAgIGlmIChmbiAmJiBmbi4kaW5qZWN0KVxuICAgICAgICAgICAgcmV0dXJuIGZuLiRpbmplY3Q7XG4gICAgICAgIGlmIChpbmRleF8xLmlzQXJyYXkoZm4pKVxuICAgICAgICAgICAgcmV0dXJuIGZuLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgdmFyIGZuU3RyID0gZm4udG9TdHJpbmcoKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyk7XG4gICAgICAgIHZhciByZXN1bHQgPSBmblN0ci5zbGljZShmblN0ci5pbmRleE9mKCcoJykgKyAxLCBmblN0ci5pbmRleE9mKCcpJykpLm1hdGNoKEFSR1VNRU5UX05BTUVTKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCB8fCBbXTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5qZWN0b3IuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi92YW5pbGxhL2luamVjdG9yLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///49\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = undefined && undefined.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar utils_1 = __webpack_require__(14);\nvar baseLocationService_1 = __webpack_require__(21);\n/** A `LocationServices` that uses the browser hash \"#\" to get/set the current location */\nvar HashLocationService = function (_super) {\n    __extends(HashLocationService, _super);\n    function HashLocationService(router) {\n        var _this = _super.call(this, router, false) || this;\n        window.addEventListener('hashchange', _this._listener, false);\n        return _this;\n    }\n    HashLocationService.prototype._get = function () {\n        return utils_1.trimHashVal(this._location.hash);\n    };\n    HashLocationService.prototype._set = function (state, title, url, replace) {\n        this._location.hash = url;\n    };\n    HashLocationService.prototype.dispose = function (router) {\n        _super.prototype.dispose.call(this, router);\n        window.removeEventListener('hashchange', this._listener);\n    };\n    return HashLocationService;\n}(baseLocationService_1.BaseLocationServices);\nexports.HashLocationService = HashLocationService;\n//# sourceMappingURL=hashLocationService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvaGFzaExvY2F0aW9uU2VydmljZS5qcz9mOTMxIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsImV4dGVuZFN0YXRpY3MiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiZCIsImIiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfXyIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1dGlsc18xIiwicmVxdWlyZSIsImJhc2VMb2NhdGlvblNlcnZpY2VfMSIsIkhhc2hMb2NhdGlvblNlcnZpY2UiLCJfc3VwZXIiLCJyb3V0ZXIiLCJfdGhpcyIsImNhbGwiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiX2xpc3RlbmVyIiwiX2dldCIsInRyaW1IYXNoVmFsIiwiX2xvY2F0aW9uIiwiaGFzaCIsIl9zZXQiLCJzdGF0ZSIsInRpdGxlIiwidXJsIiwicmVwbGFjZSIsImRpc3Bvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiQmFzZUxvY2F0aW9uU2VydmljZXMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFlBQWEsYUFBUSxVQUFLQSxTQUFkLElBQTZCLFlBQVk7QUFDckQsUUFBSUMsZ0JBQWdCQyxPQUFPQyxjQUFQLElBQ2YsRUFBRUMsV0FBVyxFQUFiLGNBQTZCQyxLQUE3QixJQUFzQyxVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFBRUQsVUFBRUYsU0FBRixHQUFjRyxDQUFkO0FBQWtCLEtBRDNELElBRWhCLFVBQVVELENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUFFLGFBQUssSUFBSUMsQ0FBVCxJQUFjRCxDQUFkO0FBQWlCLGdCQUFJQSxFQUFFRSxjQUFGLENBQWlCRCxDQUFqQixDQUFKLEVBQXlCRixFQUFFRSxDQUFGLElBQU9ELEVBQUVDLENBQUYsQ0FBUDtBQUExQztBQUF3RCxLQUY5RTtBQUdBLFdBQU8sVUFBVUYsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ25CTixzQkFBY0ssQ0FBZCxFQUFpQkMsQ0FBakI7QUFDQSxpQkFBU0csRUFBVCxHQUFjO0FBQUUsaUJBQUtDLFdBQUwsR0FBbUJMLENBQW5CO0FBQXVCO0FBQ3ZDQSxVQUFFTSxTQUFGLEdBQWNMLE1BQU0sSUFBTixHQUFhTCxPQUFPVyxNQUFQLENBQWNOLENBQWQsQ0FBYixJQUFpQ0csR0FBR0UsU0FBSCxHQUFlTCxFQUFFSyxTQUFqQixFQUE0QixJQUFJRixFQUFKLEVBQTdELENBQWQ7QUFDSCxLQUpEO0FBS0gsQ0FUMkMsRUFBNUM7QUFVQVIsT0FBT1ksY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0E7Ozs7QUFJQTtBQUNBLElBQUlDLFVBQVUsbUJBQUFDLENBQVEsRUFBUixDQUFkO0FBQ0EsSUFBSUMsd0JBQXdCLG1CQUFBRCxDQUFRLEVBQVIsQ0FBNUI7QUFDQTtBQUNBLElBQUlFLHNCQUF1QixVQUFVQyxNQUFWLEVBQWtCO0FBQ3pDckIsY0FBVW9CLG1CQUFWLEVBQStCQyxNQUEvQjtBQUNBLGFBQVNELG1CQUFULENBQTZCRSxNQUE3QixFQUFxQztBQUNqQyxZQUFJQyxRQUFRRixPQUFPRyxJQUFQLENBQVksSUFBWixFQUFrQkYsTUFBbEIsRUFBMEIsS0FBMUIsS0FBb0MsSUFBaEQ7QUFDQUcsZUFBT0MsZ0JBQVAsQ0FBd0IsWUFBeEIsRUFBc0NILE1BQU1JLFNBQTVDLEVBQXVELEtBQXZEO0FBQ0EsZUFBT0osS0FBUDtBQUNIO0FBQ0RILHdCQUFvQlIsU0FBcEIsQ0FBOEJnQixJQUE5QixHQUFxQyxZQUFZO0FBQzdDLGVBQU9YLFFBQVFZLFdBQVIsQ0FBb0IsS0FBS0MsU0FBTCxDQUFlQyxJQUFuQyxDQUFQO0FBQ0gsS0FGRDtBQUdBWCx3QkFBb0JSLFNBQXBCLENBQThCb0IsSUFBOUIsR0FBcUMsVUFBVUMsS0FBVixFQUFpQkMsS0FBakIsRUFBd0JDLEdBQXhCLEVBQTZCQyxPQUE3QixFQUFzQztBQUN2RSxhQUFLTixTQUFMLENBQWVDLElBQWYsR0FBc0JJLEdBQXRCO0FBQ0gsS0FGRDtBQUdBZix3QkFBb0JSLFNBQXBCLENBQThCeUIsT0FBOUIsR0FBd0MsVUFBVWYsTUFBVixFQUFrQjtBQUN0REQsZUFBT1QsU0FBUCxDQUFpQnlCLE9BQWpCLENBQXlCYixJQUF6QixDQUE4QixJQUE5QixFQUFvQ0YsTUFBcEM7QUFDQUcsZUFBT2EsbUJBQVAsQ0FBMkIsWUFBM0IsRUFBeUMsS0FBS1gsU0FBOUM7QUFDSCxLQUhEO0FBSUEsV0FBT1AsbUJBQVA7QUFDSCxDQWxCMEIsQ0FrQnpCRCxzQkFBc0JvQixvQkFsQkcsQ0FBM0I7QUFtQkF4QixRQUFRSyxtQkFBUixHQUE4QkEsbUJBQTlCO0FBQ0EiLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAaW50ZXJuYWxhcGlcbiAqIEBtb2R1bGUgdmFuaWxsYVxuICovXG4vKiogKi9cbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgYmFzZUxvY2F0aW9uU2VydmljZV8xID0gcmVxdWlyZShcIi4vYmFzZUxvY2F0aW9uU2VydmljZVwiKTtcbi8qKiBBIGBMb2NhdGlvblNlcnZpY2VzYCB0aGF0IHVzZXMgdGhlIGJyb3dzZXIgaGFzaCBcIiNcIiB0byBnZXQvc2V0IHRoZSBjdXJyZW50IGxvY2F0aW9uICovXG52YXIgSGFzaExvY2F0aW9uU2VydmljZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEhhc2hMb2NhdGlvblNlcnZpY2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSGFzaExvY2F0aW9uU2VydmljZShyb3V0ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcm91dGVyLCBmYWxzZSkgfHwgdGhpcztcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBfdGhpcy5fbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBIYXNoTG9jYXRpb25TZXJ2aWNlLnByb3RvdHlwZS5fZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdXRpbHNfMS50cmltSGFzaFZhbCh0aGlzLl9sb2NhdGlvbi5oYXNoKTtcbiAgICB9O1xuICAgIEhhc2hMb2NhdGlvblNlcnZpY2UucHJvdG90eXBlLl9zZXQgPSBmdW5jdGlvbiAoc3RhdGUsIHRpdGxlLCB1cmwsIHJlcGxhY2UpIHtcbiAgICAgICAgdGhpcy5fbG9jYXRpb24uaGFzaCA9IHVybDtcbiAgICB9O1xuICAgIEhhc2hMb2NhdGlvblNlcnZpY2UucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAocm91dGVyKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMsIHJvdXRlcik7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgdGhpcy5fbGlzdGVuZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIEhhc2hMb2NhdGlvblNlcnZpY2U7XG59KGJhc2VMb2NhdGlvblNlcnZpY2VfMS5CYXNlTG9jYXRpb25TZXJ2aWNlcykpO1xuZXhwb3J0cy5IYXNoTG9jYXRpb25TZXJ2aWNlID0gSGFzaExvY2F0aW9uU2VydmljZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2hMb2NhdGlvblNlcnZpY2UuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi92YW5pbGxhL2hhc2hMb2NhdGlvblNlcnZpY2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///50\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar __extends = undefined && undefined.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar baseLocationService_1 = __webpack_require__(21);\n/** A `LocationServices` that gets/sets the current location from an in-memory object */\nvar MemoryLocationService = function (_super) {\n    __extends(MemoryLocationService, _super);\n    function MemoryLocationService(router) {\n        return _super.call(this, router, true) || this;\n    }\n    MemoryLocationService.prototype._get = function () {\n        return this._url;\n    };\n    MemoryLocationService.prototype._set = function (state, title, url, replace) {\n        this._url = url;\n    };\n    return MemoryLocationService;\n}(baseLocationService_1.BaseLocationServices);\nexports.MemoryLocationService = MemoryLocationService;\n//# sourceMappingURL=memoryLocationService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvbWVtb3J5TG9jYXRpb25TZXJ2aWNlLmpzPzE2OTgiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiZXh0ZW5kU3RhdGljcyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJkIiwiYiIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImJhc2VMb2NhdGlvblNlcnZpY2VfMSIsInJlcXVpcmUiLCJNZW1vcnlMb2NhdGlvblNlcnZpY2UiLCJfc3VwZXIiLCJyb3V0ZXIiLCJjYWxsIiwiX2dldCIsIl91cmwiLCJfc2V0Iiwic3RhdGUiLCJ0aXRsZSIsInVybCIsInJlcGxhY2UiLCJCYXNlTG9jYXRpb25TZXJ2aWNlcyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsWUFBYSxhQUFRLFVBQUtBLFNBQWQsSUFBNkIsWUFBWTtBQUNyRCxRQUFJQyxnQkFBZ0JDLE9BQU9DLGNBQVAsSUFDZixFQUFFQyxXQUFXLEVBQWIsY0FBNkJDLEtBQTdCLElBQXNDLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUFFRCxVQUFFRixTQUFGLEdBQWNHLENBQWQ7QUFBa0IsS0FEM0QsSUFFaEIsVUFBVUQsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQUUsYUFBSyxJQUFJQyxDQUFULElBQWNELENBQWQ7QUFBaUIsZ0JBQUlBLEVBQUVFLGNBQUYsQ0FBaUJELENBQWpCLENBQUosRUFBeUJGLEVBQUVFLENBQUYsSUFBT0QsRUFBRUMsQ0FBRixDQUFQO0FBQTFDO0FBQXdELEtBRjlFO0FBR0EsV0FBTyxVQUFVRixDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDbkJOLHNCQUFjSyxDQUFkLEVBQWlCQyxDQUFqQjtBQUNBLGlCQUFTRyxFQUFULEdBQWM7QUFBRSxpQkFBS0MsV0FBTCxHQUFtQkwsQ0FBbkI7QUFBdUI7QUFDdkNBLFVBQUVNLFNBQUYsR0FBY0wsTUFBTSxJQUFOLEdBQWFMLE9BQU9XLE1BQVAsQ0FBY04sQ0FBZCxDQUFiLElBQWlDRyxHQUFHRSxTQUFILEdBQWVMLEVBQUVLLFNBQWpCLEVBQTRCLElBQUlGLEVBQUosRUFBN0QsQ0FBZDtBQUNILEtBSkQ7QUFLSCxDQVQyQyxFQUE1QztBQVVBUixPQUFPWSxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQTs7OztBQUlBO0FBQ0EsSUFBSUMsd0JBQXdCLG1CQUFBQyxDQUFRLEVBQVIsQ0FBNUI7QUFDQTtBQUNBLElBQUlDLHdCQUF5QixVQUFVQyxNQUFWLEVBQWtCO0FBQzNDcEIsY0FBVW1CLHFCQUFWLEVBQWlDQyxNQUFqQztBQUNBLGFBQVNELHFCQUFULENBQStCRSxNQUEvQixFQUF1QztBQUNuQyxlQUFPRCxPQUFPRSxJQUFQLENBQVksSUFBWixFQUFrQkQsTUFBbEIsRUFBMEIsSUFBMUIsS0FBbUMsSUFBMUM7QUFDSDtBQUNERiwwQkFBc0JQLFNBQXRCLENBQWdDVyxJQUFoQyxHQUF1QyxZQUFZO0FBQy9DLGVBQU8sS0FBS0MsSUFBWjtBQUNILEtBRkQ7QUFHQUwsMEJBQXNCUCxTQUF0QixDQUFnQ2EsSUFBaEMsR0FBdUMsVUFBVUMsS0FBVixFQUFpQkMsS0FBakIsRUFBd0JDLEdBQXhCLEVBQTZCQyxPQUE3QixFQUFzQztBQUN6RSxhQUFLTCxJQUFMLEdBQVlJLEdBQVo7QUFDSCxLQUZEO0FBR0EsV0FBT1QscUJBQVA7QUFDSCxDQVo0QixDQVkzQkYsc0JBQXNCYSxvQkFaSyxDQUE3QjtBQWFBZixRQUFRSSxxQkFBUixHQUFnQ0EscUJBQWhDO0FBQ0EiLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAaW50ZXJuYWxhcGlcbiAqIEBtb2R1bGUgdmFuaWxsYVxuICovXG4vKiogKi9cbnZhciBiYXNlTG9jYXRpb25TZXJ2aWNlXzEgPSByZXF1aXJlKFwiLi9iYXNlTG9jYXRpb25TZXJ2aWNlXCIpO1xuLyoqIEEgYExvY2F0aW9uU2VydmljZXNgIHRoYXQgZ2V0cy9zZXRzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGZyb20gYW4gaW4tbWVtb3J5IG9iamVjdCAqL1xudmFyIE1lbW9yeUxvY2F0aW9uU2VydmljZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1lbW9yeUxvY2F0aW9uU2VydmljZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNZW1vcnlMb2NhdGlvblNlcnZpY2Uocm91dGVyKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCByb3V0ZXIsIHRydWUpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1lbW9yeUxvY2F0aW9uU2VydmljZS5wcm90b3R5cGUuX2dldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VybDtcbiAgICB9O1xuICAgIE1lbW9yeUxvY2F0aW9uU2VydmljZS5wcm90b3R5cGUuX3NldCA9IGZ1bmN0aW9uIChzdGF0ZSwgdGl0bGUsIHVybCwgcmVwbGFjZSkge1xuICAgICAgICB0aGlzLl91cmwgPSB1cmw7XG4gICAgfTtcbiAgICByZXR1cm4gTWVtb3J5TG9jYXRpb25TZXJ2aWNlO1xufShiYXNlTG9jYXRpb25TZXJ2aWNlXzEuQmFzZUxvY2F0aW9uU2VydmljZXMpKTtcbmV4cG9ydHMuTWVtb3J5TG9jYXRpb25TZXJ2aWNlID0gTWVtb3J5TG9jYXRpb25TZXJ2aWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVtb3J5TG9jYXRpb25TZXJ2aWNlLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvdmFuaWxsYS9tZW1vcnlMb2NhdGlvblNlcnZpY2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///51\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar __extends = undefined && undefined.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar utils_1 = __webpack_require__(14);\nvar baseLocationService_1 = __webpack_require__(21);\n/**\n * A `LocationServices` that gets/sets the current location using the browser\'s `location` and `history` apis\n *\n * Uses `history.pushState` and `history.replaceState`\n */\nvar PushStateLocationService = function (_super) {\n    __extends(PushStateLocationService, _super);\n    function PushStateLocationService(router) {\n        var _this = _super.call(this, router, true) || this;\n        _this._config = router.urlService.config;\n        window.addEventListener("popstate", _this._listener, false);\n        return _this;\n    }\n    ;\n    PushStateLocationService.prototype._get = function () {\n        var _a = this._location,\n            pathname = _a.pathname,\n            hash = _a.hash,\n            search = _a.search;\n        search = utils_1.splitQuery(search)[1]; // strip ? if found\n        hash = utils_1.splitHash(hash)[1]; // strip # if found\n        return pathname + (search ? "?" + search : "") + (hash ? "$" + search : "");\n    };\n    PushStateLocationService.prototype._set = function (state, title, url, replace) {\n        var _a = this,\n            _config = _a._config,\n            _history = _a._history;\n        var fullUrl = _config.baseHref() + url;\n        if (replace) {\n            _history.replaceState(state, title, fullUrl);\n        } else {\n            _history.pushState(state, title, fullUrl);\n        }\n    };\n    PushStateLocationService.prototype.dispose = function (router) {\n        _super.prototype.dispose.call(this, router);\n        window.removeEventListener("popstate", this._listener);\n    };\n    return PushStateLocationService;\n}(baseLocationService_1.BaseLocationServices);\nexports.PushStateLocationService = PushStateLocationService;\n//# sourceMappingURL=pushStateLocationService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvcHVzaFN0YXRlTG9jYXRpb25TZXJ2aWNlLmpzPzE0MGMiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiZXh0ZW5kU3RhdGljcyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJkIiwiYiIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInV0aWxzXzEiLCJyZXF1aXJlIiwiYmFzZUxvY2F0aW9uU2VydmljZV8xIiwiUHVzaFN0YXRlTG9jYXRpb25TZXJ2aWNlIiwiX3N1cGVyIiwicm91dGVyIiwiX3RoaXMiLCJjYWxsIiwiX2NvbmZpZyIsInVybFNlcnZpY2UiLCJjb25maWciLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiX2xpc3RlbmVyIiwiX2dldCIsIl9hIiwiX2xvY2F0aW9uIiwicGF0aG5hbWUiLCJoYXNoIiwic2VhcmNoIiwic3BsaXRRdWVyeSIsInNwbGl0SGFzaCIsIl9zZXQiLCJzdGF0ZSIsInRpdGxlIiwidXJsIiwicmVwbGFjZSIsIl9oaXN0b3J5IiwiZnVsbFVybCIsImJhc2VIcmVmIiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZGlzcG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJCYXNlTG9jYXRpb25TZXJ2aWNlcyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsWUFBYSxhQUFRLFVBQUtBLFNBQWQsSUFBNkIsWUFBWTtBQUNyRCxRQUFJQyxnQkFBZ0JDLE9BQU9DLGNBQVAsSUFDZixFQUFFQyxXQUFXLEVBQWIsY0FBNkJDLEtBQTdCLElBQXNDLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUFFRCxVQUFFRixTQUFGLEdBQWNHLENBQWQ7QUFBa0Is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akIsQ0FBeUJ6QixJQUF6QixDQUE4QixJQUE5QixFQUFvQ0YsTUFBcEM7QUFDQU0sZUFBT3NCLG1CQUFQLENBQTJCLFVBQTNCLEVBQXVDLEtBQUtwQixTQUE1QztBQUNILEtBSEQ7QUFJQSxXQUFPVix3QkFBUDtBQUNILENBOUIrQixDQThCOUJELHNCQUFzQmdDLG9CQTlCUSxDQUFoQztBQStCQXBDLFFBQVFLLHdCQUFSLEdBQW1DQSx3QkFBbkM7QUFDQSIsImZpbGUiOiI1Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xudmFyIGJhc2VMb2NhdGlvblNlcnZpY2VfMSA9IHJlcXVpcmUoXCIuL2Jhc2VMb2NhdGlvblNlcnZpY2VcIik7XG4vKipcbiAqIEEgYExvY2F0aW9uU2VydmljZXNgIHRoYXQgZ2V0cy9zZXRzIHRoZSBjdXJyZW50IGxvY2F0aW9uIHVzaW5nIHRoZSBicm93c2VyJ3MgYGxvY2F0aW9uYCBhbmQgYGhpc3RvcnlgIGFwaXNcbiAqXG4gKiBVc2VzIGBoaXN0b3J5LnB1c2hTdGF0ZWAgYW5kIGBoaXN0b3J5LnJlcGxhY2VTdGF0ZWBcbiAqL1xudmFyIFB1c2hTdGF0ZUxvY2F0aW9uU2VydmljZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFB1c2hTdGF0ZUxvY2F0aW9uU2VydmljZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQdXNoU3RhdGVMb2NhdGlvblNlcnZpY2Uocm91dGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHJvdXRlciwgdHJ1ZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2NvbmZpZyA9IHJvdXRlci51cmxTZXJ2aWNlLmNvbmZpZztcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCBfdGhpcy5fbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICA7XG4gICAgUHVzaFN0YXRlTG9jYXRpb25TZXJ2aWNlLnByb3RvdHlwZS5fZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLl9sb2NhdGlvbiwgcGF0aG5hbWUgPSBfYS5wYXRobmFtZSwgaGFzaCA9IF9hLmhhc2gsIHNlYXJjaCA9IF9hLnNlYXJjaDtcbiAgICAgICAgc2VhcmNoID0gdXRpbHNfMS5zcGxpdFF1ZXJ5KHNlYXJjaClbMV07IC8vIHN0cmlwID8gaWYgZm91bmRcbiAgICAgICAgaGFzaCA9IHV0aWxzXzEuc3BsaXRIYXNoKGhhc2gpWzFdOyAvLyBzdHJpcCAjIGlmIGZvdW5kXG4gICAgICAgIHJldHVybiBwYXRobmFtZSArIChzZWFyY2ggPyBcIj9cIiArIHNlYXJjaCA6IFwiXCIpICsgKGhhc2ggPyBcIiRcIiArIHNlYXJjaCA6IFwiXCIpO1xuICAgIH07XG4gICAgUHVzaFN0YXRlTG9jYXRpb25TZXJ2aWNlLnByb3RvdHlwZS5fc2V0ID0gZnVuY3Rpb24gKHN0YXRlLCB0aXRsZSwgdXJsLCByZXBsYWNlKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9jb25maWcgPSBfYS5fY29uZmlnLCBfaGlzdG9yeSA9IF9hLl9oaXN0b3J5O1xuICAgICAgICB2YXIgZnVsbFVybCA9IF9jb25maWcuYmFzZUhyZWYoKSArIHVybDtcbiAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIF9oaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZSwgdGl0bGUsIGZ1bGxVcmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX2hpc3RvcnkucHVzaFN0YXRlKHN0YXRlLCB0aXRsZSwgZnVsbFVybCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFB1c2hTdGF0ZUxvY2F0aW9uU2VydmljZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIChyb3V0ZXIpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcywgcm91dGVyKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCB0aGlzLl9saXN0ZW5lcik7XG4gICAgfTtcbiAgICByZXR1cm4gUHVzaFN0YXRlTG9jYXRpb25TZXJ2aWNlO1xufShiYXNlTG9jYXRpb25TZXJ2aWNlXzEuQmFzZUxvY2F0aW9uU2VydmljZXMpKTtcbmV4cG9ydHMuUHVzaFN0YXRlTG9jYXRpb25TZXJ2aWNlID0gUHVzaFN0YXRlTG9jYXRpb25TZXJ2aWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVzaFN0YXRlTG9jYXRpb25TZXJ2aWNlLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvdmFuaWxsYS9wdXNoU3RhdGVMb2NhdGlvblNlcnZpY2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///52\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar predicates_1 = __webpack_require__(1);\nvar common_1 = __webpack_require__(0);\n/** A `LocationConfig` mock that gets/sets all config from an in-memory object */\nvar MemoryLocationConfig = function () {\n    function MemoryLocationConfig() {\n        var _this = this;\n        this._baseHref = \'\';\n        this._port = 80;\n        this._protocol = "http";\n        this._host = "localhost";\n        this._hashPrefix = "";\n        this.port = function () {\n            return _this._port;\n        };\n        this.protocol = function () {\n            return _this._protocol;\n        };\n        this.host = function () {\n            return _this._host;\n        };\n        this.baseHref = function () {\n            return _this._baseHref;\n        };\n        this.html5Mode = function () {\n            return false;\n        };\n        this.hashPrefix = function (newval) {\n            return predicates_1.isDefined(newval) ? _this._hashPrefix = newval : _this._hashPrefix;\n        };\n        this.dispose = common_1.noop;\n    }\n    return MemoryLocationConfig;\n}();\nexports.MemoryLocationConfig = MemoryLocationConfig;\n//# sourceMappingURL=memoryLocationConfig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvbWVtb3J5TG9jYXRpb25Db25maWcuanM/ZDBkNyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInByZWRpY2F0ZXNfMSIsInJlcXVpcmUiLCJjb21tb25fMSIsIk1lbW9yeUxvY2F0aW9uQ29uZmlnIiwiX3RoaXMiLCJfYmFzZUhyZWYiLCJfcG9ydCIsIl9wcm90b2NvbCIsIl9ob3N0IiwiX2hhc2hQcmVmaXgiLCJwb3J0IiwicHJvdG9jb2wiLCJob3N0IiwiYmFzZUhyZWYiLCJodG1sNU1vZGUiLCJoYXNoUHJlZml4IiwibmV3dmFsIiwiaXNEZWZpbmVkIiwiZGlzcG9zZSIsIm5vb3AiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQSxJQUFJQyxlQUFlLG1CQUFBQyxDQUFRLENBQVIsQ0FBbkI7QUFDQSxJQUFJQyxXQUFXLG1CQUFBRCxDQUFRLENBQVIsQ0FBZjtBQUNBO0FBQ0EsSUFBSUUsdUJBQXdCLFlBQVk7QUFDcEMsYUFBU0Esb0JBQVQsR0FBZ0M7QUFDNUIsWUFBSUMsUUFBUSxJQUFaO0FBQ0EsYUFBS0MsU0FBTCxHQUFpQixFQUFqQjtBQUNBLGFBQUtDLEtBQUwsR0FBYSxFQUFiO0FBQ0EsYUFBS0MsU0FBTCxHQUFpQixNQUFqQjtBQUNBLGFBQUtDLEtBQUwsR0FBYSxXQUFiO0FBQ0EsYUFBS0MsV0FBTCxHQUFtQixFQUFuQjtBQUNBLGFBQUtDLElBQUwsR0FBWSxZQUFZO0FBQUUsbUJBQU9OLE1BQU1FLEtBQWI7QUFBcUIsU0FBL0M7QUFDQSxhQUFLSyxRQUFMLEdBQWdCLFlBQVk7QUFBRSxtQkFBT1AsTUFBTUcsU0FBYjtBQUF5QixTQUF2RDtBQUNBLGFBQUtLLElBQUwsR0FBWSxZQUFZO0FBQUUsbUJBQU9SLE1BQU1JLEtBQWI7QUFBcUIsU0FBL0M7QUFDQSxhQUFLSyxRQUFMLEdBQWdCLFlBQVk7QUFBRSxtQkFBT1QsTUFBTUMsU0FBYjtBQUF5QixTQUF2RDtBQUNBLGFBQUtTLFNBQUwsR0FBaUIsWUFBWTtBQUFFLG1CQUFPLEtBQVA7QUFBZSxTQUE5QztBQUNBLGFBQUtDLFVBQUwsR0FBa0IsVUFBVUMsTUFBVixFQUFrQjtBQUFFLG1CQUFPaEIsYUFBYWlCLFNBQWIsQ0FBdUJELE1BQXZCLElBQWlDWixNQUFNSyxXQUFOLEdBQW9CTyxNQUFyRCxHQUE4RFosTUFBTUssV0FBM0U7QUFBeUYsU0FBL0g7QUFDQSxhQUFLUyxPQUFMLEdBQWVoQixTQUFTaUIsSUFBeEI7QUFDSDtBQUNELFdBQU9oQixvQkFBUDtBQUNILENBakIyQixFQUE1QjtBQWtCQUwsUUFBUUssb0JBQVIsR0FBK0JBLG9CQUEvQjtBQUNBIiwiZmlsZSI6IjUzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJlZGljYXRlc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9wcmVkaWNhdGVzXCIpO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb21tb25cIik7XG4vKiogQSBgTG9jYXRpb25Db25maWdgIG1vY2sgdGhhdCBnZXRzL3NldHMgYWxsIGNvbmZpZyBmcm9tIGFuIGluLW1lbW9yeSBvYmplY3QgKi9cbnZhciBNZW1vcnlMb2NhdGlvbkNvbmZpZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWVtb3J5TG9jYXRpb25Db25maWcoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2Jhc2VIcmVmID0gJyc7XG4gICAgICAgIHRoaXMuX3BvcnQgPSA4MDtcbiAgICAgICAgdGhpcy5fcHJvdG9jb2wgPSBcImh0dHBcIjtcbiAgICAgICAgdGhpcy5faG9zdCA9IFwibG9jYWxob3N0XCI7XG4gICAgICAgIHRoaXMuX2hhc2hQcmVmaXggPSBcIlwiO1xuICAgICAgICB0aGlzLnBvcnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fcG9ydDsgfTtcbiAgICAgICAgdGhpcy5wcm90b2NvbCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9wcm90b2NvbDsgfTtcbiAgICAgICAgdGhpcy5ob3N0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2hvc3Q7IH07XG4gICAgICAgIHRoaXMuYmFzZUhyZWYgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fYmFzZUhyZWY7IH07XG4gICAgICAgIHRoaXMuaHRtbDVNb2RlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgICAgIHRoaXMuaGFzaFByZWZpeCA9IGZ1bmN0aW9uIChuZXd2YWwpIHsgcmV0dXJuIHByZWRpY2F0ZXNfMS5pc0RlZmluZWQobmV3dmFsKSA/IF90aGlzLl9oYXNoUHJlZml4ID0gbmV3dmFsIDogX3RoaXMuX2hhc2hQcmVmaXg7IH07XG4gICAgICAgIHRoaXMuZGlzcG9zZSA9IGNvbW1vbl8xLm5vb3A7XG4gICAgfVxuICAgIHJldHVybiBNZW1vcnlMb2NhdGlvbkNvbmZpZztcbn0oKSk7XG5leHBvcnRzLk1lbW9yeUxvY2F0aW9uQ29uZmlnID0gTWVtb3J5TG9jYXRpb25Db25maWc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW1vcnlMb2NhdGlvbkNvbmZpZy5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvbWVtb3J5TG9jYXRpb25Db25maWcuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///53\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar predicates_1 = __webpack_require__(1);\n/** A `LocationConfig` that delegates to the browser\'s `location` object */\nvar BrowserLocationConfig = function () {\n    function BrowserLocationConfig(router, _isHtml5) {\n        if (_isHtml5 === void 0) {\n            _isHtml5 = false;\n        }\n        this._isHtml5 = _isHtml5;\n        this._baseHref = undefined;\n        this._hashPrefix = "";\n    }\n    BrowserLocationConfig.prototype.port = function () {\n        if (location.port) {\n            return Number(location.port);\n        }\n        return this.protocol() === \'https\' ? 443 : 80;\n    };\n    BrowserLocationConfig.prototype.protocol = function () {\n        return location.protocol.replace(/:/g, \'\');\n    };\n    BrowserLocationConfig.prototype.host = function () {\n        return location.host;\n    };\n    BrowserLocationConfig.prototype.html5Mode = function () {\n        return this._isHtml5;\n    };\n    BrowserLocationConfig.prototype.hashPrefix = function (newprefix) {\n        return predicates_1.isDefined(newprefix) ? this._hashPrefix = newprefix : this._hashPrefix;\n    };\n    ;\n    BrowserLocationConfig.prototype.baseHref = function (href) {\n        return predicates_1.isDefined(href) ? this._baseHref = href : this._baseHref || this.applyDocumentBaseHref();\n    };\n    BrowserLocationConfig.prototype.applyDocumentBaseHref = function () {\n        var baseTags = document.getElementsByTagName("base");\n        return this._baseHref = baseTags.length ? baseTags[0].href.substr(location.origin.length) : "";\n    };\n    BrowserLocationConfig.prototype.dispose = function () {};\n    return BrowserLocationConfig;\n}();\nexports.BrowserLocationConfig = BrowserLocationConfig;\n//# sourceMappingURL=browserLocationConfig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvYnJvd3NlckxvY2F0aW9uQ29uZmlnLmpzP2RlYzQiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwcmVkaWNhdGVzXzEiLCJyZXF1aXJlIiwiQnJvd3NlckxvY2F0aW9uQ29uZmlnIiwicm91dGVyIiwiX2lzSHRtbDUiLCJfYmFzZUhyZWYiLCJ1bmRlZmluZWQiLCJfaGFzaFByZWZpeCIsInByb3RvdHlwZSIsInBvcnQiLCJsb2NhdGlvbiIsIk51bWJlciIsInByb3RvY29sIiwicmVwbGFjZSIsImhvc3QiLCJodG1sNU1vZGUiLCJoYXNoUHJlZml4IiwibmV3cHJlZml4IiwiaXNEZWZpbmVkIiwiYmFzZUhyZWYiLCJocmVmIiwiYXBwbHlEb2N1bWVudEJhc2VIcmVmIiwiYmFzZVRhZ3MiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGVuZ3RoIiwic3Vic3RyIiwib3JpZ2luIiwiZGlzcG9zZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBOzs7O0FBSUE7QUFDQSxJQUFJQyxlQUFlLG1CQUFBQyxDQUFRLENBQVIsQ0FBbkI7QUFDQTtBQUNBLElBQUlDLHdCQUF5QixZQUFZO0FBQ3JDLGFBQVNBLHFCQUFULENBQStCQyxNQUEvQixFQUF1Q0MsUUFBdkMsRUFBaUQ7QUFDN0MsWUFBSUEsYUFBYSxLQUFLLENBQXRCLEVBQXlCO0FBQUVBLHVCQUFXLEtBQVg7QUFBbUI7QUFDOUMsYUFBS0EsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxhQUFLQyxTQUFMLEdBQWlCQyxTQUFqQjtBQUNBLGFBQUtDLFdBQUwsR0FBbUIsRUFBbkI7QUFDSDtBQUNETCwwQkFBc0JNLFNBQXRCLENBQWdDQyxJQUFoQyxHQUF1QyxZQUFZO0FBQy9DLFlBQUlDLFNBQVNELElBQWIsRUFBbUI7QUFDZixtQkFBT0UsT0FBT0QsU0FBU0QsSUFBaEIsQ0FBUDtBQUNIO0FBQ0QsZUFBTyxLQUFLRyxRQUFMLE9BQW9CLE9BQXBCLEdBQThCLEdBQTlCLEdBQW9DLEVBQTNDO0FBQ0gsS0FMRDtBQU1BViwwQkFBc0JNLFNBQXRCLENBQWdDSSxRQUFoQyxHQUEyQyxZQUFZO0FBQ25ELGVBQU9GLFNBQVNFLFFBQVQsQ0FBa0JDLE9BQWxCLENBQTBCLElBQTFCLEVBQWdDLEVBQWhDLENBQVA7QUFDSCxLQUZEO0FBR0FYLDBCQUFzQk0sU0FBdEIsQ0FBZ0NNLElBQWhDLEdBQXVDLFlBQVk7QUFDL0MsZUFBT0osU0FBU0ksSUFBaEI7QUFDSCxLQUZEO0FBR0FaLDBCQUFzQk0sU0FBdEIsQ0FBZ0NPLFNBQWhDLEdBQTRDLFlBQVk7QUFDcEQsZUFBTyxLQUFLWCxRQUFaO0FBQ0gsS0FGRDtBQUdBRiwwQkFBc0JNLFNBQXRCLENBQWdDUSxVQUFoQyxHQUE2QyxVQUFVQyxTQUFWLEVBQXFCO0FBQzlELGVBQU9qQixhQUFha0IsU0FBYixDQUF1QkQsU0FBdkIsSUFBb0MsS0FBS1YsV0FBTCxHQUFtQlUsU0FBdkQsR0FBbUUsS0FBS1YsV0FBL0U7QUFDSCxLQUZEO0FBR0E7QUFDQUwsMEJBQXNCTSxTQUF0QixDQUFnQ1csUUFBaEMsR0FBMkMsVUFBVUMsSUFBVixFQUFnQjtBQUN2RCxlQUFPcEIsYUFBYWtCLFNBQWIsQ0FBdUJFLElBQXZCLElBQStCLEtBQUtmLFNBQUwsR0FBaUJlLElBQWhELEdBQXVELEtBQUtmLFNBQUwsSUFBa0IsS0FBS2dCLHFCQUFMLEVBQWhGO0FBQ0gsS0FGRDtBQUdBbkIsMEJBQXNCTSxTQUF0QixDQUFnQ2EscUJBQWhDLEdBQXdELFlBQVk7QUFDaEUsWUFBSUMsV0FBV0MsU0FBU0Msb0JBQVQsQ0FBOEIsTUFBOUIsQ0FBZjtBQUNBLGVBQU8sS0FBS25CLFNBQUwsR0FBaUJpQixTQUFTRyxNQUFULEdBQWtCSCxTQUFTLENBQVQsRUFBWUYsSUFBWixDQUFpQk0sTUFBakIsQ0FBd0JoQixTQUFTaUIsTUFBVCxDQUFnQkYsTUFBeEMsQ0FBbEIsR0FBb0UsRUFBNUY7QUFDSCxLQUhEO0FBSUF2QiwwQkFBc0JNLFNBQXRCLENBQWdDb0IsT0FBaEMsR0FBMEMsWUFBWSxDQUFHLENBQXpEO0FBQ0EsV0FBTzFCLHFCQUFQO0FBQ0gsQ0FuQzRCLEVBQTdCO0FBb0NBSixRQUFRSSxxQkFBUixHQUFnQ0EscUJBQWhDO0FBQ0EiLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGludGVybmFsYXBpXG4gKiBAbW9kdWxlIHZhbmlsbGFcbiAqL1xuLyoqICovXG52YXIgcHJlZGljYXRlc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9wcmVkaWNhdGVzXCIpO1xuLyoqIEEgYExvY2F0aW9uQ29uZmlnYCB0aGF0IGRlbGVnYXRlcyB0byB0aGUgYnJvd3NlcidzIGBsb2NhdGlvbmAgb2JqZWN0ICovXG52YXIgQnJvd3NlckxvY2F0aW9uQ29uZmlnID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCcm93c2VyTG9jYXRpb25Db25maWcocm91dGVyLCBfaXNIdG1sNSkge1xuICAgICAgICBpZiAoX2lzSHRtbDUgPT09IHZvaWQgMCkgeyBfaXNIdG1sNSA9IGZhbHNlOyB9XG4gICAgICAgIHRoaXMuX2lzSHRtbDUgPSBfaXNIdG1sNTtcbiAgICAgICAgdGhpcy5fYmFzZUhyZWYgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2hhc2hQcmVmaXggPSBcIlwiO1xuICAgIH1cbiAgICBCcm93c2VyTG9jYXRpb25Db25maWcucHJvdG90eXBlLnBvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChsb2NhdGlvbi5wb3J0KSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKGxvY2F0aW9uLnBvcnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByb3RvY29sKCkgPT09ICdodHRwcycgPyA0NDMgOiA4MDtcbiAgICB9O1xuICAgIEJyb3dzZXJMb2NhdGlvbkNvbmZpZy5wcm90b3R5cGUucHJvdG9jb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5wcm90b2NvbC5yZXBsYWNlKC86L2csICcnKTtcbiAgICB9O1xuICAgIEJyb3dzZXJMb2NhdGlvbkNvbmZpZy5wcm90b3R5cGUuaG9zdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uLmhvc3Q7XG4gICAgfTtcbiAgICBCcm93c2VyTG9jYXRpb25Db25maWcucHJvdG90eXBlLmh0bWw1TW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzSHRtbDU7XG4gICAgfTtcbiAgICBCcm93c2VyTG9jYXRpb25Db25maWcucHJvdG90eXBlLmhhc2hQcmVmaXggPSBmdW5jdGlvbiAobmV3cHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGVzXzEuaXNEZWZpbmVkKG5ld3ByZWZpeCkgPyB0aGlzLl9oYXNoUHJlZml4ID0gbmV3cHJlZml4IDogdGhpcy5faGFzaFByZWZpeDtcbiAgICB9O1xuICAgIDtcbiAgICBCcm93c2VyTG9jYXRpb25Db25maWcucHJvdG90eXBlLmJhc2VIcmVmID0gZnVuY3Rpb24gKGhyZWYpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZXNfMS5pc0RlZmluZWQoaHJlZikgPyB0aGlzLl9iYXNlSHJlZiA9IGhyZWYgOiB0aGlzLl9iYXNlSHJlZiB8fCB0aGlzLmFwcGx5RG9jdW1lbnRCYXNlSHJlZigpO1xuICAgIH07XG4gICAgQnJvd3NlckxvY2F0aW9uQ29uZmlnLnByb3RvdHlwZS5hcHBseURvY3VtZW50QmFzZUhyZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBiYXNlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYmFzZVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jhc2VIcmVmID0gYmFzZVRhZ3MubGVuZ3RoID8gYmFzZVRhZ3NbMF0uaHJlZi5zdWJzdHIobG9jYXRpb24ub3JpZ2luLmxlbmd0aCkgOiBcIlwiO1xuICAgIH07XG4gICAgQnJvd3NlckxvY2F0aW9uQ29uZmlnLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIHJldHVybiBCcm93c2VyTG9jYXRpb25Db25maWc7XG59KCkpO1xuZXhwb3J0cy5Ccm93c2VyTG9jYXRpb25Db25maWcgPSBCcm93c2VyTG9jYXRpb25Db25maWc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyTG9jYXRpb25Db25maWcuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi92YW5pbGxhL2Jyb3dzZXJMb2NhdGlvbkNvbmZpZy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///54\n')},function(module,exports){eval("module.exports = angular;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhbmd1bGFyXCI/MTFkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gYW5ndWxhcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImFuZ3VsYXJcIlxuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///55\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module ng1 */ /** for typedoc */\nvar core_1 = __webpack_require__(4);\n/**\n * The Angular 1 `StateProvider`\n *\n * The `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\nvar StateProvider = function () {\n    function StateProvider(stateRegistry, stateService) {\n        this.stateRegistry = stateRegistry;\n        this.stateService = stateService;\n        core_1.createProxyFunctions(core_1.val(StateProvider.prototype), this, core_1.val(this));\n    }\n    /**\n     * Decorates states when they are registered\n     *\n     * Allows you to extend (carefully) or override (at your own peril) the\n     * `stateBuilder` object used internally by [[StateRegistry]].\n     * This can be used to add custom functionality to ui-router,\n     * for example inferring templateUrl based on the state name.\n     *\n     * When passing only a name, it returns the current (original or decorated) builder\n     * function that matches `name`.\n     *\n     * The builder functions that can be decorated are listed below. Though not all\n     * necessarily have a good use case for decoration, that is up to you to decide.\n     *\n     * In addition, users can attach custom decorators, which will generate new\n     * properties within the state's internal definition. There is currently no clear\n     * use-case for this beyond accessing internal states (i.e. $state.$current),\n     * however, expect this to become increasingly relevant as we introduce additional\n     * meta-programming features.\n     *\n     * **Warning**: Decorators should not be interdependent because the order of\n     * execution of the builder functions in non-deterministic. Builder functions\n     * should only be dependent on the state definition object and super function.\n     *\n     *\n     * Existing builder functions and current return values:\n     *\n     * - **parent** `{object}` - returns the parent state object.\n     * - **data** `{object}` - returns state data, including any inherited data that is not\n     *   overridden by own values (if any).\n     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n     *   or `null`.\n     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n     *   navigable).\n     * - **params** `{object}` - returns an array of state params that are ensured to\n     *   be a super-set of parent's params.\n     * - **views** `{object}` - returns a views object where each key is an absolute view\n     *   name (i.e. \"viewName@stateName\") and each value is the config object\n     *   (template, controller) for the view. Even when you don't use the views object\n     *   explicitly on a state config, one is still created for you internally.\n     *   So by decorating this builder function you have access to decorating template\n     *   and controller properties.\n     * - **ownParams** `{object}` - returns an array of params that belong to the state,\n     *   not including any params defined by ancestor states.\n     * - **path** `{string}` - returns the full path from the root down to this state.\n     *   Needed for state activation.\n     * - **includes** `{object}` - returns an object that includes every state that\n     *   would pass a `$state.includes()` test.\n     *\n     * #### Example:\n     * Override the internal 'views' builder with a function that takes the state\n     * definition, and a reference to the internal function being overridden:\n     * ```js\n     * $stateProvider.decorator('views', function (state, parent) {\n     *   let result = {},\n     *       views = parent(state);\n     *\n     *   angular.forEach(views, function (config, name) {\n     *     let autoName = (state.name + '.' + name).replace('.', '/');\n     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n     *     result[name] = config;\n     *   });\n     *   return result;\n     * });\n     *\n     * $stateProvider.state('home', {\n     *   views: {\n     *     'contact.list': { controller: 'ListController' },\n     *     'contact.item': { controller: 'ItemController' }\n     *   }\n     * });\n     * ```\n     *\n     *\n     * ```js\n     * // Auto-populates list and item views with /partials/home/contact/list.html,\n     * // and /partials/home/contact/item.html, respectively.\n     * $state.go('home');\n     * ```\n     *\n     * @param {string} name The name of the builder function to decorate.\n     * @param {object} func A function that is responsible for decorating the original\n     * builder function. The function receives two parameters:\n     *\n     *   - `{object}` - state - The state config object.\n     *   - `{object}` - super - The original builder function.\n     *\n     * @return {object} $stateProvider - $stateProvider instance\n     */\n    StateProvider.prototype.decorator = function (name, func) {\n        return this.stateRegistry.decorator(name, func) || this;\n    };\n    StateProvider.prototype.state = function (name, definition) {\n        if (core_1.isObject(name)) {\n            definition = name;\n        } else {\n            definition.name = name;\n        }\n        this.stateRegistry.register(definition);\n        return this;\n    };\n    /**\n     * Registers an invalid state handler\n     *\n     * This is a passthrough to [[StateService.onInvalid]] for ng1.\n     */\n    StateProvider.prototype.onInvalid = function (callback) {\n        return this.stateService.onInvalid(callback);\n    };\n    return StateProvider;\n}();\nexports.StateProvider = StateProvider;\n//# sourceMappingURL=stateProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module url */ /** */\nvar core_1 = __webpack_require__(4);\nvar core_2 = __webpack_require__(4);\n/**\n * Manages rules for client-side URL\n *\n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRulesApi]] which can be found as [[UrlService.rules]].\n *\n * This class manages the router rules for what to do when the URL changes.\n *\n * This provider remains for backwards compatibility.\n *\n * @deprecated\n */\nvar UrlRouterProvider = function () {\n    /** @hidden */\n    function UrlRouterProvider(router) {\n        this._router = router;\n        this._urlRouter = router.urlRouter;\n    }\n    /** @hidden */\n    UrlRouterProvider.prototype.$get = function () {\n        var urlRouter = this._urlRouter;\n        urlRouter.update(true);\n        if (!urlRouter.interceptDeferred) urlRouter.listen();\n        return urlRouter;\n    };\n    /**\n     * Registers a url handler function.\n     *\n     * Registers a low level url handler (a `rule`).\n     * A rule detects specific URL patterns and returns a redirect, or performs some action.\n     *\n     * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\n     *\n     * #### Example:\n     * ```js\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   // Here's an example of how you might allow case insensitive urls\n     *   $urlRouterProvider.rule(function ($injector, $location) {\n     *     var path = $location.path(),\n     *         normalized = path.toLowerCase();\n     *\n     *     if (path !== normalized) {\n     *       return normalized;\n     *     }\n     *   });\n     * });\n     * ```\n     *\n     * @param ruleFn\n     * Handler function that takes `$injector` and `$location` services as arguments.\n     * You can use them to detect a url and return a different url as a string.\n     *\n     * @return [[UrlRouterProvider]] (`this`)\n     */\n    UrlRouterProvider.prototype.rule = function (ruleFn) {\n        var _this = this;\n        if (!core_2.isFunction(ruleFn)) throw new Error(\"'rule' must be a function\");\n        var match = function match() {\n            return ruleFn(core_2.services.$injector, _this._router.locationService);\n        };\n        var rule = new core_1.BaseUrlRule(match, core_2.identity);\n        this._urlRouter.rule(rule);\n        return this;\n    };\n    ;\n    /**\n     * Defines the path or behavior to use when no url can be matched.\n     *\n     * #### Example:\n     * ```js\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   // if the path doesn't match any of the urls you configured\n     *   // otherwise will take care of routing the user to the\n     *   // specified url\n     *   $urlRouterProvider.otherwise('/index');\n     *\n     *   // Example of using function rule as param\n     *   $urlRouterProvider.otherwise(function ($injector, $location) {\n     *     return '/a/valid/url';\n     *   });\n     * });\n     * ```\n     *\n     * @param rule\n     * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.\n     * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\n     *\n     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n     */\n    UrlRouterProvider.prototype.otherwise = function (rule) {\n        var _this = this;\n        var urlRouter = this._urlRouter;\n        if (core_2.isString(rule)) {\n            urlRouter.otherwise(rule);\n        } else if (core_2.isFunction(rule)) {\n            urlRouter.otherwise(function () {\n                return rule(core_2.services.$injector, _this._router.locationService);\n            });\n        } else {\n            throw new Error(\"'rule' must be a string or function\");\n        }\n        return this;\n    };\n    ;\n    /**\n     * Registers a handler for a given url matching.\n     *\n     * If the handler is a string, it is\n     * treated as a redirect, and is interpolated according to the syntax of match\n     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n     *\n     * If the handler is a function, it is injectable.\n     * It gets invoked if `$location` matches.\n     * You have the option of inject the match object as `$match`.\n     *\n     * The handler can return\n     *\n     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n     *   will continue trying to find another one that matches.\n     * - **string** which is treated as a redirect and passed to `$location.url()`\n     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n     *\n     * #### Example:\n     * ```js\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n     *     if ($state.$current.navigable !== state ||\n     *         !equalForKeys($match, $stateParams) {\n     *      $state.transitionTo(state, $match, false);\n     *     }\n     *   });\n     * });\n     * ```\n     *\n     * @param what A pattern string to match, compiled as a [[UrlMatcher]].\n     * @param handler The path (or function that returns a path) that you want to redirect your user to.\n     * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]\n     *\n     * Note: the handler may also invoke arbitrary code, such as `$state.go()`\n     */\n    UrlRouterProvider.prototype.when = function (what, handler) {\n        if (core_2.isArray(handler) || core_2.isFunction(handler)) {\n            handler = UrlRouterProvider.injectableHandler(this._router, handler);\n        }\n        this._urlRouter.when(what, handler);\n        return this;\n    };\n    ;\n    UrlRouterProvider.injectableHandler = function (router, handler) {\n        return function (match) {\n            return core_2.services.$injector.invoke(handler, null, { $match: match, $stateParams: router.globals.params });\n        };\n    };\n    /**\n     * Disables monitoring of the URL.\n     *\n     * Call this method before UI-Router has bootstrapped.\n     * It will stop UI-Router from performing the initial url sync.\n     *\n     * This can be useful to perform some asynchronous initialization before the router starts.\n     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n     *\n     * #### Example:\n     * ```js\n     * var app = angular.module('app', ['ui.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   // Prevent $urlRouter from automatically intercepting URL changes;\n     *   $urlRouterProvider.deferIntercept();\n     * })\n     *\n     * app.run(function (MyService, $urlRouter, $http) {\n     *   $http.get(\"/stuff\").then(function(resp) {\n     *     MyService.doStuff(resp.data);\n     *     $urlRouter.listen();\n     *     $urlRouter.sync();\n     *   });\n     * });\n     * ```\n     *\n     * @param defer Indicates whether to defer location change interception.\n     *        Passing no parameter is equivalent to `true`.\n     */\n    UrlRouterProvider.prototype.deferIntercept = function (defer) {\n        this._urlRouter.deferIntercept(defer);\n    };\n    ;\n    return UrlRouterProvider;\n}();\nexports.UrlRouterProvider = UrlRouterProvider;\n//# sourceMappingURL=urlRouterProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///57\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n__webpack_require__(59);\n\nvar _Home = __webpack_require__(88);\n\nvar _Home2 = _interopRequireDefault(_Home);\n\nvar _Login = __webpack_require__(89);\n\nvar _Login2 = _interopRequireDefault(_Login);\n\nvar _Register = __webpack_require__(90);\n\nvar _Register2 = _interopRequireDefault(_Register);\n\nvar _Login3 = __webpack_require__(91);\n\nvar _Login4 = _interopRequireDefault(_Login3);\n\nvar _TestSuite = __webpack_require__(92);\n\nvar _TestSuite2 = _interopRequireDefault(_TestSuite);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n__webpack_require__(96);\n\nangular.module('touriends', ['ui.router']).controller('HomeCtrl', _Home2.default).controller('LoginCtrl', _Login2.default).controller('RegisterCtrl', _Register2.default).controller('TestSuiteCtrl', _TestSuite2.default).service('LoginSvc', _Login4.default)\n\n// ========== Configs ==========\n.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\n    $stateProvider.state({\n        abstract: true,\n        name: 'authful',\n        resolve: {\n            auth: ['$q', '$state', '$timeout', 'LoginSvc', function ($q, $state, $timeout, LoginSvc) {\n                if (LoginSvc.logged) {\n                    return $q.when();\n                } else {\n                    $timeout(function () {\n                        $state.go('login');\n                    });\n\n                    return $q.reject();\n                }\n            }]\n        }\n    }).state({\n        abstract: true,\n        name: 'authless',\n        resolve: {\n            auth: ['$q', '$state', '$timeout', 'LoginSvc', function ($q, $state, $timeout, LoginSvc) {\n                if (!LoginSvc.logged) {\n                    return $q.when();\n                } else {\n                    $timeout(function () {\n                        $state.go('home');\n                    });\n\n                    return $q.reject();\n                }\n            }]\n        }\n    }).state({\n        url: '/login',\n        name: 'login',\n        parent: 'authless',\n        template: __webpack_require__(97)\n    }).state({\n        url: '/register',\n        name: 'register',\n        parent: 'authless',\n        template: __webpack_require__(99)\n    }).state({\n        url: '/home',\n        name: 'home',\n        parent: 'authful',\n        template: __webpack_require__(100)\n    }).state({\n        url: '/test',\n        name: 'test',\n        template: __webpack_require__(101)\n    });\n\n    $urlRouterProvider.otherwise('/login');\n}]).config(['$httpProvider', function ($httpProvider) {\n    $httpProvider.defaults.paramSerializer = '$httpParamSerializerJQLike';\n}]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLmpzPzdhYzkiXSwibmFtZXMiOlsicmVxdWlyZSIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwic2VydmljZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwic3RhdGUiLCJhYnN0cmFjdCIsIm5hbWUiLCJyZXNvbHZlIiwiYXV0aCIsIiRxIiwiJHN0YXRlIiwiJHRpbWVvdXQiLCJMb2dpblN2YyIsImxvZ2dlZCIsIndoZW4iLCJnbyIsInJlamVjdCIsInVybCIsInBhcmVudCIsInRlbXBsYXRlIiwib3RoZXJ3aXNlIiwiJGh0dHBQcm92aWRlciIsImRlZmF1bHRzIiwicGFyYW1TZXJpYWxpemVyIl0sIm1hcHBpbmdzIjoiOztBQUVBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7OztBQVJBLG1CQUFBQSxDQUFRLEVBQVI7O0FBVUFDLFFBQ0tDLE1BREwsQ0FDWSxXQURaLEVBQ3lCLENBQUMsV0FBRCxDQUR6QixFQUVLQyxVQUZMLENBRWdCLFVBRmhCLGtCQUdLQSxVQUhMLENBR2dCLFdBSGhCLG1CQUlLQSxVQUpMLENBSWdCLGNBSmhCLHNCQUtLQSxVQUxMLENBS2dCLGVBTGhCLHVCQU1LQyxPQU5MLENBTWEsVUFOYjs7QUFRQTtBQVJBLENBU0tDLE1BVEwsQ0FTWSxDQUFDLGdCQUFELEVBQW1CLG9CQUFuQixFQUF5QyxVQUFDQyxjQUFELEVBQWlCQyxrQkFBakIsRUFBd0M7QUFDckZELG1CQUFlRSxLQUFmLENBQXFCO0FBQ2pCQyxrQkFBVSxJQURPO0FBRWpCQyxjQUFNLFNBRlc7QUFHakJDLGlCQUFTO0FBQ0xDLGtCQUFNLENBQUMsSUFBRCxFQUFPLFFBQVAsRUFBaUIsVUFBakIsRUFBNkIsVUFBN0IsRUFBeUMsVUFBQ0MsRUFBRCxFQUFLQyxNQUFMLEVBQWFDLFFBQWIsRUFBdUJDLFFBQXZCLEVBQW9DO0FBQy9FLG9CQUFJQSxTQUFTQyxNQUFiLEVBQXFCO0FBQ2pCLDJCQUFPSixHQUFHSyxJQUFILEVBQVA7QUFDSCxpQkFGRCxNQUdLO0FBQ0RILDZCQUFTLFlBQU07QUFDWEQsK0JBQU9LLEVBQVAsQ0FBVSxPQUFWO0FBQ0gscUJBRkQ7O0FBSUEsMkJBQU9OLEdBQUdPLE1BQUgsRUFBUDtBQUNIO0FBQ0osYUFYSztBQUREO0FBSFEsS0FBckIsRUFpQkdaLEtBakJILENBaUJTO0FBQ0xDLGtCQUFVLElBREw7QUFFTEMsY0FBTSxVQUZEO0FBR0xDLGlCQUFTO0FBQ0xDLGtCQUFNLENBQUMsSUFBRCxFQUFPLFFBQVAsRUFBaUIsVUFBakIsRUFBNkIsVUFBN0IsRUFBeUMsVUFBQ0MsRUFBRCxFQUFLQyxNQUFMLEVBQWFDLFFBQWIsRUFBdUJDLFFBQXZCLEVBQW9DO0FBQy9FLG9CQUFJLENBQUNBLFNBQVNDLE1BQWQsRUFBc0I7QUFDbEIsMkJBQU9KLEdBQUdLLElBQUgsRUFBUDtBQUNILGlCQUZELE1BR0s7QUFDREgsNkJBQVMsWUFBTTtBQUNYRCwrQkFBT0ssRUFBUCxDQUFVLE1BQVY7QUFDSCxxQkFGRDs7QUFJQSwyQkFBT04sR0FBR08sTUFBSCxFQUFQO0FBQ0g7QUFDSixhQVhLO0FBREQ7QUFISixLQWpCVCxFQWtDR1osS0FsQ0gsQ0FrQ1M7QUFDTGEsYUFBSyxRQURBO0FBRUxYLGNBQU0sT0FGRDtBQUdMWSxnQkFBUSxVQUhIO0FBSUxDLGtCQUFVLG1CQUFBdkIsQ0FBUSxFQUFSO0FBSkwsS0FsQ1QsRUF1Q0dRLEtBdkNILENBdUNTO0FBQ0xhLGFBQUssV0FEQTtBQUVMWCxjQUFNLFVBRkQ7QUFHTFksZ0JBQVEsVUFISDtBQUlMQyxrQkFBVSxtQkFBQXZCLENBQVEsRUFBUjtBQUpMLEtBdkNULEVBNENHUSxLQTVDSCxDQTRDUztBQUNMYSxhQUFLLE9BREE7QUFFTFgsY0FBTSxNQUZEO0FBR0xZLGdCQUFRLFNBSEg7QUFJTEMsa0JBQVUsbUJBQUF2QixDQUFRLEdBQVI7QUFKTCxLQTVDVCxFQWlER1EsS0FqREgsQ0FpRFM7QUFDTGEsYUFBSyxPQURBO0FBRUxYLGNBQU0sTUFGRDtBQUdMYSxrQkFBVSxtQkFBQXZCLENBQVEsR0FBUjtBQUhMLEtBakRUOztBQXVEQU8sdUJBQW1CaUIsU0FBbkIsQ0FBNkIsUUFBN0I7QUFDSCxDQXpETyxDQVRaLEVBbUVLbkIsTUFuRUwsQ0FtRVksQ0FBQyxlQUFELEVBQWtCLFVBQUNvQixhQUFELEVBQW1CO0FBQ3pDQSxrQkFBY0MsUUFBZCxDQUF1QkMsZUFBdkIsR0FBeUMsNEJBQXpDO0FBQ0gsQ0FGTyxDQW5FWiIsImZpbGUiOiI1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vc3R5bGUvaW5kZXgubGVzcycpO1xyXG5cclxuaW1wb3J0ICdhbmd1bGFyLXVpLXJvdXRlcic7XHJcbmltcG9ydCBIb21lQ3RybCBmcm9tICcuL2NvbnRyb2xsZXIvSG9tZSc7XHJcbmltcG9ydCBMb2dpbkN0cmwgZnJvbSAnLi9jb250cm9sbGVyL0xvZ2luJztcclxuaW1wb3J0IFJlZ2lzdGVyQ3RybCBmcm9tICcuL2NvbnRyb2xsZXIvUmVnaXN0ZXInO1xyXG5pbXBvcnQgTG9naW5TdmMgZnJvbSAnLi9zZXJ2aWNlL0xvZ2luJztcclxuXHJcbmltcG9ydCBUZXN0U3VpdGVDdHJsIGZyb20gJy4vY29udHJvbGxlci9UZXN0U3VpdGUnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgndG91cmllbmRzJywgWyd1aS5yb3V0ZXInXSlcclxuICAgIC5jb250cm9sbGVyKCdIb21lQ3RybCcsIEhvbWVDdHJsKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIExvZ2luQ3RybClcclxuICAgIC5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBSZWdpc3RlckN0cmwpXHJcbiAgICAuY29udHJvbGxlcignVGVzdFN1aXRlQ3RybCcsIFRlc3RTdWl0ZUN0cmwpXHJcbiAgICAuc2VydmljZSgnTG9naW5TdmMnLCBMb2dpblN2YylcclxuXHJcbi8vID09PT09PT09PT0gQ29uZmlncyA9PT09PT09PT09XHJcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJywgKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpID0+IHtcclxuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSh7XHJcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxyXG4gICAgICAgICAgICBuYW1lOiAnYXV0aGZ1bCcsXHJcbiAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgIGF1dGg6IFsnJHEnLCAnJHN0YXRlJywgJyR0aW1lb3V0JywgJ0xvZ2luU3ZjJywgKCRxLCAkc3RhdGUsICR0aW1lb3V0LCBMb2dpblN2YykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChMb2dpblN2Yy5sb2dnZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLndoZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnbG9naW4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLnN0YXRlKHtcclxuICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXHJcbiAgICAgICAgICAgIG5hbWU6ICdhdXRobGVzcycsXHJcbiAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgIGF1dGg6IFsnJHEnLCAnJHN0YXRlJywgJyR0aW1lb3V0JywgJ0xvZ2luU3ZjJywgKCRxLCAkc3RhdGUsICR0aW1lb3V0LCBMb2dpblN2YykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghTG9naW5TdmMubG9nZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS53aGVuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLnN0YXRlKHtcclxuICAgICAgICAgICAgdXJsOiAnL2xvZ2luJyxcclxuICAgICAgICAgICAgbmFtZTogJ2xvZ2luJyxcclxuICAgICAgICAgICAgcGFyZW50OiAnYXV0aGxlc3MnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi90ZW1wbGF0ZS9sb2dpbi5odG1sJylcclxuICAgICAgICB9KS5zdGF0ZSh7XHJcbiAgICAgICAgICAgIHVybDogJy9yZWdpc3RlcicsXHJcbiAgICAgICAgICAgIG5hbWU6ICdyZWdpc3RlcicsXHJcbiAgICAgICAgICAgIHBhcmVudDogJ2F1dGhsZXNzJyxcclxuICAgICAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vdGVtcGxhdGUvcmVnaXN0ZXIuaHRtbCcpXHJcbiAgICAgICAgfSkuc3RhdGUoe1xyXG4gICAgICAgICAgICB1cmw6ICcvaG9tZScsXHJcbiAgICAgICAgICAgIG5hbWU6ICdob21lJyxcclxuICAgICAgICAgICAgcGFyZW50OiAnYXV0aGZ1bCcsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3RlbXBsYXRlL2hvbWUuaHRtbCcpXHJcbiAgICAgICAgfSkuc3RhdGUoe1xyXG4gICAgICAgICAgICB1cmw6ICcvdGVzdCcsXHJcbiAgICAgICAgICAgIG5hbWU6ICd0ZXN0JyxcclxuICAgICAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vdGVtcGxhdGUvdGVzdC5odG1sJylcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2xvZ2luJyk7XHJcbiAgICB9XSlcclxuICAgIC5jb25maWcoWyckaHR0cFByb3ZpZGVyJywgKCRodHRwUHJvdmlkZXIpID0+IHtcclxuICAgICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnBhcmFtU2VyaWFsaXplciA9ICckaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSc7XHJcbiAgICB9XSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2FwcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///58\n")},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * Main entry point for angular 1.x build\n * @module ng1\n */ /** */\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\nvar core = __webpack_require__(4);\nexports.core = core;\n__export(__webpack_require__(4));\n__export(__webpack_require__(28));\n__export(__webpack_require__(29));\n__export(__webpack_require__(56));\n__export(__webpack_require__(57));\n__webpack_require__(83);\n__webpack_require__(84);\n__webpack_require__(85);\n__webpack_require__(86);\n__webpack_require__(87);\nexports.default = "ui.router";\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5ndWxhci11aS1yb3V0ZXIvbGliL2luZGV4LmpzPzNjOTEiXSwibmFtZXMiOlsiX19leHBvcnQiLCJtIiwicCIsImV4cG9ydHMiLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjb3JlIiwicmVxdWlyZSIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztJQUdJOztBQUNKLFNBQVNBLFFBQVQsQ0FBa0JDLENBQWxCLEVBQXFCO0FBQ2pCLE9BQUssSUFBSUMsQ0FBVCxJQUFjRCxDQUFkO0FBQWlCLFFBQUksQ0FBQ0UsUUFBUUMsY0FBUixDQUF1QkYsQ0FBdkIsQ0FBTCxFQUFnQ0MsUUFBUUQsQ0FBUixJQUFhRCxFQUFFQyxDQUFGLENBQWI7QUFBakQ7QUFDSDtBQUNERyxPQUFPQyxjQUFQLENBQXNCSCxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFSSxPQUFPLElBQVQsRUFBN0M7QUFDQSxJQUFJQyxPQUFPLG1CQUFBQyxDQUFRLENBQVIsQ0FBWDtBQUNBTixRQUFRSyxJQUFSLEdBQWVBLElBQWY7QUFDQVIsU0FBUyxtQkFBQVMsQ0FBUSxDQUFSLENBQVQ7QUFDQVQsU0FBUyxtQkFBQVMsQ0FBUSxFQUFSLENBQVQ7QUFDQVQsU0FBUyxtQkFBQVMsQ0FBUSxFQUFSLENBQVQ7QUFDQVQsU0FBUyxtQkFBQVMsQ0FBUSxFQUFSLENBQVQ7QUFDQVQsU0FBUyxtQkFBQVMsQ0FBUSxFQUFSLENBQVQ7QUFDQSxtQkFBQUEsQ0FBUSxFQUFSO0FBQ0EsbUJBQUFBLENBQVEsRUFBUjtBQUNBLG1CQUFBQSxDQUFRLEVBQVI7QUFDQSxtQkFBQUEsQ0FBUSxFQUFSO0FBQ0EsbUJBQUFBLENBQVEsRUFBUjtBQUNBTixRQUFRTyxPQUFSLEdBQWtCLFdBQWxCO0FBQ0EiLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogTWFpbiBlbnRyeSBwb2ludCBmb3IgYW5ndWxhciAxLnggYnVpbGRcbiAqIEBtb2R1bGUgbmcxXG4gKi8gLyoqICovXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvcmUgPSByZXF1aXJlKFwiQHVpcm91dGVyL2NvcmVcIik7XG5leHBvcnRzLmNvcmUgPSBjb3JlO1xuX19leHBvcnQocmVxdWlyZShcIkB1aXJvdXRlci9jb3JlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NlcnZpY2VzXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3N0YXRlYnVpbGRlcnMvdmlld3NcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3RhdGVQcm92aWRlclwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi91cmxSb3V0ZXJQcm92aWRlclwiKSk7XG5yZXF1aXJlKFwiLi9pbmplY3RhYmxlc1wiKTtcbnJlcXVpcmUoXCIuL2RpcmVjdGl2ZXMvc3RhdGVEaXJlY3RpdmVzXCIpO1xucmVxdWlyZShcIi4vc3RhdGVGaWx0ZXJzXCIpO1xucmVxdWlyZShcIi4vZGlyZWN0aXZlcy92aWV3RGlyZWN0aXZlXCIpO1xucmVxdWlyZShcIi4vdmlld1Njcm9sbFwiKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFwidWkucm91dGVyXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvYW5ndWxhci11aS1yb3V0ZXIvbGliL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///59\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction __export(m) {\n    for (var p in m) {\n        if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n__export(__webpack_require__(9));\n__export(__webpack_require__(32));\n__export(__webpack_require__(33));\n__export(__webpack_require__(26));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3BhcmFtcy9pbmRleC5qcz85OWIyIl0sIm5hbWVzIjpbIl9fZXhwb3J0IiwibSIsInAiLCJleHBvcnRzIiwiaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsU0FBU0EsUUFBVCxDQUFrQkMsQ0FBbEIsRUFBcUI7QUFDakIsU0FBSyxJQUFJQyxDQUFULElBQWNELENBQWQ7QUFBaUIsWUFBSSxDQUFDRSxRQUFRQyxjQUFSLENBQXVCRixDQUF2QixDQUFMLEVBQWdDQyxRQUFRRCxDQUFSLElBQWFELEVBQUVDLENBQUYsQ0FBYjtBQUFqRDtBQUNIO0FBQ0RHLE9BQU9DLGNBQVAsQ0FBc0JILE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVJLE9BQU8sSUFBVCxFQUE3QztBQUNBUCxTQUFTLG1CQUFBUSxDQUFRLENBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLEVBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLEVBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLEVBQVIsQ0FBVDtBQUNBIiwiZmlsZSI6IjYwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vcGFyYW1cIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vcGFyYW1UeXBlc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zdGF0ZVBhcmFtc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9wYXJhbVR5cGVcIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi9wYXJhbXMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///60\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction __export(m) {\n    for (var p in m) {\n        if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @module path */ /** for typedoc */\n__export(__webpack_require__(25));\n__export(__webpack_require__(18));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3BhdGgvaW5kZXguanM/MmY4NyJdLCJuYW1lcyI6WyJfX2V4cG9ydCIsIm0iLCJwIiwiZXhwb3J0cyIsImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLFNBQVNBLFFBQVQsQ0FBa0JDLENBQWxCLEVBQXFCO0FBQ2pCLFNBQUssSUFBSUMsQ0FBVCxJQUFjRCxDQUFkO0FBQWlCLFlBQUksQ0FBQ0UsUUFBUUMsY0FBUixDQUF1QkYsQ0FBdkIsQ0FBTCxFQUFnQ0MsUUFBUUQsQ0FBUixJQUFhRCxFQUFFQyxDQUFGLENBQWI7QUFBakQ7QUFDSDtBQUNERyxPQUFPQyxjQUFQLENBQXNCSCxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFSSxPQUFPLElBQVQsRUFBN0M7QUFDQSxtQixDQUFvQjtBQUNwQlAsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQSIsImZpbGUiOiI2MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKiBAbW9kdWxlIHBhdGggKi8gLyoqIGZvciB0eXBlZG9jICovXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9wYXRoTm9kZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9wYXRoRmFjdG9yeVwiKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3BhdGgvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///61\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction __export(m) {\n    for (var p in m) {\n        if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @module resolve */ /** for typedoc */\n__export(__webpack_require__(31));\n__export(__webpack_require__(13));\n__export(__webpack_require__(19));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3Jlc29sdmUvaW5kZXguanM/M2MwZSJdLCJuYW1lcyI6WyJfX2V4cG9ydCIsIm0iLCJwIiwiZXhwb3J0cyIsImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLFNBQVNBLFFBQVQsQ0FBa0JDLENBQWxCLEVBQXFCO0FBQ2pCLFNBQUssSUFBSUMsQ0FBVCxJQUFjRCxDQUFkO0FBQWlCLFlBQUksQ0FBQ0UsUUFBUUMsY0FBUixDQUF1QkYsQ0FBdkIsQ0FBTCxFQUFnQ0MsUUFBUUQsQ0FBUixJQUFhRCxFQUFFQyxDQUFGLENBQWI7QUFBakQ7QUFDSDtBQUNERyxPQUFPQyxjQUFQLENBQXNCSCxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFSSxPQUFPLElBQVQsRUFBN0M7QUFDQSxzQixDQUF1QjtBQUN2QlAsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQSIsImZpbGUiOiI2Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKiBAbW9kdWxlIHJlc29sdmUgKi8gLyoqIGZvciB0eXBlZG9jICovXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9pbnRlcmZhY2VcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vcmVzb2x2YWJsZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9yZXNvbHZlQ29udGV4dFwiKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3Jlc29sdmUvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///62\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction __export(m) {\n    for (var p in m) {\n        if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n__export(__webpack_require__(34));\n__export(__webpack_require__(22));\n__export(__webpack_require__(35));\n__export(__webpack_require__(36));\n__export(__webpack_require__(37));\n__export(__webpack_require__(38));\n__export(__webpack_require__(7));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3N0YXRlL2luZGV4LmpzPzQwZjkiXSwibmFtZXMiOlsiX19leHBvcnQiLCJtIiwicCIsImV4cG9ydHMiLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxTQUFTQSxRQUFULENBQWtCQyxDQUFsQixFQUFxQjtBQUNqQixTQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZDtBQUFpQixZQUFJLENBQUNFLFFBQVFDLGNBQVIsQ0FBdUJGLENBQXZCLENBQUwsRUFBZ0NDLFFBQVFELENBQVIsSUFBYUQsRUFBRUMsQ0FBRixDQUFiO0FBQWpEO0FBQ0g7QUFDREcsT0FBT0MsY0FBUCxDQUFzQkgsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUksT0FBTyxJQUFULEVBQTdDO0FBQ0FQLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsQ0FBUixDQUFUO0FBQ0EiLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zdGF0ZUJ1aWxkZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3RhdGVPYmplY3RcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3RhdGVNYXRjaGVyXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3N0YXRlUXVldWVNYW5hZ2VyXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3N0YXRlUmVnaXN0cnlcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3RhdGVTZXJ2aWNlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3RhcmdldFN0YXRlXCIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvc3RhdGUvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///63\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @module hooks */ /** */\nvar transition_1 = __webpack_require__(17);\nvar router_1 = __webpack_require__(39);\nfunction addCoreResolvables(trans) {\n    trans.addResolvable({ token: router_1.UIRouter, deps: [], resolveFn: function resolveFn() {\n            return trans.router;\n        }, data: trans.router }, "");\n    trans.addResolvable({ token: transition_1.Transition, deps: [], resolveFn: function resolveFn() {\n            return trans;\n        }, data: trans }, "");\n    trans.addResolvable({ token: \'$transition$\', deps: [], resolveFn: function resolveFn() {\n            return trans;\n        }, data: trans }, "");\n    trans.addResolvable({ token: \'$stateParams\', deps: [], resolveFn: function resolveFn() {\n            return trans.params();\n        }, data: trans.params() }, "");\n    trans.entering().forEach(function (state) {\n        trans.addResolvable({ token: \'$state$\', deps: [], resolveFn: function resolveFn() {\n                return state;\n            }, data: state }, state);\n    });\n}\nexports.registerAddCoreResolvables = function (transitionService) {\n    return transitionService.onCreate({}, addCoreResolvables);\n};\n//# sourceMappingURL=coreResolvables.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL2NvcmVSZXNvbHZhYmxlcy5qcz8yZGMzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHJhbnNpdGlvbl8xIiwicmVxdWlyZSIsInJvdXRlcl8xIiwiYWRkQ29yZVJlc29sdmFibGVzIiwidHJhbnMiLCJhZGRSZXNvbHZhYmxlIiwidG9rZW4iLCJVSVJvdXRlciIsImRlcHMiLCJyZXNvbHZlRm4iLCJyb3V0ZXIiLCJkYXRhIiwiVHJhbnNpdGlvbiIsInBhcmFtcyIsImVudGVyaW5nIiwiZm9yRWFjaCIsInN0YXRlIiwicmVnaXN0ZXJBZGRDb3JlUmVzb2x2YWJsZXMiLCJ0cmFuc2l0aW9uU2VydmljZSIsIm9uQ3JlYXRlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0Esb0IsQ0FBcUI7QUFDckIsSUFBSUMsZUFBZSxtQkFBQUMsQ0FBUSxFQUFSLENBQW5CO0FBQ0EsSUFBSUMsV0FBVyxtQkFBQUQsQ0FBUSxFQUFSLENBQWY7QUFDQSxTQUFTRSxrQkFBVCxDQUE0QkMsS0FBNUIsRUFBbUM7QUFDL0JBLFVBQU1DLGFBQU4sQ0FBb0IsRUFBRUMsT0FBT0osU0FBU0ssUUFBbEIsRUFBNEJDLE1BQU0sRUFBbEMsRUFBc0NDLFdBQVcscUJBQVk7QUFBRSxtQkFBT0wsTUFBTU0sTUFBYjtBQUFzQixTQUFyRixFQUF1RkMsTUFBTVAsTUFBTU0sTUFBbkcsRUFBcEIsRUFBaUksRUFBakk7QUFDQU4sVUFBTUMsYUFBTixDQUFvQixFQUFFQyxPQUFPTixhQUFhWSxVQUF0QixFQUFrQ0osTUFBTSxFQUF4QyxFQUE0Q0MsV0FBVyxxQkFBWTtBQUFFLG1CQUFPTCxLQUFQO0FBQWUsU0FBcEYsRUFBc0ZPLE1BQU1QLEtBQTVGLEVBQXBCLEVBQXlILEVBQXpIO0FBQ0FBLFVBQU1DLGFBQU4sQ0FBb0IsRUFBRUMsT0FBTyxjQUFULEVBQXlCRSxNQUFNLEVBQS9CLEVBQW1DQyxXQUFXLHFCQUFZO0FBQUUsbUJBQU9MLEtBQVA7QUFBZSxTQUEzRSxFQUE2RU8sTUFBTVAsS0FBbkYsRUFBcEIsRUFBZ0gsRUFBaEg7QUFDQUEsVUFBTUMsYUFBTixDQUFvQixFQUFFQyxPQUFPLGNBQVQsRUFBeUJFLE1BQU0sRUFBL0IsRUFBbUNDLFdBQVcscUJBQVk7QUFBRSxtQkFBT0wsTUFBTVMsTUFBTixFQUFQO0FBQXdCLFNBQXBGLEVBQXNGRixNQUFNUCxNQUFNUyxNQUFOLEVBQTVGLEVBQXBCLEVBQWtJLEVBQWxJO0FBQ0FULFVBQU1VLFFBQU4sR0FBaUJDLE9BQWpCLENBQXlCLFVBQVVDLEtBQVYsRUFBaUI7QUFDdENaLGNBQU1DLGFBQU4sQ0FBb0IsRUFBRUMsT0FBTyxTQUFULEVBQW9CRSxNQUFNLEVBQTFCLEVBQThCQyxXQUFXLHFCQUFZO0FBQUUsdUJBQU9PLEtBQVA7QUFBZSxhQUF0RSxFQUF3RUwsTUFBTUssS0FBOUUsRUFBcEIsRUFBMkdBLEtBQTNHO0FBQ0gsS0FGRDtBQUdIO0FBQ0RsQixRQUFRbUIsMEJBQVIsR0FBcUMsVUFBVUMsaUJBQVYsRUFBNkI7QUFDOUQsV0FBT0Esa0JBQWtCQyxRQUFsQixDQUEyQixFQUEzQixFQUErQmhCLGtCQUEvQixDQUFQO0FBQ0gsQ0FGRDtBQUdBIiwiZmlsZSI6IjY0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiogQG1vZHVsZSBob29rcyAqLyAvKiogKi9cbnZhciB0cmFuc2l0aW9uXzEgPSByZXF1aXJlKFwiLi4vdHJhbnNpdGlvbi90cmFuc2l0aW9uXCIpO1xudmFyIHJvdXRlcl8xID0gcmVxdWlyZShcIi4uL3JvdXRlclwiKTtcbmZ1bmN0aW9uIGFkZENvcmVSZXNvbHZhYmxlcyh0cmFucykge1xuICAgIHRyYW5zLmFkZFJlc29sdmFibGUoeyB0b2tlbjogcm91dGVyXzEuVUlSb3V0ZXIsIGRlcHM6IFtdLCByZXNvbHZlRm46IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRyYW5zLnJvdXRlcjsgfSwgZGF0YTogdHJhbnMucm91dGVyIH0sIFwiXCIpO1xuICAgIHRyYW5zLmFkZFJlc29sdmFibGUoeyB0b2tlbjogdHJhbnNpdGlvbl8xLlRyYW5zaXRpb24sIGRlcHM6IFtdLCByZXNvbHZlRm46IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRyYW5zOyB9LCBkYXRhOiB0cmFucyB9LCBcIlwiKTtcbiAgICB0cmFucy5hZGRSZXNvbHZhYmxlKHsgdG9rZW46ICckdHJhbnNpdGlvbiQnLCBkZXBzOiBbXSwgcmVzb2x2ZUZuOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cmFuczsgfSwgZGF0YTogdHJhbnMgfSwgXCJcIik7XG4gICAgdHJhbnMuYWRkUmVzb2x2YWJsZSh7IHRva2VuOiAnJHN0YXRlUGFyYW1zJywgZGVwczogW10sIHJlc29sdmVGbjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJhbnMucGFyYW1zKCk7IH0sIGRhdGE6IHRyYW5zLnBhcmFtcygpIH0sIFwiXCIpO1xuICAgIHRyYW5zLmVudGVyaW5nKCkuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdHJhbnMuYWRkUmVzb2x2YWJsZSh7IHRva2VuOiAnJHN0YXRlJCcsIGRlcHM6IFtdLCByZXNvbHZlRm46IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0YXRlOyB9LCBkYXRhOiBzdGF0ZSB9LCBzdGF0ZSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlZ2lzdGVyQWRkQ29yZVJlc29sdmFibGVzID0gZnVuY3Rpb24gKHRyYW5zaXRpb25TZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25TZXJ2aWNlLm9uQ3JlYXRlKHt9LCBhZGRDb3JlUmVzb2x2YWJsZXMpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvcmVSZXNvbHZhYmxlcy5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL2NvcmVSZXNvbHZhYmxlcy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///64\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module hooks */ /** */\nvar predicates_1 = __webpack_require__(1);\nvar coreservices_1 = __webpack_require__(3);\nvar targetState_1 = __webpack_require__(7);\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n *\n * See [[StateDeclaration.redirectTo]]\n */\nvar redirectToHook = function redirectToHook(trans) {\n    var redirect = trans.to().redirectTo;\n    if (!redirect) return;\n    var $state = trans.router.stateService;\n    function handleResult(result) {\n        if (!result) return;\n        if (result instanceof targetState_1.TargetState) return result;\n        if (predicates_1.isString(result)) return $state.target(result, trans.params(), trans.options());\n        if (result['state'] || result['params']) return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n    }\n    if (predicates_1.isFunction(redirect)) {\n        return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);\n    }\n    return handleResult(redirect);\n};\nexports.registerRedirectToHook = function (transitionService) {\n    return transitionService.onStart({ to: function to(state) {\n            return !!state.redirectTo;\n        } }, redirectToHook);\n};\n//# sourceMappingURL=redirectTo.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL3JlZGlyZWN0VG8uanM/MGQ0YiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInByZWRpY2F0ZXNfMSIsInJlcXVpcmUiLCJjb3Jlc2VydmljZXNfMSIsInRhcmdldFN0YXRlXzEiLCJyZWRpcmVjdFRvSG9vayIsInRyYW5zIiwicmVkaXJlY3QiLCJ0byIsInJlZGlyZWN0VG8iLCIkc3RhdGUiLCJyb3V0ZXIiLCJzdGF0ZVNlcnZpY2UiLCJoYW5kbGVSZXN1bHQiLCJyZXN1bHQiLCJUYXJnZXRTdGF0ZSIsImlzU3RyaW5nIiwidGFyZ2V0IiwicGFyYW1zIiwib3B0aW9ucyIsImlzRnVuY3Rpb24iLCJzZXJ2aWNlcyIsIiRxIiwid2hlbiIsInRoZW4iLCJyZWdpc3RlclJlZGlyZWN0VG9Ib29rIiwidHJhbnNpdGlvblNlcnZpY2UiLCJvblN0YXJ0Iiwic3RhdGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQSxvQixDQUFxQjtBQUNyQixJQUFJQyxlQUFlLG1CQUFBQyxDQUFRLENBQVIsQ0FBbkI7QUFDQSxJQUFJQyxpQkFBaUIsbUJBQUFELENBQVEsQ0FBUixDQUFyQjtBQUNBLElBQUlFLGdCQUFnQixtQkFBQUYsQ0FBUSxDQUFSLENBQXBCO0FBQ0E7Ozs7Ozs7QUFPQSxJQUFJRyxpQkFBaUIsU0FBakJBLGNBQWlCLENBQVVDLEtBQVYsRUFBaUI7QUFDbEMsUUFBSUMsV0FBV0QsTUFBTUUsRUFBTixHQUFXQyxVQUExQjtBQUNBLFFBQUksQ0FBQ0YsUUFBTCxFQUNJO0FBQ0osUUFBSUcsU0FBU0osTUFBTUssTUFBTixDQUFhQyxZQUExQjtBQUNBLGFBQVNDLFlBQVQsQ0FBc0JDLE1BQXRCLEVBQThCO0FBQzFCLFlBQUksQ0FBQ0EsTUFBTCxFQUNJO0FBQ0osWUFBSUEsa0JBQWtCVixjQUFjVyxXQUFwQyxFQUNJLE9BQU9ELE1BQVA7QUFDSixZQUFJYixhQUFhZSxRQUFiLENBQXNCRixNQUF0QixDQUFKLEVBQ0ksT0FBT0osT0FBT08sTUFBUCxDQUFjSCxNQUFkLEVBQXNCUixNQUFNWSxNQUFOLEVBQXRCLEVBQXNDWixNQUFNYSxPQUFOLEVBQXRDLENBQVA7QUFDSixZQUFJTCxPQUFPLE9BQVAsS0FBbUJBLE9BQU8sUUFBUCxDQUF2QixFQUNJLE9BQU9KLE9BQU9PLE1BQVAsQ0FBY0gsT0FBTyxPQUFQLEtBQW1CUixNQUFNRSxFQUFOLEVBQWpDLEVBQTZDTSxPQUFPLFFBQVAsS0FBb0JSLE1BQU1ZLE1BQU4sRUFBakUsRUFBaUZaLE1BQU1hLE9BQU4sRUFBakYsQ0FBUDtBQUNQO0FBQ0QsUUFBSWxCLGFBQWFtQixVQUFiLENBQXdCYixRQUF4QixDQUFKLEVBQXVDO0FBQ25DLGVBQU9KLGVBQWVrQixRQUFmLENBQXdCQyxFQUF4QixDQUEyQkMsSUFBM0IsQ0FBZ0NoQixTQUFTRCxLQUFULENBQWhDLEVBQWlEa0IsSUFBakQsQ0FBc0RYLFlBQXRELENBQVA7QUFDSDtBQUNELFdBQU9BLGFBQWFOLFFBQWIsQ0FBUDtBQUNILENBbkJEO0FBb0JBUixRQUFRMEIsc0JBQVIsR0FBaUMsVUFBVUMsaUJBQVYsRUFBNkI7QUFDMUQsV0FBT0Esa0JBQWtCQyxPQUFsQixDQUEwQixFQUFFbkIsSUFBSSxZQUFVb0IsS0FBVixFQUFpQjtBQUFFLG1CQUFPLENBQUMsQ0FBQ0EsTUFBTW5CLFVBQWY7QUFBNEIsU0FBckQsRUFBMUIsRUFBbUZKLGNBQW5GLENBQVA7QUFDSCxDQUZEO0FBR0EiLCJmaWxlIjoiNjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKiBAbW9kdWxlIGhvb2tzICovIC8qKiAqL1xudmFyIHByZWRpY2F0ZXNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vcHJlZGljYXRlc1wiKTtcbnZhciBjb3Jlc2VydmljZXNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vY29yZXNlcnZpY2VzXCIpO1xudmFyIHRhcmdldFN0YXRlXzEgPSByZXF1aXJlKFwiLi4vc3RhdGUvdGFyZ2V0U3RhdGVcIik7XG4vKipcbiAqIEEgW1tUcmFuc2l0aW9uSG9va0ZuXV0gdGhhdCByZWRpcmVjdHMgdG8gYSBkaWZmZXJlbnQgc3RhdGUgb3IgcGFyYW1zXG4gKlxuICogUmVnaXN0ZXJlZCB1c2luZyBgdHJhbnNpdGlvblNlcnZpY2Uub25TdGFydCh7IHRvOiAoc3RhdGUpID0+ICEhc3RhdGUucmVkaXJlY3RUbyB9LCByZWRpcmVjdEhvb2spO2BcbiAqXG4gKiBTZWUgW1tTdGF0ZURlY2xhcmF0aW9uLnJlZGlyZWN0VG9dXVxuICovXG52YXIgcmVkaXJlY3RUb0hvb2sgPSBmdW5jdGlvbiAodHJhbnMpIHtcbiAgICB2YXIgcmVkaXJlY3QgPSB0cmFucy50bygpLnJlZGlyZWN0VG87XG4gICAgaWYgKCFyZWRpcmVjdClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciAkc3RhdGUgPSB0cmFucy5yb3V0ZXIuc3RhdGVTZXJ2aWNlO1xuICAgIGZ1bmN0aW9uIGhhbmRsZVJlc3VsdChyZXN1bHQpIHtcbiAgICAgICAgaWYgKCFyZXN1bHQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiB0YXJnZXRTdGF0ZV8xLlRhcmdldFN0YXRlKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgaWYgKHByZWRpY2F0ZXNfMS5pc1N0cmluZyhyZXN1bHQpKVxuICAgICAgICAgICAgcmV0dXJuICRzdGF0ZS50YXJnZXQocmVzdWx0LCB0cmFucy5wYXJhbXMoKSwgdHJhbnMub3B0aW9ucygpKTtcbiAgICAgICAgaWYgKHJlc3VsdFsnc3RhdGUnXSB8fCByZXN1bHRbJ3BhcmFtcyddKVxuICAgICAgICAgICAgcmV0dXJuICRzdGF0ZS50YXJnZXQocmVzdWx0WydzdGF0ZSddIHx8IHRyYW5zLnRvKCksIHJlc3VsdFsncGFyYW1zJ10gfHwgdHJhbnMucGFyYW1zKCksIHRyYW5zLm9wdGlvbnMoKSk7XG4gICAgfVxuICAgIGlmIChwcmVkaWNhdGVzXzEuaXNGdW5jdGlvbihyZWRpcmVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGNvcmVzZXJ2aWNlc18xLnNlcnZpY2VzLiRxLndoZW4ocmVkaXJlY3QodHJhbnMpKS50aGVuKGhhbmRsZVJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiBoYW5kbGVSZXN1bHQocmVkaXJlY3QpO1xufTtcbmV4cG9ydHMucmVnaXN0ZXJSZWRpcmVjdFRvSG9vayA9IGZ1bmN0aW9uICh0cmFuc2l0aW9uU2VydmljZSkge1xuICAgIHJldHVybiB0cmFuc2l0aW9uU2VydmljZS5vblN0YXJ0KHsgdG86IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gISFzdGF0ZS5yZWRpcmVjdFRvOyB9IH0sIHJlZGlyZWN0VG9Ib29rKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpcmVjdFRvLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvaG9va3MvcmVkaXJlY3RUby5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///65\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName) {\n    return function (transition, state) {\n        var _state = state.$$state();\n        var hookFn = _state[hookName];\n        return hookFn(transition, state);\n    };\n}\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\nvar onExitHook = makeEnterExitRetainHook('onExit');\nexports.registerOnExitHook = function (transitionService) {\n    return transitionService.onExit({ exiting: function exiting(state) {\n            return !!state.onExit;\n        } }, onExitHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\nvar onRetainHook = makeEnterExitRetainHook('onRetain');\nexports.registerOnRetainHook = function (transitionService) {\n    return transitionService.onRetain({ retained: function retained(state) {\n            return !!state.onRetain;\n        } }, onRetainHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\nvar onEnterHook = makeEnterExitRetainHook('onEnter');\nexports.registerOnEnterHook = function (transitionService) {\n    return transitionService.onEnter({ entering: function entering(state) {\n            return !!state.onEnter;\n        } }, onEnterHook);\n};\n//# sourceMappingURL=onEnterExitRetain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL29uRW50ZXJFeGl0UmV0YWluLmpzP2ZjNzMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtYWtlRW50ZXJFeGl0UmV0YWluSG9vayIsImhvb2tOYW1lIiwidHJhbnNpdGlvbiIsInN0YXRlIiwiX3N0YXRlIiwiJCRzdGF0ZSIsImhvb2tGbiIsIm9uRXhpdEhvb2siLCJyZWdpc3Rlck9uRXhpdEhvb2siLCJ0cmFuc2l0aW9uU2VydmljZSIsIm9uRXhpdCIsImV4aXRpbmciLCJvblJldGFpbkhvb2siLCJyZWdpc3Rlck9uUmV0YWluSG9vayIsIm9uUmV0YWluIiwicmV0YWluZWQiLCJvbkVudGVySG9vayIsInJlZ2lzdGVyT25FbnRlckhvb2siLCJvbkVudGVyIiwiZW50ZXJpbmciXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQTs7Ozs7Ozs7QUFRQSxTQUFTQyx1QkFBVCxDQUFpQ0MsUUFBakMsRUFBMkM7QUFDdkMsV0FBTyxVQUFVQyxVQUFWLEVBQXNCQyxLQUF0QixFQUE2QjtBQUNoQyxZQUFJQyxTQUFTRCxNQUFNRSxPQUFOLEVBQWI7QUFDQSxZQUFJQyxTQUFTRixPQUFPSCxRQUFQLENBQWI7QUFDQSxlQUFPSyxPQUFPSixVQUFQLEVBQW1CQyxLQUFuQixDQUFQO0FBQ0gsS0FKRDtBQUtIO0FBQ0Q7Ozs7Ozs7OztBQVNBLElBQUlJLGFBQWFQLHdCQUF3QixRQUF4QixDQUFqQjtBQUNBRixRQUFRVSxrQkFBUixHQUE2QixVQUFVQyxpQkFBVixFQUE2QjtBQUN0RCxXQUFPQSxrQkFBa0JDLE1BQWxCLENBQXlCLEVBQUVDLFNBQVMsaUJBQVVSLEtBQVYsRUFBaUI7QUFBRSxtQkFBTyxDQUFDLENBQUNBLE1BQU1PLE1BQWY7QUFBd0IsU0FBdEQsRUFBekIsRUFBbUZILFVBQW5GLENBQVA7QUFDSCxDQUZEO0FBR0E7Ozs7Ozs7OztBQVNBLElBQUlLLGVBQWVaLHdCQUF3QixVQUF4QixDQUFuQjtBQUNBRixRQUFRZSxvQkFBUixHQUErQixVQUFVSixpQkFBVixFQUE2QjtBQUN4RCxXQUFPQSxrQkFBa0JLLFFBQWxCLENBQTJCLEVBQUVDLFVBQVUsa0JBQVVaLEtBQVYsRUFBaUI7QUFBRSxtQkFBTyxDQUFDLENBQUNBLE1BQU1XLFFBQWY7QUFBMEIsU0FBekQsRUFBM0IsRUFBd0ZGLFlBQXhGLENBQVA7QUFDSCxDQUZEO0FBR0E7Ozs7Ozs7OztBQVNBLElBQUlJLGNBQWNoQix3QkFBd0IsU0FBeEIsQ0FBbEI7QUFDQUYsUUFBUW1CLG1CQUFSLEdBQThCLFVBQVVSLGlCQUFWLEVBQTZCO0FBQ3ZELFdBQU9BLGtCQUFrQlMsT0FBbEIsQ0FBMEIsRUFBRUMsVUFBVSxrQkFBVWhCLEtBQVYsRUFBaUI7QUFBRSxtQkFBTyxDQUFDLENBQUNBLE1BQU1lLE9BQWY7QUFBeUIsU0FBeEQsRUFBMUIsRUFBc0ZGLFdBQXRGLENBQVA7QUFDSCxDQUZEO0FBR0EiLCJmaWxlIjoiNjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQSBmYWN0b3J5IHdoaWNoIGNyZWF0ZXMgYW4gb25FbnRlciwgb25FeGl0IG9yIG9uUmV0YWluIHRyYW5zaXRpb24gaG9vayBmdW5jdGlvblxuICpcbiAqIFRoZSByZXR1cm5lZCBmdW5jdGlvbiBpbnZva2VzIHRoZSAoZm9yIGluc3RhbmNlKSBzdGF0ZS5vbkVudGVyIGhvb2sgd2hlbiB0aGVcbiAqIHN0YXRlIGlzIGJlaW5nIGVudGVyZWQuXG4gKlxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBtYWtlRW50ZXJFeGl0UmV0YWluSG9vayhob29rTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodHJhbnNpdGlvbiwgc3RhdGUpIHtcbiAgICAgICAgdmFyIF9zdGF0ZSA9IHN0YXRlLiQkc3RhdGUoKTtcbiAgICAgICAgdmFyIGhvb2tGbiA9IF9zdGF0ZVtob29rTmFtZV07XG4gICAgICAgIHJldHVybiBob29rRm4odHJhbnNpdGlvbiwgc3RhdGUpO1xuICAgIH07XG59XG4vKipcbiAqIFRoZSBbW1RyYW5zaXRpb25TdGF0ZUhvb2tGbl1dIGZvciBvbkV4aXRcbiAqXG4gKiBXaGVuIHRoZSBzdGF0ZSBpcyBiZWluZyBleGl0ZWQsIHRoZSBzdGF0ZSdzIC5vbkV4aXQgZnVuY3Rpb24gaXMgaW52b2tlZC5cbiAqXG4gKiBSZWdpc3RlcmVkIHVzaW5nIGB0cmFuc2l0aW9uU2VydmljZS5vbkV4aXQoeyBleGl0aW5nOiAoc3RhdGUpID0+ICEhc3RhdGUub25FeGl0IH0sIG9uRXhpdEhvb2spO2BcbiAqXG4gKiBTZWU6IFtbSUhvb2tSZWdpc3RyeS5vbkV4aXRdXVxuICovXG52YXIgb25FeGl0SG9vayA9IG1ha2VFbnRlckV4aXRSZXRhaW5Ib29rKCdvbkV4aXQnKTtcbmV4cG9ydHMucmVnaXN0ZXJPbkV4aXRIb29rID0gZnVuY3Rpb24gKHRyYW5zaXRpb25TZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25TZXJ2aWNlLm9uRXhpdCh7IGV4aXRpbmc6IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gISFzdGF0ZS5vbkV4aXQ7IH0gfSwgb25FeGl0SG9vayk7XG59O1xuLyoqXG4gKiBUaGUgW1tUcmFuc2l0aW9uU3RhdGVIb29rRm5dXSBmb3Igb25SZXRhaW5cbiAqXG4gKiBXaGVuIHRoZSBzdGF0ZSB3YXMgYWxyZWFkeSBlbnRlcmVkLCBhbmQgaXMgbm90IGJlaW5nIGV4aXRlZCBvciByZS1lbnRlcmVkLCB0aGUgc3RhdGUncyAub25SZXRhaW4gZnVuY3Rpb24gaXMgaW52b2tlZC5cbiAqXG4gKiBSZWdpc3RlcmVkIHVzaW5nIGB0cmFuc2l0aW9uU2VydmljZS5vblJldGFpbih7IHJldGFpbmVkOiAoc3RhdGUpID0+ICEhc3RhdGUub25SZXRhaW4gfSwgb25SZXRhaW5Ib29rKTtgXG4gKlxuICogU2VlOiBbW0lIb29rUmVnaXN0cnkub25SZXRhaW5dXVxuICovXG52YXIgb25SZXRhaW5Ib29rID0gbWFrZUVudGVyRXhpdFJldGFpbkhvb2soJ29uUmV0YWluJyk7XG5leHBvcnRzLnJlZ2lzdGVyT25SZXRhaW5Ib29rID0gZnVuY3Rpb24gKHRyYW5zaXRpb25TZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25TZXJ2aWNlLm9uUmV0YWluKHsgcmV0YWluZWQ6IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gISFzdGF0ZS5vblJldGFpbjsgfSB9LCBvblJldGFpbkhvb2spO1xufTtcbi8qKlxuICogVGhlIFtbVHJhbnNpdGlvblN0YXRlSG9va0ZuXV0gZm9yIG9uRW50ZXJcbiAqXG4gKiBXaGVuIHRoZSBzdGF0ZSBpcyBiZWluZyBlbnRlcmVkLCB0aGUgc3RhdGUncyAub25FbnRlciBmdW5jdGlvbiBpcyBpbnZva2VkLlxuICpcbiAqIFJlZ2lzdGVyZWQgdXNpbmcgYHRyYW5zaXRpb25TZXJ2aWNlLm9uRW50ZXIoeyBlbnRlcmluZzogKHN0YXRlKSA9PiAhIXN0YXRlLm9uRW50ZXIgfSwgb25FbnRlckhvb2spO2BcbiAqXG4gKiBTZWU6IFtbSUhvb2tSZWdpc3RyeS5vbkVudGVyXV1cbiAqL1xudmFyIG9uRW50ZXJIb29rID0gbWFrZUVudGVyRXhpdFJldGFpbkhvb2soJ29uRW50ZXInKTtcbmV4cG9ydHMucmVnaXN0ZXJPbkVudGVySG9vayA9IGZ1bmN0aW9uICh0cmFuc2l0aW9uU2VydmljZSkge1xuICAgIHJldHVybiB0cmFuc2l0aW9uU2VydmljZS5vbkVudGVyKHsgZW50ZXJpbmc6IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gISFzdGF0ZS5vbkVudGVyOyB9IH0sIG9uRW50ZXJIb29rKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbkVudGVyRXhpdFJldGFpbi5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL29uRW50ZXJFeGl0UmV0YWluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///66\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @module hooks */\n/** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar resolveContext_1 = __webpack_require__(19);\nvar hof_1 = __webpack_require__(2);\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath);`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nvar eagerResolvePath = function eagerResolvePath(trans) {\n    return new resolveContext_1.ResolveContext(trans.treeChanges().to).resolvePath("EAGER", trans).then(common_1.noop);\n};\nexports.registerEagerResolvePath = function (transitionService) {\n    return transitionService.onStart({}, eagerResolvePath, { priority: 1000 });\n};\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nvar lazyResolveState = function lazyResolveState(trans, state) {\n    return new resolveContext_1.ResolveContext(trans.treeChanges().to).subContext(state.$$state()).resolvePath("LAZY", trans).then(common_1.noop);\n};\nexports.registerLazyResolveState = function (transitionService) {\n    return transitionService.onEnter({ entering: hof_1.val(true) }, lazyResolveState, { priority: 1000 });\n};\n//# sourceMappingURL=resolve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL3Jlc29sdmUuanM/NTgxYyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbW1vbl8xIiwicmVxdWlyZSIsInJlc29sdmVDb250ZXh0XzEiLCJob2ZfMSIsImVhZ2VyUmVzb2x2ZVBhdGgiLCJ0cmFucyIsIlJlc29sdmVDb250ZXh0IiwidHJlZUNoYW5nZXMiLCJ0byIsInJlc29sdmVQYXRoIiwidGhlbiIsIm5vb3AiLCJyZWdpc3RlckVhZ2VyUmVzb2x2ZVBhdGgiLCJ0cmFuc2l0aW9uU2VydmljZSIsIm9uU3RhcnQiLCJwcmlvcml0eSIsImxhenlSZXNvbHZlU3RhdGUiLCJzdGF0ZSIsInN1YkNvbnRleHQiLCIkJHN0YXRlIiwicmVnaXN0ZXJMYXp5UmVzb2x2ZVN0YXRlIiwib25FbnRlciIsImVudGVyaW5nIiwidmFsIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0E7QUFDQTtBQUNBLElBQUlDLFdBQVcsbUJBQUFDLENBQVEsQ0FBUixDQUFmO0FBQ0EsSUFBSUMsbUJBQW1CLG1CQUFBRCxDQUFRLEVBQVIsQ0FBdkI7QUFDQSxJQUFJRSxRQUFRLG1CQUFBRixDQUFRLENBQVIsQ0FBWjtBQUNBOzs7Ozs7Ozs7QUFTQSxJQUFJRyxtQkFBbUIsU0FBbkJBLGdCQUFtQixDQUFVQyxLQUFWLEVBQWlCO0FBQ3BDLFdBQU8sSUFBSUgsaUJBQWlCSSxjQUFyQixDQUFvQ0QsTUFBTUUsV0FBTixHQUFvQkMsRUFBeEQsRUFDRkMsV0FERSxDQUNVLE9BRFYsRUFDbUJKLEtBRG5CLEVBRUZLLElBRkUsQ0FFR1YsU0FBU1csSUFGWixDQUFQO0FBR0gsQ0FKRDtBQUtBYixRQUFRYyx3QkFBUixHQUFtQyxVQUFVQyxpQkFBVixFQUE2QjtBQUM1RCxXQUFPQSxrQkFBa0JDLE9BQWxCLENBQTBCLEVBQTFCLEVBQThCVixnQkFBOUIsRUFBZ0QsRUFBRVcsVUFBVSxJQUFaLEVBQWhELENBQVA7QUFDSCxDQUZEO0FBR0E7Ozs7Ozs7OztBQVNBLElBQUlDLG1CQUFtQixTQUFuQkEsZ0JBQW1CLENBQVVYLEtBQVYsRUFBaUJZLEtBQWpCLEVBQXdCO0FBQzNDLFdBQU8sSUFBSWYsaUJBQWlCSSxjQUFyQixDQUFvQ0QsTUFBTUUsV0FBTixHQUFvQkMsRUFBeEQsRUFDRlUsVUFERSxDQUNTRCxNQUFNRSxPQUFOLEVBRFQsRUFFRlYsV0FGRSxDQUVVLE1BRlYsRUFFa0JKLEtBRmxCLEVBR0ZLLElBSEUsQ0FHR1YsU0FBU1csSUFIWixDQUFQO0FBSUgsQ0FMRDtBQU1BYixRQUFRc0Isd0JBQVIsR0FBbUMsVUFBVVAsaUJBQVYsRUFBNkI7QUFDNUQsV0FBT0Esa0JBQWtCUSxPQUFsQixDQUEwQixFQUFFQyxVQUFVbkIsTUFBTW9CLEdBQU4sQ0FBVSxJQUFWLENBQVosRUFBMUIsRUFBeURQLGdCQUF6RCxFQUEyRSxFQUFFRCxVQUFVLElBQVosRUFBM0UsQ0FBUDtBQUNILENBRkQ7QUFHQSIsImZpbGUiOiI2Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqIEBtb2R1bGUgaG9va3MgKi9cbi8qKiBmb3IgdHlwZWRvYyAqL1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb21tb25cIik7XG52YXIgcmVzb2x2ZUNvbnRleHRfMSA9IHJlcXVpcmUoXCIuLi9yZXNvbHZlL3Jlc29sdmVDb250ZXh0XCIpO1xudmFyIGhvZl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9ob2ZcIik7XG4vKipcbiAqIEEgW1tUcmFuc2l0aW9uSG9va0ZuXV0gd2hpY2ggcmVzb2x2ZXMgYWxsIEVBR0VSIFJlc29sdmFibGVzIGluIHRoZSBUbyBQYXRoXG4gKlxuICogUmVnaXN0ZXJlZCB1c2luZyBgdHJhbnNpdGlvblNlcnZpY2Uub25TdGFydCh7fSwgZWFnZXJSZXNvbHZlUGF0aCk7YFxuICpcbiAqIFdoZW4gYSBUcmFuc2l0aW9uIHN0YXJ0cywgdGhpcyBob29rIHJlc29sdmVzIGFsbCB0aGUgRUFHRVIgUmVzb2x2YWJsZXMsIHdoaWNoIHRoZSB0cmFuc2l0aW9uIHRoZW4gd2FpdHMgZm9yLlxuICpcbiAqIFNlZSBbW1N0YXRlRGVjbGFyYXRpb24ucmVzb2x2ZV1dXG4gKi9cbnZhciBlYWdlclJlc29sdmVQYXRoID0gZnVuY3Rpb24gKHRyYW5zKSB7XG4gICAgcmV0dXJuIG5ldyByZXNvbHZlQ29udGV4dF8xLlJlc29sdmVDb250ZXh0KHRyYW5zLnRyZWVDaGFuZ2VzKCkudG8pXG4gICAgICAgIC5yZXNvbHZlUGF0aChcIkVBR0VSXCIsIHRyYW5zKVxuICAgICAgICAudGhlbihjb21tb25fMS5ub29wKTtcbn07XG5leHBvcnRzLnJlZ2lzdGVyRWFnZXJSZXNvbHZlUGF0aCA9IGZ1bmN0aW9uICh0cmFuc2l0aW9uU2VydmljZSkge1xuICAgIHJldHVybiB0cmFuc2l0aW9uU2VydmljZS5vblN0YXJ0KHt9LCBlYWdlclJlc29sdmVQYXRoLCB7IHByaW9yaXR5OiAxMDAwIH0pO1xufTtcbi8qKlxuICogQSBbW1RyYW5zaXRpb25Ib29rRm5dXSB3aGljaCByZXNvbHZlcyBhbGwgTEFaWSBSZXNvbHZhYmxlcyBmb3IgdGhlIHN0YXRlIChhbmQgYWxsIGl0cyBhbmNlc3RvcnMpIGluIHRoZSBUbyBQYXRoXG4gKlxuICogUmVnaXN0ZXJlZCB1c2luZyBgdHJhbnNpdGlvblNlcnZpY2Uub25FbnRlcih7IGVudGVyaW5nOiAoKSA9PiB0cnVlIH0sIGxhenlSZXNvbHZlU3RhdGUpO2BcbiAqXG4gKiBXaGVuIGEgU3RhdGUgaXMgYmVpbmcgZW50ZXJlZCwgdGhpcyBob29rIHJlc29sdmVzIGFsbCB0aGUgUmVzb2x2YWJsZXMgZm9yIHRoaXMgc3RhdGUsIHdoaWNoIHRoZSB0cmFuc2l0aW9uIHRoZW4gd2FpdHMgZm9yLlxuICpcbiAqIFNlZSBbW1N0YXRlRGVjbGFyYXRpb24ucmVzb2x2ZV1dXG4gKi9cbnZhciBsYXp5UmVzb2x2ZVN0YXRlID0gZnVuY3Rpb24gKHRyYW5zLCBzdGF0ZSkge1xuICAgIHJldHVybiBuZXcgcmVzb2x2ZUNvbnRleHRfMS5SZXNvbHZlQ29udGV4dCh0cmFucy50cmVlQ2hhbmdlcygpLnRvKVxuICAgICAgICAuc3ViQ29udGV4dChzdGF0ZS4kJHN0YXRlKCkpXG4gICAgICAgIC5yZXNvbHZlUGF0aChcIkxBWllcIiwgdHJhbnMpXG4gICAgICAgIC50aGVuKGNvbW1vbl8xLm5vb3ApO1xufTtcbmV4cG9ydHMucmVnaXN0ZXJMYXp5UmVzb2x2ZVN0YXRlID0gZnVuY3Rpb24gKHRyYW5zaXRpb25TZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25TZXJ2aWNlLm9uRW50ZXIoeyBlbnRlcmluZzogaG9mXzEudmFsKHRydWUpIH0sIGxhenlSZXNvbHZlU3RhdGUsIHsgcHJpb3JpdHk6IDEwMDAgfSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZS5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL3Jlc29sdmUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///67\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @module hooks */ /** for typedoc */\nvar common_1 = __webpack_require__(0);\nvar coreservices_1 = __webpack_require__(3);\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nvar loadEnteringViews = function loadEnteringViews(transition) {\n    var $q = coreservices_1.services.$q;\n    var enteringViews = transition.views("entering");\n    if (!enteringViews.length) return;\n    return $q.all(enteringViews.map(function (view) {\n        return $q.when(view.load());\n    })).then(common_1.noop);\n};\nexports.registerLoadEnteringViews = function (transitionService) {\n    return transitionService.onFinish({}, loadEnteringViews);\n};\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nvar activateViews = function activateViews(transition) {\n    var enteringViews = transition.views("entering");\n    var exitingViews = transition.views("exiting");\n    if (!enteringViews.length && !exitingViews.length) return;\n    var $view = transition.router.viewService;\n    exitingViews.forEach(function (vc) {\n        return $view.deactivateViewConfig(vc);\n    });\n    enteringViews.forEach(function (vc) {\n        return $view.activateViewConfig(vc);\n    });\n    $view.sync();\n};\nexports.registerActivateViews = function (transitionService) {\n    return transitionService.onSuccess({}, activateViews);\n};\n//# sourceMappingURL=views.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL3ZpZXdzLmpzPzYxYTYiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb21tb25fMSIsInJlcXVpcmUiLCJjb3Jlc2VydmljZXNfMSIsImxvYWRFbnRlcmluZ1ZpZXdzIiwidHJhbnNpdGlvbiIsIiRxIiwic2VydmljZXMiLCJlbnRlcmluZ1ZpZXdzIiwidmlld3MiLCJsZW5ndGgiLCJhbGwiLCJtYXAiLCJ2aWV3Iiwid2hlbiIsImxvYWQiLCJ0aGVuIiwibm9vcCIsInJlZ2lzdGVyTG9hZEVudGVyaW5nVmlld3MiLCJ0cmFuc2l0aW9uU2VydmljZSIsIm9uRmluaXNoIiwiYWN0aXZhdGVWaWV3cyIsImV4aXRpbmdWaWV3cyIsIiR2aWV3Iiwicm91dGVyIiwidmlld1NlcnZpY2UiLCJmb3JFYWNoIiwidmMiLCJkZWFjdGl2YXRlVmlld0NvbmZpZyIsImFjdGl2YXRlVmlld0NvbmZpZyIsInN5bmMiLCJyZWdpc3RlckFjdGl2YXRlVmlld3MiLCJvblN1Y2Nlc3MiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQSxvQixDQUFxQjtBQUNyQixJQUFJQyxXQUFXLG1CQUFBQyxDQUFRLENBQVIsQ0FBZjtBQUNBLElBQUlDLGlCQUFpQixtQkFBQUQsQ0FBUSxDQUFSLENBQXJCO0FBQ0E7Ozs7Ozs7O0FBUUEsSUFBSUUsb0JBQW9CLFNBQXBCQSxpQkFBb0IsQ0FBVUMsVUFBVixFQUFzQjtBQUMxQyxRQUFJQyxLQUFLSCxlQUFlSSxRQUFmLENBQXdCRCxFQUFqQztBQUNBLFFBQUlFLGdCQUFnQkgsV0FBV0ksS0FBWCxDQUFpQixVQUFqQixDQUFwQjtBQUNBLFFBQUksQ0FBQ0QsY0FBY0UsTUFBbkIsRUFDSTtBQUNKLFdBQU9KLEdBQUdLLEdBQUgsQ0FBT0gsY0FBY0ksR0FBZCxDQUFrQixVQUFVQyxJQUFWLEVBQWdCO0FBQUUsZUFBT1AsR0FBR1EsSUFBSCxDQUFRRCxLQUFLRSxJQUFMLEVBQVIsQ0FBUDtBQUE4QixLQUFsRSxDQUFQLEVBQTRFQyxJQUE1RSxDQUFpRmYsU0FBU2dCLElBQTFGLENBQVA7QUFDSCxDQU5EO0FBT0FsQixRQUFRbUIseUJBQVIsR0FBb0MsVUFBVUMsaUJBQVYsRUFBNkI7QUFDN0QsV0FBT0Esa0JBQWtCQyxRQUFsQixDQUEyQixFQUEzQixFQUErQmhCLGlCQUEvQixDQUFQO0FBQ0gsQ0FGRDtBQUdBOzs7Ozs7Ozs7O0FBVUEsSUFBSWlCLGdCQUFnQixTQUFoQkEsYUFBZ0IsQ0FBVWhCLFVBQVYsRUFBc0I7QUFDdEMsUUFBSUcsZ0JBQWdCSCxXQUFXSSxLQUFYLENBQWlCLFVBQWpCLENBQXBCO0FBQ0EsUUFBSWEsZUFBZWpCLFdBQVdJLEtBQVgsQ0FBaUIsU0FBakIsQ0FBbkI7QUFDQSxRQUFJLENBQUNELGNBQWNFLE1BQWYsSUFBeUIsQ0FBQ1ksYUFBYVosTUFBM0MsRUFDSTtBQUNKLFFBQUlhLFFBQVFsQixXQUFXbUIsTUFBWCxDQUFrQkMsV0FBOUI7QUFDQUgsaUJBQWFJLE9BQWIsQ0FBcUIsVUFBVUMsRUFBVixFQUFjO0FBQUUsZUFBT0osTUFBTUssb0JBQU4sQ0FBMkJELEVBQTNCLENBQVA7QUFBd0MsS0FBN0U7QUFDQW5CLGtCQUFja0IsT0FBZCxDQUFzQixVQUFVQyxFQUFWLEVBQWM7QUFBRSxlQUFPSixNQUFNTSxrQkFBTixDQUF5QkYsRUFBekIsQ0FBUDtBQUFzQyxLQUE1RTtBQUNBSixVQUFNTyxJQUFOO0FBQ0gsQ0FURDtBQVVBL0IsUUFBUWdDLHFCQUFSLEdBQWdDLFVBQVVaLGlCQUFWLEVBQTZCO0FBQ3pELFdBQU9BLGtCQUFrQmEsU0FBbEIsQ0FBNEIsRUFBNUIsRUFBZ0NYLGFBQWhDLENBQVA7QUFDSCxDQUZEO0FBR0EiLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKiBAbW9kdWxlIGhvb2tzICovIC8qKiBmb3IgdHlwZWRvYyAqL1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb21tb25cIik7XG52YXIgY29yZXNlcnZpY2VzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2NvcmVzZXJ2aWNlc1wiKTtcbi8qKlxuICogQSBbW1RyYW5zaXRpb25Ib29rRm5dXSB3aGljaCB3YWl0cyBmb3IgdGhlIHZpZXdzIHRvIGxvYWRcbiAqXG4gKiBSZWdpc3RlcmVkIHVzaW5nIGB0cmFuc2l0aW9uU2VydmljZS5vblN0YXJ0KHt9LCBsb2FkRW50ZXJpbmdWaWV3cyk7YFxuICpcbiAqIEFsbG93cyB0aGUgdmlld3MgdG8gZG8gYXN5bmMgd29yayBpbiBbW1ZpZXdDb25maWcubG9hZF1dIGJlZm9yZSB0aGUgdHJhbnNpdGlvbiBjb250aW51ZXMuXG4gKiBJbiBhbmd1bGFyIDEsIHRoaXMgaW5jbHVkZXMgbG9hZGluZyB0aGUgdGVtcGxhdGVzLlxuICovXG52YXIgbG9hZEVudGVyaW5nVmlld3MgPSBmdW5jdGlvbiAodHJhbnNpdGlvbikge1xuICAgIHZhciAkcSA9IGNvcmVzZXJ2aWNlc18xLnNlcnZpY2VzLiRxO1xuICAgIHZhciBlbnRlcmluZ1ZpZXdzID0gdHJhbnNpdGlvbi52aWV3cyhcImVudGVyaW5nXCIpO1xuICAgIGlmICghZW50ZXJpbmdWaWV3cy5sZW5ndGgpXG4gICAgICAgIHJldHVybjtcbiAgICByZXR1cm4gJHEuYWxsKGVudGVyaW5nVmlld3MubWFwKGZ1bmN0aW9uICh2aWV3KSB7IHJldHVybiAkcS53aGVuKHZpZXcubG9hZCgpKTsgfSkpLnRoZW4oY29tbW9uXzEubm9vcCk7XG59O1xuZXhwb3J0cy5yZWdpc3RlckxvYWRFbnRlcmluZ1ZpZXdzID0gZnVuY3Rpb24gKHRyYW5zaXRpb25TZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25TZXJ2aWNlLm9uRmluaXNoKHt9LCBsb2FkRW50ZXJpbmdWaWV3cyk7XG59O1xuLyoqXG4gKiBBIFtbVHJhbnNpdGlvbkhvb2tGbl1dIHdoaWNoIGFjdGl2YXRlcyB0aGUgbmV3IHZpZXdzIHdoZW4gYSB0cmFuc2l0aW9uIGlzIHN1Y2Nlc3NmdWwuXG4gKlxuICogUmVnaXN0ZXJlZCB1c2luZyBgdHJhbnNpdGlvblNlcnZpY2Uub25TdWNjZXNzKHt9LCBhY3RpdmF0ZVZpZXdzKTtgXG4gKlxuICogQWZ0ZXIgYSB0cmFuc2l0aW9uIGlzIGNvbXBsZXRlLCB0aGlzIGhvb2sgZGVhY3RpdmF0ZXMgdGhlIG9sZCB2aWV3cyBmcm9tIHRoZSBwcmV2aW91cyBzdGF0ZSxcbiAqIGFuZCBhY3RpdmF0ZXMgdGhlIG5ldyB2aWV3cyBmcm9tIHRoZSBkZXN0aW5hdGlvbiBzdGF0ZS5cbiAqXG4gKiBTZWUgW1tWaWV3U2VydmljZV1dXG4gKi9cbnZhciBhY3RpdmF0ZVZpZXdzID0gZnVuY3Rpb24gKHRyYW5zaXRpb24pIHtcbiAgICB2YXIgZW50ZXJpbmdWaWV3cyA9IHRyYW5zaXRpb24udmlld3MoXCJlbnRlcmluZ1wiKTtcbiAgICB2YXIgZXhpdGluZ1ZpZXdzID0gdHJhbnNpdGlvbi52aWV3cyhcImV4aXRpbmdcIik7XG4gICAgaWYgKCFlbnRlcmluZ1ZpZXdzLmxlbmd0aCAmJiAhZXhpdGluZ1ZpZXdzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciAkdmlldyA9IHRyYW5zaXRpb24ucm91dGVyLnZpZXdTZXJ2aWNlO1xuICAgIGV4aXRpbmdWaWV3cy5mb3JFYWNoKGZ1bmN0aW9uICh2YykgeyByZXR1cm4gJHZpZXcuZGVhY3RpdmF0ZVZpZXdDb25maWcodmMpOyB9KTtcbiAgICBlbnRlcmluZ1ZpZXdzLmZvckVhY2goZnVuY3Rpb24gKHZjKSB7IHJldHVybiAkdmlldy5hY3RpdmF0ZVZpZXdDb25maWcodmMpOyB9KTtcbiAgICAkdmlldy5zeW5jKCk7XG59O1xuZXhwb3J0cy5yZWdpc3RlckFjdGl2YXRlVmlld3MgPSBmdW5jdGlvbiAodHJhbnNpdGlvblNlcnZpY2UpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvblNlcnZpY2Uub25TdWNjZXNzKHt9LCBhY3RpdmF0ZVZpZXdzKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWV3cy5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL3ZpZXdzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///68\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\nvar common_1 = __webpack_require__(0);\n/**\n * A [[TransitionHookFn]] which updates global UI-Router state\n *\n * Registered using `transitionService.onBefore({}, updateGlobalState);`\n *\n * Before a [[Transition]] starts, updates the global value of "the current transition" ([[Globals.transition]]).\n * After a successful [[Transition]], updates the global values of "the current state"\n * ([[Globals.current]] and [[Globals.$current]]) and "the current param values" ([[Globals.params]]).\n *\n * See also the deprecated properties:\n * [[StateService.transition]], [[StateService.current]], [[StateService.params]]\n */\nvar updateGlobalState = function updateGlobalState(trans) {\n    var globals = trans.router.globals;\n    var transitionSuccessful = function transitionSuccessful() {\n        globals.successfulTransitions.enqueue(trans);\n        globals.$current = trans.$to();\n        globals.current = globals.$current.self;\n        common_1.copy(trans.params(), globals.params);\n    };\n    var clearCurrentTransition = function clearCurrentTransition() {\n        // Do not clear globals.transition if a different transition has started in the meantime\n        if (globals.transition === trans) globals.transition = null;\n    };\n    trans.onSuccess({}, transitionSuccessful, { priority: 10000 });\n    trans.promise.then(clearCurrentTransition, clearCurrentTransition);\n};\nexports.registerUpdateGlobalState = function (transitionService) {\n    return transitionService.onCreate({}, updateGlobalState);\n};\n//# sourceMappingURL=updateGlobals.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL3VwZGF0ZUdsb2JhbHMuanM/NTZkZiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbW1vbl8xIiwicmVxdWlyZSIsInVwZGF0ZUdsb2JhbFN0YXRlIiwidHJhbnMiLCJnbG9iYWxzIiwicm91dGVyIiwidHJhbnNpdGlvblN1Y2Nlc3NmdWwiLCJzdWNjZXNzZnVsVHJhbnNpdGlvbnMiLCJlbnF1ZXVlIiwiJGN1cnJlbnQiLCIkdG8iLCJjdXJyZW50Iiwic2VsZiIsImNvcHkiLCJwYXJhbXMiLCJjbGVhckN1cnJlbnRUcmFuc2l0aW9uIiwidHJhbnNpdGlvbiIsIm9uU3VjY2VzcyIsInByaW9yaXR5IiwicHJvbWlzZSIsInRoZW4iLCJyZWdpc3RlclVwZGF0ZUdsb2JhbFN0YXRlIiwidHJhbnNpdGlvblNlcnZpY2UiLCJvbkNyZWF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBLElBQUlDLFdBQVcsbUJBQUFDLENBQVEsQ0FBUixDQUFmO0FBQ0E7Ozs7Ozs7Ozs7OztBQVlBLElBQUlDLG9CQUFvQixTQUFwQkEsaUJBQW9CLENBQVVDLEtBQVYsRUFBaUI7QUFDckMsUUFBSUMsVUFBVUQsTUFBTUUsTUFBTixDQUFhRCxPQUEzQjtBQUNBLFFBQUlFLHVCQUF1QixTQUF2QkEsb0JBQXVCLEdBQVk7QUFDbkNGLGdCQUFRRyxxQkFBUixDQUE4QkMsT0FBOUIsQ0FBc0NMLEtBQXRDO0FBQ0FDLGdCQUFRSyxRQUFSLEdBQW1CTixNQUFNTyxHQUFOLEVBQW5CO0FBQ0FOLGdCQUFRTyxPQUFSLEdBQWtCUCxRQUFRSyxRQUFSLENBQWlCRyxJQUFuQztBQUNBWixpQkFBU2EsSUFBVCxDQUFjVixNQUFNVyxNQUFOLEVBQWQsRUFBOEJWLFFBQVFVLE1BQXRDO0FBQ0gsS0FMRDtBQU1BLFFBQUlDLHlCQUF5QixTQUF6QkEsc0JBQXlCLEdBQVk7QUFDckM7QUFDQSxZQUFJWCxRQUFRWSxVQUFSLEtBQXVCYixLQUEzQixFQUNJQyxRQUFRWSxVQUFSLEdBQXFCLElBQXJCO0FBQ1AsS0FKRDtBQUtBYixVQUFNYyxTQUFOLENBQWdCLEVBQWhCLEVBQW9CWCxvQkFBcEIsRUFBMEMsRUFBRVksVUFBVSxLQUFaLEVBQTFDO0FBQ0FmLFVBQU1nQixPQUFOLENBQWNDLElBQWQsQ0FBbUJMLHNCQUFuQixFQUEyQ0Esc0JBQTNDO0FBQ0gsQ0FmRDtBQWdCQWpCLFFBQVF1Qix5QkFBUixHQUFvQyxVQUFVQyxpQkFBVixFQUE2QjtBQUM3RCxXQUFPQSxrQkFBa0JDLFFBQWxCLENBQTJCLEVBQTNCLEVBQStCckIsaUJBQS9CLENBQVA7QUFDSCxDQUZEO0FBR0EiLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vY29tbW9uXCIpO1xuLyoqXG4gKiBBIFtbVHJhbnNpdGlvbkhvb2tGbl1dIHdoaWNoIHVwZGF0ZXMgZ2xvYmFsIFVJLVJvdXRlciBzdGF0ZVxuICpcbiAqIFJlZ2lzdGVyZWQgdXNpbmcgYHRyYW5zaXRpb25TZXJ2aWNlLm9uQmVmb3JlKHt9LCB1cGRhdGVHbG9iYWxTdGF0ZSk7YFxuICpcbiAqIEJlZm9yZSBhIFtbVHJhbnNpdGlvbl1dIHN0YXJ0cywgdXBkYXRlcyB0aGUgZ2xvYmFsIHZhbHVlIG9mIFwidGhlIGN1cnJlbnQgdHJhbnNpdGlvblwiIChbW0dsb2JhbHMudHJhbnNpdGlvbl1dKS5cbiAqIEFmdGVyIGEgc3VjY2Vzc2Z1bCBbW1RyYW5zaXRpb25dXSwgdXBkYXRlcyB0aGUgZ2xvYmFsIHZhbHVlcyBvZiBcInRoZSBjdXJyZW50IHN0YXRlXCJcbiAqIChbW0dsb2JhbHMuY3VycmVudF1dIGFuZCBbW0dsb2JhbHMuJGN1cnJlbnRdXSkgYW5kIFwidGhlIGN1cnJlbnQgcGFyYW0gdmFsdWVzXCIgKFtbR2xvYmFscy5wYXJhbXNdXSkuXG4gKlxuICogU2VlIGFsc28gdGhlIGRlcHJlY2F0ZWQgcHJvcGVydGllczpcbiAqIFtbU3RhdGVTZXJ2aWNlLnRyYW5zaXRpb25dXSwgW1tTdGF0ZVNlcnZpY2UuY3VycmVudF1dLCBbW1N0YXRlU2VydmljZS5wYXJhbXNdXVxuICovXG52YXIgdXBkYXRlR2xvYmFsU3RhdGUgPSBmdW5jdGlvbiAodHJhbnMpIHtcbiAgICB2YXIgZ2xvYmFscyA9IHRyYW5zLnJvdXRlci5nbG9iYWxzO1xuICAgIHZhciB0cmFuc2l0aW9uU3VjY2Vzc2Z1bCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2xvYmFscy5zdWNjZXNzZnVsVHJhbnNpdGlvbnMuZW5xdWV1ZSh0cmFucyk7XG4gICAgICAgIGdsb2JhbHMuJGN1cnJlbnQgPSB0cmFucy4kdG8oKTtcbiAgICAgICAgZ2xvYmFscy5jdXJyZW50ID0gZ2xvYmFscy4kY3VycmVudC5zZWxmO1xuICAgICAgICBjb21tb25fMS5jb3B5KHRyYW5zLnBhcmFtcygpLCBnbG9iYWxzLnBhcmFtcyk7XG4gICAgfTtcbiAgICB2YXIgY2xlYXJDdXJyZW50VHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRG8gbm90IGNsZWFyIGdsb2JhbHMudHJhbnNpdGlvbiBpZiBhIGRpZmZlcmVudCB0cmFuc2l0aW9uIGhhcyBzdGFydGVkIGluIHRoZSBtZWFudGltZVxuICAgICAgICBpZiAoZ2xvYmFscy50cmFuc2l0aW9uID09PSB0cmFucylcbiAgICAgICAgICAgIGdsb2JhbHMudHJhbnNpdGlvbiA9IG51bGw7XG4gICAgfTtcbiAgICB0cmFucy5vblN1Y2Nlc3Moe30sIHRyYW5zaXRpb25TdWNjZXNzZnVsLCB7IHByaW9yaXR5OiAxMDAwMCB9KTtcbiAgICB0cmFucy5wcm9taXNlLnRoZW4oY2xlYXJDdXJyZW50VHJhbnNpdGlvbiwgY2xlYXJDdXJyZW50VHJhbnNpdGlvbik7XG59O1xuZXhwb3J0cy5yZWdpc3RlclVwZGF0ZUdsb2JhbFN0YXRlID0gZnVuY3Rpb24gKHRyYW5zaXRpb25TZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25TZXJ2aWNlLm9uQ3JlYXRlKHt9LCB1cGRhdGVHbG9iYWxTdGF0ZSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBkYXRlR2xvYmFscy5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL3VwZGF0ZUdsb2JhbHMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///69\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A [[TransitionHookFn]] which updates the URL after a successful transition\n *\n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nvar updateUrl = function updateUrl(transition) {\n    var options = transition.options();\n    var $state = transition.router.stateService;\n    var $urlRouter = transition.router.urlRouter;\n    // Dont update the url in these situations:\n    // The transition was triggered by a URL sync (options.source === 'url')\n    // The user doesn't want the url to update (options.location === false)\n    // The destination state, and all parents have no navigable url\n    if (options.source !== 'url' && options.location && $state.$current.navigable) {\n        var urlOptions = { replace: options.location === 'replace' };\n        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n    }\n    $urlRouter.update(true);\n};\nexports.registerUpdateUrl = function (transitionService) {\n    return transitionService.onSuccess({}, updateUrl, { priority: 9999 });\n};\n//# sourceMappingURL=url.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL3VybC5qcz85ZmZlIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXBkYXRlVXJsIiwidHJhbnNpdGlvbiIsIm9wdGlvbnMiLCIkc3RhdGUiLCJyb3V0ZXIiLCJzdGF0ZVNlcnZpY2UiLCIkdXJsUm91dGVyIiwidXJsUm91dGVyIiwic291cmNlIiwibG9jYXRpb24iLCIkY3VycmVudCIsIm5hdmlnYWJsZSIsInVybE9wdGlvbnMiLCJyZXBsYWNlIiwicHVzaCIsInVybCIsInBhcmFtcyIsInVwZGF0ZSIsInJlZ2lzdGVyVXBkYXRlVXJsIiwidHJhbnNpdGlvblNlcnZpY2UiLCJvblN1Y2Nlc3MiLCJwcmlvcml0eSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBOzs7OztBQUtBLElBQUlDLFlBQVksU0FBWkEsU0FBWSxDQUFVQyxVQUFWLEVBQXNCO0FBQ2xDLFFBQUlDLFVBQVVELFdBQVdDLE9BQVgsRUFBZDtBQUNBLFFBQUlDLFNBQVNGLFdBQVdHLE1BQVgsQ0FBa0JDLFlBQS9CO0FBQ0EsUUFBSUMsYUFBYUwsV0FBV0csTUFBWCxDQUFrQkcsU0FBbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQUlMLFFBQVFNLE1BQVIsS0FBbUIsS0FBbkIsSUFBNEJOLFFBQVFPLFFBQXBDLElBQWdETixPQUFPTyxRQUFQLENBQWdCQyxTQUFwRSxFQUErRTtBQUMzRSxZQUFJQyxhQUFhLEVBQUVDLFNBQVNYLFFBQVFPLFFBQVIsS0FBcUIsU0FBaEMsRUFBakI7QUFDQUgsbUJBQVdRLElBQVgsQ0FBZ0JYLE9BQU9PLFFBQVAsQ0FBZ0JDLFNBQWhCLENBQTBCSSxHQUExQyxFQUErQ1osT0FBT2EsTUFBdEQsRUFBOERKLFVBQTlEO0FBQ0g7QUFDRE4sZUFBV1csTUFBWCxDQUFrQixJQUFsQjtBQUNILENBYkQ7QUFjQW5CLFFBQVFvQixpQkFBUixHQUE0QixVQUFVQyxpQkFBVixFQUE2QjtBQUNyRCxXQUFPQSxrQkFBa0JDLFNBQWxCLENBQTRCLEVBQTVCLEVBQWdDcEIsU0FBaEMsRUFBMkMsRUFBRXFCLFVBQVUsSUFBWixFQUEzQyxDQUFQO0FBQ0gsQ0FGRDtBQUdBIiwiZmlsZSI6IjcwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEEgW1tUcmFuc2l0aW9uSG9va0ZuXV0gd2hpY2ggdXBkYXRlcyB0aGUgVVJMIGFmdGVyIGEgc3VjY2Vzc2Z1bCB0cmFuc2l0aW9uXG4gKlxuICogUmVnaXN0ZXJlZCB1c2luZyBgdHJhbnNpdGlvblNlcnZpY2Uub25TdWNjZXNzKHt9LCB1cGRhdGVVcmwpO2BcbiAqL1xudmFyIHVwZGF0ZVVybCA9IGZ1bmN0aW9uICh0cmFuc2l0aW9uKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0cmFuc2l0aW9uLm9wdGlvbnMoKTtcbiAgICB2YXIgJHN0YXRlID0gdHJhbnNpdGlvbi5yb3V0ZXIuc3RhdGVTZXJ2aWNlO1xuICAgIHZhciAkdXJsUm91dGVyID0gdHJhbnNpdGlvbi5yb3V0ZXIudXJsUm91dGVyO1xuICAgIC8vIERvbnQgdXBkYXRlIHRoZSB1cmwgaW4gdGhlc2Ugc2l0dWF0aW9uczpcbiAgICAvLyBUaGUgdHJhbnNpdGlvbiB3YXMgdHJpZ2dlcmVkIGJ5IGEgVVJMIHN5bmMgKG9wdGlvbnMuc291cmNlID09PSAndXJsJylcbiAgICAvLyBUaGUgdXNlciBkb2Vzbid0IHdhbnQgdGhlIHVybCB0byB1cGRhdGUgKG9wdGlvbnMubG9jYXRpb24gPT09IGZhbHNlKVxuICAgIC8vIFRoZSBkZXN0aW5hdGlvbiBzdGF0ZSwgYW5kIGFsbCBwYXJlbnRzIGhhdmUgbm8gbmF2aWdhYmxlIHVybFxuICAgIGlmIChvcHRpb25zLnNvdXJjZSAhPT0gJ3VybCcgJiYgb3B0aW9ucy5sb2NhdGlvbiAmJiAkc3RhdGUuJGN1cnJlbnQubmF2aWdhYmxlKSB7XG4gICAgICAgIHZhciB1cmxPcHRpb25zID0geyByZXBsYWNlOiBvcHRpb25zLmxvY2F0aW9uID09PSAncmVwbGFjZScgfTtcbiAgICAgICAgJHVybFJvdXRlci5wdXNoKCRzdGF0ZS4kY3VycmVudC5uYXZpZ2FibGUudXJsLCAkc3RhdGUucGFyYW1zLCB1cmxPcHRpb25zKTtcbiAgICB9XG4gICAgJHVybFJvdXRlci51cGRhdGUodHJ1ZSk7XG59O1xuZXhwb3J0cy5yZWdpc3RlclVwZGF0ZVVybCA9IGZ1bmN0aW9uICh0cmFuc2l0aW9uU2VydmljZSkge1xuICAgIHJldHVybiB0cmFuc2l0aW9uU2VydmljZS5vblN1Y2Nlc3Moe30sIHVwZGF0ZVVybCwgeyBwcmlvcml0eTogOTk5OSB9KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmwuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi9ob29rcy91cmwuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///70\n")},function(module,exports,__webpack_require__){"use strict";eval("\n/** @module hooks */ /** */\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar trace_1 = __webpack_require__(6);\nvar rejectFactory_1 = __webpack_require__(11);\n/**\n * A [[TransitionHookFn]] that skips a transition if it should be ignored\n *\n * This hook is invoked at the end of the onBefore phase.\n *\n * If the transition should be ignored (because no parameter or states changed)\n * then the transition is ignored and not processed.\n */\nfunction ignoredHook(trans) {\n    var ignoredReason = trans._ignoredReason();\n    if (!ignoredReason) return;\n    trace_1.trace.traceTransitionIgnored(trans);\n    var pending = trans.router.globals.transition;\n    // The user clicked a link going back to the *current state* ('A')\n    // However, there is also a pending transition in flight (to 'B')\n    // Abort the transition to 'B' because the user now wants to be back at 'A'.\n    if (ignoredReason === 'SameAsCurrent' && pending) {\n        pending.abort();\n    }\n    return rejectFactory_1.Rejection.ignored().toPromise();\n}\nexports.registerIgnoredTransitionHook = function (transitionService) {\n    return transitionService.onBefore({}, ignoredHook, { priority: -9999 });\n};\n//# sourceMappingURL=ignoredTransition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL2lnbm9yZWRUcmFuc2l0aW9uLmpzP2NkNGIiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0cmFjZV8xIiwicmVxdWlyZSIsInJlamVjdEZhY3RvcnlfMSIsImlnbm9yZWRIb29rIiwidHJhbnMiLCJpZ25vcmVkUmVhc29uIiwiX2lnbm9yZWRSZWFzb24iLCJ0cmFjZSIsInRyYWNlVHJhbnNpdGlvbklnbm9yZWQiLCJwZW5kaW5nIiwicm91dGVyIiwiZ2xvYmFscyIsInRyYW5zaXRpb24iLCJhYm9ydCIsIlJlamVjdGlvbiIsImlnbm9yZWQiLCJ0b1Byb21pc2UiLCJyZWdpc3Rlcklnbm9yZWRUcmFuc2l0aW9uSG9vayIsInRyYW5zaXRpb25TZXJ2aWNlIiwib25CZWZvcmUiLCJwcmlvcml0eSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxvQixDQUFxQjs7QUFDckJBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBLElBQUlDLFVBQVUsbUJBQUFDLENBQVEsQ0FBUixDQUFkO0FBQ0EsSUFBSUMsa0JBQWtCLG1CQUFBRCxDQUFRLEVBQVIsQ0FBdEI7QUFDQTs7Ozs7Ozs7QUFRQSxTQUFTRSxXQUFULENBQXFCQyxLQUFyQixFQUE0QjtBQUN4QixRQUFJQyxnQkFBZ0JELE1BQU1FLGNBQU4sRUFBcEI7QUFDQSxRQUFJLENBQUNELGFBQUwsRUFDSTtBQUNKTCxZQUFRTyxLQUFSLENBQWNDLHNCQUFkLENBQXFDSixLQUFyQztBQUNBLFFBQUlLLFVBQVVMLE1BQU1NLE1BQU4sQ0FBYUMsT0FBYixDQUFxQkMsVUFBbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFJUCxrQkFBa0IsZUFBbEIsSUFBcUNJLE9BQXpDLEVBQWtEO0FBQzlDQSxnQkFBUUksS0FBUjtBQUNIO0FBQ0QsV0FBT1gsZ0JBQWdCWSxTQUFoQixDQUEwQkMsT0FBMUIsR0FBb0NDLFNBQXBDLEVBQVA7QUFDSDtBQUNEbEIsUUFBUW1CLDZCQUFSLEdBQXdDLFVBQVVDLGlCQUFWLEVBQTZCO0FBQ2pFLFdBQU9BLGtCQUFrQkMsUUFBbEIsQ0FBMkIsRUFBM0IsRUFBK0JoQixXQUEvQixFQUE0QyxFQUFFaUIsVUFBVSxDQUFDLElBQWIsRUFBNUMsQ0FBUDtBQUNILENBRkQ7QUFHQSIsImZpbGUiOiI3MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqIEBtb2R1bGUgaG9va3MgKi8gLyoqICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHJhY2VfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vdHJhY2VcIik7XG52YXIgcmVqZWN0RmFjdG9yeV8xID0gcmVxdWlyZShcIi4uL3RyYW5zaXRpb24vcmVqZWN0RmFjdG9yeVwiKTtcbi8qKlxuICogQSBbW1RyYW5zaXRpb25Ib29rRm5dXSB0aGF0IHNraXBzIGEgdHJhbnNpdGlvbiBpZiBpdCBzaG91bGQgYmUgaWdub3JlZFxuICpcbiAqIFRoaXMgaG9vayBpcyBpbnZva2VkIGF0IHRoZSBlbmQgb2YgdGhlIG9uQmVmb3JlIHBoYXNlLlxuICpcbiAqIElmIHRoZSB0cmFuc2l0aW9uIHNob3VsZCBiZSBpZ25vcmVkIChiZWNhdXNlIG5vIHBhcmFtZXRlciBvciBzdGF0ZXMgY2hhbmdlZClcbiAqIHRoZW4gdGhlIHRyYW5zaXRpb24gaXMgaWdub3JlZCBhbmQgbm90IHByb2Nlc3NlZC5cbiAqL1xuZnVuY3Rpb24gaWdub3JlZEhvb2sodHJhbnMpIHtcbiAgICB2YXIgaWdub3JlZFJlYXNvbiA9IHRyYW5zLl9pZ25vcmVkUmVhc29uKCk7XG4gICAgaWYgKCFpZ25vcmVkUmVhc29uKVxuICAgICAgICByZXR1cm47XG4gICAgdHJhY2VfMS50cmFjZS50cmFjZVRyYW5zaXRpb25JZ25vcmVkKHRyYW5zKTtcbiAgICB2YXIgcGVuZGluZyA9IHRyYW5zLnJvdXRlci5nbG9iYWxzLnRyYW5zaXRpb247XG4gICAgLy8gVGhlIHVzZXIgY2xpY2tlZCBhIGxpbmsgZ29pbmcgYmFjayB0byB0aGUgKmN1cnJlbnQgc3RhdGUqICgnQScpXG4gICAgLy8gSG93ZXZlciwgdGhlcmUgaXMgYWxzbyBhIHBlbmRpbmcgdHJhbnNpdGlvbiBpbiBmbGlnaHQgKHRvICdCJylcbiAgICAvLyBBYm9ydCB0aGUgdHJhbnNpdGlvbiB0byAnQicgYmVjYXVzZSB0aGUgdXNlciBub3cgd2FudHMgdG8gYmUgYmFjayBhdCAnQScuXG4gICAgaWYgKGlnbm9yZWRSZWFzb24gPT09ICdTYW1lQXNDdXJyZW50JyAmJiBwZW5kaW5nKSB7XG4gICAgICAgIHBlbmRpbmcuYWJvcnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlamVjdEZhY3RvcnlfMS5SZWplY3Rpb24uaWdub3JlZCgpLnRvUHJvbWlzZSgpO1xufVxuZXhwb3J0cy5yZWdpc3Rlcklnbm9yZWRUcmFuc2l0aW9uSG9vayA9IGZ1bmN0aW9uICh0cmFuc2l0aW9uU2VydmljZSkge1xuICAgIHJldHVybiB0cmFuc2l0aW9uU2VydmljZS5vbkJlZm9yZSh7fSwgaWdub3JlZEhvb2ssIHsgcHJpb3JpdHk6IC05OTk5IH0pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlnbm9yZWRUcmFuc2l0aW9uLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvaG9va3MvaWdub3JlZFRyYW5zaXRpb24uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///71\n")},function(module,exports,__webpack_require__){"use strict";eval('\n/** @module hooks */ /** */\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * A [[TransitionHookFn]] that rejects the Transition if it is invalid\n *\n * This hook is invoked at the end of the onBefore phase.\n * If the transition is invalid (for example, param values do not validate)\n * then the transition is rejected.\n */\nfunction invalidTransitionHook(trans) {\n    if (!trans.valid()) {\n        throw new Error(trans.error());\n    }\n}\nexports.registerInvalidTransitionHook = function (transitionService) {\n    return transitionService.onBefore({}, invalidTransitionHook, { priority: -10000 });\n};\n//# sourceMappingURL=invalidTransition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL2ludmFsaWRUcmFuc2l0aW9uLmpzPzhjMDQiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbnZhbGlkVHJhbnNpdGlvbkhvb2siLCJ0cmFucyIsInZhbGlkIiwiRXJyb3IiLCJlcnJvciIsInJlZ2lzdGVySW52YWxpZFRyYW5zaXRpb25Ib29rIiwidHJhbnNpdGlvblNlcnZpY2UiLCJvbkJlZm9yZSIsInByaW9yaXR5Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLG9CLENBQXFCOztBQUNyQkEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0E7Ozs7Ozs7QUFPQSxTQUFTQyxxQkFBVCxDQUErQkMsS0FBL0IsRUFBc0M7QUFDbEMsUUFBSSxDQUFDQSxNQUFNQyxLQUFOLEVBQUwsRUFBb0I7QUFDaEIsY0FBTSxJQUFJQyxLQUFKLENBQVVGLE1BQU1HLEtBQU4sRUFBVixDQUFOO0FBQ0g7QUFDSjtBQUNETixRQUFRTyw2QkFBUixHQUF3QyxVQUFVQyxpQkFBVixFQUE2QjtBQUNqRSxXQUFPQSxrQkFBa0JDLFFBQWxCLENBQTJCLEVBQTNCLEVBQStCUCxxQkFBL0IsRUFBc0QsRUFBRVEsVUFBVSxDQUFDLEtBQWIsRUFBdEQsQ0FBUDtBQUNILENBRkQ7QUFHQSIsImZpbGUiOiI3Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqIEBtb2R1bGUgaG9va3MgKi8gLyoqICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEEgW1tUcmFuc2l0aW9uSG9va0ZuXV0gdGhhdCByZWplY3RzIHRoZSBUcmFuc2l0aW9uIGlmIGl0IGlzIGludmFsaWRcbiAqXG4gKiBUaGlzIGhvb2sgaXMgaW52b2tlZCBhdCB0aGUgZW5kIG9mIHRoZSBvbkJlZm9yZSBwaGFzZS5cbiAqIElmIHRoZSB0cmFuc2l0aW9uIGlzIGludmFsaWQgKGZvciBleGFtcGxlLCBwYXJhbSB2YWx1ZXMgZG8gbm90IHZhbGlkYXRlKVxuICogdGhlbiB0aGUgdHJhbnNpdGlvbiBpcyByZWplY3RlZC5cbiAqL1xuZnVuY3Rpb24gaW52YWxpZFRyYW5zaXRpb25Ib29rKHRyYW5zKSB7XG4gICAgaWYgKCF0cmFucy52YWxpZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih0cmFucy5lcnJvcigpKTtcbiAgICB9XG59XG5leHBvcnRzLnJlZ2lzdGVySW52YWxpZFRyYW5zaXRpb25Ib29rID0gZnVuY3Rpb24gKHRyYW5zaXRpb25TZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25TZXJ2aWNlLm9uQmVmb3JlKHt9LCBpbnZhbGlkVHJhbnNpdGlvbkhvb2ssIHsgcHJpb3JpdHk6IC0xMDAwMCB9KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnZhbGlkVHJhbnNpdGlvbi5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2hvb2tzL2ludmFsaWRUcmFuc2l0aW9uLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///72\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * # Transition subsystem\n *\n * This module contains APIs related to a Transition.\n *\n * See:\n * - [[TransitionService]]\n * - [[Transition]]\n * - [[HookFn]], [[TransitionHookFn]], [[TransitionStateHookFn]], [[HookMatchCriteria]], [[HookResult]]\n *\n * @coreapi\n * @preferred\n * @module transition\n */ /** for typedoc */\n__export(__webpack_require__(8));\n__export(__webpack_require__(30));\n__export(__webpack_require__(24));\n__export(__webpack_require__(11));\n__export(__webpack_require__(17));\n__export(__webpack_require__(12));\n__export(__webpack_require__(47));\n__export(__webpack_require__(27));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3RyYW5zaXRpb24vaW5kZXguanM/NjYzYyJdLCJuYW1lcyI6WyJfX2V4cG9ydCIsIm0iLCJwIiwiZXhwb3J0cyIsImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLFNBQVNBLFFBQVQsQ0FBa0JDLENBQWxCLEVBQXFCO0FBQ2pCLE9BQUssSUFBSUMsQ0FBVCxJQUFjRCxDQUFkO0FBQWlCLFFBQUksQ0FBQ0UsUUFBUUMsY0FBUixDQUF1QkYsQ0FBdkIsQ0FBTCxFQUFnQ0MsUUFBUUQsQ0FBUixJQUFhRCxFQUFFQyxDQUFGLENBQWI7QUFBakQ7QUFDSDtBQUNERyxPQUFPQyxjQUFQLENBQXNCSCxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFSSxPQUFPLElBQVQsRUFBN0M7QUFDQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBQ0pQLFNBQVMsbUJBQUFRLENBQVEsQ0FBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0FSLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0EiLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqICMgVHJhbnNpdGlvbiBzdWJzeXN0ZW1cbiAqXG4gKiBUaGlzIG1vZHVsZSBjb250YWlucyBBUElzIHJlbGF0ZWQgdG8gYSBUcmFuc2l0aW9uLlxuICpcbiAqIFNlZTpcbiAqIC0gW1tUcmFuc2l0aW9uU2VydmljZV1dXG4gKiAtIFtbVHJhbnNpdGlvbl1dXG4gKiAtIFtbSG9va0ZuXV0sIFtbVHJhbnNpdGlvbkhvb2tGbl1dLCBbW1RyYW5zaXRpb25TdGF0ZUhvb2tGbl1dLCBbW0hvb2tNYXRjaENyaXRlcmlhXV0sIFtbSG9va1Jlc3VsdF1dXG4gKlxuICogQGNvcmVhcGlcbiAqIEBwcmVmZXJyZWRcbiAqIEBtb2R1bGUgdHJhbnNpdGlvblxuICovIC8qKiBmb3IgdHlwZWRvYyAqL1xuX19leHBvcnQocmVxdWlyZShcIi4vaW50ZXJmYWNlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2hvb2tCdWlsZGVyXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2hvb2tSZWdpc3RyeVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9yZWplY3RGYWN0b3J5XCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3RyYW5zaXRpb25cIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vdHJhbnNpdGlvbkhvb2tcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vdHJhbnNpdGlvbkV2ZW50VHlwZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi90cmFuc2l0aW9uU2VydmljZVwiKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3RyYW5zaXRpb24vaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///73\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction __export(m) {\n    for (var p in m) {\n        if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n__export(__webpack_require__(20));\n__export(__webpack_require__(40));\n__export(__webpack_require__(41));\n__export(__webpack_require__(42));\n__export(__webpack_require__(45));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3VybC9pbmRleC5qcz9kMWM4Il0sIm5hbWVzIjpbIl9fZXhwb3J0IiwibSIsInAiLCJleHBvcnRzIiwiaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsU0FBU0EsUUFBVCxDQUFrQkMsQ0FBbEIsRUFBcUI7QUFDakIsU0FBSyxJQUFJQyxDQUFULElBQWNELENBQWQ7QUFBaUIsWUFBSSxDQUFDRSxRQUFRQyxjQUFSLENBQXVCRixDQUF2QixDQUFMLEVBQWdDQyxRQUFRRCxDQUFSLElBQWFELEVBQUVDLENBQUYsQ0FBYjtBQUFqRDtBQUNIO0FBQ0RHLE9BQU9DLGNBQVAsQ0FBc0JILE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVJLE9BQU8sSUFBVCxFQUE3QztBQUNBUCxTQUFTLG1CQUFBUSxDQUFRLEVBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLEVBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLEVBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLEVBQVIsQ0FBVDtBQUNBUixTQUFTLG1CQUFBUSxDQUFRLEVBQVIsQ0FBVDtBQUNBIiwiZmlsZSI6Ijc0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vdXJsTWF0Y2hlclwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi91cmxNYXRjaGVyRmFjdG9yeVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi91cmxSb3V0ZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vdXJsUnVsZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi91cmxTZXJ2aWNlXCIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvdXJsL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///74\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction __export(m) {\n    for (var p in m) {\n        if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n__export(__webpack_require__(43));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZpZXcvaW5kZXguanM/MGMwYyJdLCJuYW1lcyI6WyJfX2V4cG9ydCIsIm0iLCJwIiwiZXhwb3J0cyIsImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLFNBQVNBLFFBQVQsQ0FBa0JDLENBQWxCLEVBQXFCO0FBQ2pCLFNBQUssSUFBSUMsQ0FBVCxJQUFjRCxDQUFkO0FBQWlCLFlBQUksQ0FBQ0UsUUFBUUMsY0FBUixDQUF1QkYsQ0FBdkIsQ0FBTCxFQUFnQ0MsUUFBUUQsQ0FBUixJQUFhRCxFQUFFQyxDQUFGLENBQWI7QUFBakQ7QUFDSDtBQUNERyxPQUFPQyxjQUFQLENBQXNCSCxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFSSxPQUFPLElBQVQsRUFBN0M7QUFDQVAsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQSIsImZpbGUiOiI3NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3ZpZXdcIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi92aWV3L2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///75\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\n__export(__webpack_require__(77));\n//# sourceMappingURL=vanilla.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEuanM/YjczMSJdLCJuYW1lcyI6WyJfX2V4cG9ydCIsIm0iLCJwIiwiZXhwb3J0cyIsImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLFNBQVNBLFFBQVQsQ0FBa0JDLENBQWxCLEVBQXFCO0FBQ2pCLE9BQUssSUFBSUMsQ0FBVCxJQUFjRCxDQUFkO0FBQWlCLFFBQUksQ0FBQ0UsUUFBUUMsY0FBUixDQUF1QkYsQ0FBdkIsQ0FBTCxFQUFnQ0MsUUFBUUQsQ0FBUixJQUFhRCxFQUFFQyxDQUFGLENBQWI7QUFBakQ7QUFDSDtBQUNERyxPQUFPQyxjQUFQLENBQXNCSCxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFSSxPQUFPLElBQVQsRUFBN0M7QUFDQTs7OztBQUlBO0FBQ0FQLFNBQVMsbUJBQUFRLENBQVEsRUFBUixDQUFUO0FBQ0EiLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBpbnRlcm5hbGFwaVxuICogQG1vZHVsZSB2YW5pbGxhXG4gKi9cbi8qKiAqL1xuX19leHBvcnQocmVxdWlyZShcIi4vdmFuaWxsYS9pbmRleFwiKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YW5pbGxhLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvdmFuaWxsYS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///76\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction __export(m) {\n    for (var p in m) {\n        if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n__export(__webpack_require__(48));\n__export(__webpack_require__(49));\n__export(__webpack_require__(21));\n__export(__webpack_require__(50));\n__export(__webpack_require__(51));\n__export(__webpack_require__(52));\n__export(__webpack_require__(53));\n__export(__webpack_require__(54));\n__export(__webpack_require__(14));\n__export(__webpack_require__(78));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvaW5kZXguanM/OTc1ZSJdLCJuYW1lcyI6WyJfX2V4cG9ydCIsIm0iLCJwIiwiZXhwb3J0cyIsImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLFNBQVNBLFFBQVQsQ0FBa0JDLENBQWxCLEVBQXFCO0FBQ2pCLFNBQUssSUFBSUMsQ0FBVCxJQUFjRCxDQUFkO0FBQWlCLFlBQUksQ0FBQ0UsUUFBUUMsY0FBUixDQUF1QkYsQ0FBdkIsQ0FBTCxFQUFnQ0MsUUFBUUQsQ0FBUixJQUFhRCxFQUFFQyxDQUFGLENBQWI7QUFBakQ7QUFDSDtBQUNERyxPQUFPQyxjQUFQLENBQXNCSCxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFSSxPQUFPLElBQVQsRUFBN0M7QUFDQVAsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQVIsU0FBUyxtQkFBQVEsQ0FBUSxFQUFSLENBQVQ7QUFDQSIsImZpbGUiOiI3Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3FcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vaW5qZWN0b3JcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vYmFzZUxvY2F0aW9uU2VydmljZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9oYXNoTG9jYXRpb25TZXJ2aWNlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL21lbW9yeUxvY2F0aW9uU2VydmljZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9wdXNoU3RhdGVMb2NhdGlvblNlcnZpY2VcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vbWVtb3J5TG9jYXRpb25Db25maWdcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vYnJvd3NlckxvY2F0aW9uQ29uZmlnXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3V0aWxzXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3BsdWdpbnNcIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B1aXJvdXRlci9jb3JlL2xpYi92YW5pbGxhL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///77\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar browserLocationConfig_1 = __webpack_require__(54);\nvar hashLocationService_1 = __webpack_require__(50);\nvar utils_1 = __webpack_require__(14);\nvar pushStateLocationService_1 = __webpack_require__(52);\nvar memoryLocationService_1 = __webpack_require__(51);\nvar memoryLocationConfig_1 = __webpack_require__(53);\nvar injector_1 = __webpack_require__(49);\nvar q_1 = __webpack_require__(48);\nvar coreservices_1 = __webpack_require__(3);\nfunction servicesPlugin(router) {\n  coreservices_1.services.$injector = injector_1.$injector;\n  coreservices_1.services.$q = q_1.$q;\n  return { name: "vanilla.services", $q: q_1.$q, $injector: injector_1.$injector, dispose: function dispose() {\n      return null;\n    } };\n}\nexports.servicesPlugin = servicesPlugin;\n/** A `UIRouterPlugin` uses the browser hash to get/set the current location */\nexports.hashLocationPlugin = utils_1.locationPluginFactory(\'vanilla.hashBangLocation\', false, hashLocationService_1.HashLocationService, browserLocationConfig_1.BrowserLocationConfig);\n/** A `UIRouterPlugin` that gets/sets the current location using the browser\'s `location` and `history` apis */\nexports.pushStateLocationPlugin = utils_1.locationPluginFactory("vanilla.pushStateLocation", true, pushStateLocationService_1.PushStateLocationService, browserLocationConfig_1.BrowserLocationConfig);\n/** A `UIRouterPlugin` that gets/sets the current location from an in-memory object */\nexports.memoryLocationPlugin = utils_1.locationPluginFactory("vanilla.memoryLocation", false, memoryLocationService_1.MemoryLocationService, memoryLocationConfig_1.MemoryLocationConfig);\n//# sourceMappingURL=plugins.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL3ZhbmlsbGEvcGx1Z2lucy5qcz8yNzI0Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYnJvd3NlckxvY2F0aW9uQ29uZmlnXzEiLCJyZXF1aXJlIiwiaGFzaExvY2F0aW9uU2VydmljZV8xIiwidXRpbHNfMSIsInB1c2hTdGF0ZUxvY2F0aW9uU2VydmljZV8xIiwibWVtb3J5TG9jYXRpb25TZXJ2aWNlXzEiLCJtZW1vcnlMb2NhdGlvbkNvbmZpZ18xIiwiaW5qZWN0b3JfMSIsInFfMSIsImNvcmVzZXJ2aWNlc18xIiwic2VydmljZXNQbHVnaW4iLCJyb3V0ZXIiLCJzZXJ2aWNlcyIsIiRpbmplY3RvciIsIiRxIiwibmFtZSIsImRpc3Bvc2UiLCJoYXNoTG9jYXRpb25QbHVnaW4iLCJsb2NhdGlvblBsdWdpbkZhY3RvcnkiLCJIYXNoTG9jYXRpb25TZXJ2aWNlIiwiQnJvd3NlckxvY2F0aW9uQ29uZmlnIiwicHVzaFN0YXRlTG9jYXRpb25QbHVnaW4iLCJQdXNoU3RhdGVMb2NhdGlvblNlcnZpY2UiLCJtZW1vcnlMb2NhdGlvblBsdWdpbiIsIk1lbW9yeUxvY2F0aW9uU2VydmljZSIsIk1lbW9yeUxvY2F0aW9uQ29uZmlnIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0E7Ozs7QUFJQTtBQUNBLElBQUlDLDBCQUEwQixtQkFBQUMsQ0FBUSxFQUFSLENBQTlCO0FBQ0EsSUFBSUMsd0JBQXdCLG1CQUFBRCxDQUFRLEVBQVIsQ0FBNUI7QUFDQSxJQUFJRSxVQUFVLG1CQUFBRixDQUFRLEVBQVIsQ0FBZDtBQUNBLElBQUlHLDZCQUE2QixtQkFBQUgsQ0FBUSxFQUFSLENBQWpDO0FBQ0EsSUFBSUksMEJBQTBCLG1CQUFBSixDQUFRLEVBQVIsQ0FBOUI7QUFDQSxJQUFJSyx5QkFBeUIsbUJBQUFMLENBQVEsRUFBUixDQUE3QjtBQUNBLElBQUlNLGFBQWEsbUJBQUFOLENBQVEsRUFBUixDQUFqQjtBQUNBLElBQUlPLE1BQU0sbUJBQUFQLENBQVEsRUFBUixDQUFWO0FBQ0EsSUFBSVEsaUJBQWlCLG1CQUFBUixDQUFRLENBQVIsQ0FBckI7QUFDQSxTQUFTUyxjQUFULENBQXdCQyxNQUF4QixFQUFnQztBQUM1QkYsaUJBQWVHLFFBQWYsQ0FBd0JDLFNBQXhCLEdBQW9DTixXQUFXTSxTQUEvQztBQUNBSixpQkFBZUcsUUFBZixDQUF3QkUsRUFBeEIsR0FBNkJOLElBQUlNLEVBQWpDO0FBQ0EsU0FBTyxFQUFFQyxNQUFNLGtCQUFSLEVBQTRCRCxJQUFJTixJQUFJTSxFQUFwQyxFQUF3Q0QsV0FBV04sV0FBV00sU0FBOUQsRUFBeUVHLFNBQVMsbUJBQVk7QUFBRSxhQUFPLElBQVA7QUFBYyxLQUE5RyxFQUFQO0FBQ0g7QUFDRGxCLFFBQVFZLGNBQVIsR0FBeUJBLGNBQXpCO0FBQ0E7QUFDQVosUUFBUW1CLGtCQUFSLEdBQTZCZCxRQUFRZSxxQkFBUixDQUE4QiwwQkFBOUIsRUFBMEQsS0FBMUQsRUFBaUVoQixzQkFBc0JpQixtQkFBdkYsRUFBNEduQix3QkFBd0JvQixxQkFBcEksQ0FBN0I7QUFDQTtBQUNBdEIsUUFBUXVCLHVCQUFSLEdBQWtDbEIsUUFBUWUscUJBQVIsQ0FBOEIsMkJBQTlCLEVBQTJELElBQTNELEVBQWlFZCwyQkFBMkJrQix3QkFBNUYsRUFBc0h0Qix3QkFBd0JvQixxQkFBOUksQ0FBbEM7QUFDQTtBQUNBdEIsUUFBUXlCLG9CQUFSLEdBQStCcEIsUUFBUWUscUJBQVIsQ0FBOEIsd0JBQTlCLEVBQXdELEtBQXhELEVBQStEYix3QkFBd0JtQixxQkFBdkYsRUFBOEdsQix1QkFBdUJtQixvQkFBckksQ0FBL0I7QUFDQSIsImZpbGUiOiI3OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAaW50ZXJuYWxhcGlcbiAqIEBtb2R1bGUgdmFuaWxsYVxuICovXG4vKiogKi9cbnZhciBicm93c2VyTG9jYXRpb25Db25maWdfMSA9IHJlcXVpcmUoXCIuL2Jyb3dzZXJMb2NhdGlvbkNvbmZpZ1wiKTtcbnZhciBoYXNoTG9jYXRpb25TZXJ2aWNlXzEgPSByZXF1aXJlKFwiLi9oYXNoTG9jYXRpb25TZXJ2aWNlXCIpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbnZhciBwdXNoU3RhdGVMb2NhdGlvblNlcnZpY2VfMSA9IHJlcXVpcmUoXCIuL3B1c2hTdGF0ZUxvY2F0aW9uU2VydmljZVwiKTtcbnZhciBtZW1vcnlMb2NhdGlvblNlcnZpY2VfMSA9IHJlcXVpcmUoXCIuL21lbW9yeUxvY2F0aW9uU2VydmljZVwiKTtcbnZhciBtZW1vcnlMb2NhdGlvbkNvbmZpZ18xID0gcmVxdWlyZShcIi4vbWVtb3J5TG9jYXRpb25Db25maWdcIik7XG52YXIgaW5qZWN0b3JfMSA9IHJlcXVpcmUoXCIuL2luamVjdG9yXCIpO1xudmFyIHFfMSA9IHJlcXVpcmUoXCIuL3FcIik7XG52YXIgY29yZXNlcnZpY2VzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2NvcmVzZXJ2aWNlc1wiKTtcbmZ1bmN0aW9uIHNlcnZpY2VzUGx1Z2luKHJvdXRlcikge1xuICAgIGNvcmVzZXJ2aWNlc18xLnNlcnZpY2VzLiRpbmplY3RvciA9IGluamVjdG9yXzEuJGluamVjdG9yO1xuICAgIGNvcmVzZXJ2aWNlc18xLnNlcnZpY2VzLiRxID0gcV8xLiRxO1xuICAgIHJldHVybiB7IG5hbWU6IFwidmFuaWxsYS5zZXJ2aWNlc1wiLCAkcTogcV8xLiRxLCAkaW5qZWN0b3I6IGluamVjdG9yXzEuJGluamVjdG9yLCBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9IH07XG59XG5leHBvcnRzLnNlcnZpY2VzUGx1Z2luID0gc2VydmljZXNQbHVnaW47XG4vKiogQSBgVUlSb3V0ZXJQbHVnaW5gIHVzZXMgdGhlIGJyb3dzZXIgaGFzaCB0byBnZXQvc2V0IHRoZSBjdXJyZW50IGxvY2F0aW9uICovXG5leHBvcnRzLmhhc2hMb2NhdGlvblBsdWdpbiA9IHV0aWxzXzEubG9jYXRpb25QbHVnaW5GYWN0b3J5KCd2YW5pbGxhLmhhc2hCYW5nTG9jYXRpb24nLCBmYWxzZSwgaGFzaExvY2F0aW9uU2VydmljZV8xLkhhc2hMb2NhdGlvblNlcnZpY2UsIGJyb3dzZXJMb2NhdGlvbkNvbmZpZ18xLkJyb3dzZXJMb2NhdGlvbkNvbmZpZyk7XG4vKiogQSBgVUlSb3V0ZXJQbHVnaW5gIHRoYXQgZ2V0cy9zZXRzIHRoZSBjdXJyZW50IGxvY2F0aW9uIHVzaW5nIHRoZSBicm93c2VyJ3MgYGxvY2F0aW9uYCBhbmQgYGhpc3RvcnlgIGFwaXMgKi9cbmV4cG9ydHMucHVzaFN0YXRlTG9jYXRpb25QbHVnaW4gPSB1dGlsc18xLmxvY2F0aW9uUGx1Z2luRmFjdG9yeShcInZhbmlsbGEucHVzaFN0YXRlTG9jYXRpb25cIiwgdHJ1ZSwgcHVzaFN0YXRlTG9jYXRpb25TZXJ2aWNlXzEuUHVzaFN0YXRlTG9jYXRpb25TZXJ2aWNlLCBicm93c2VyTG9jYXRpb25Db25maWdfMS5Ccm93c2VyTG9jYXRpb25Db25maWcpO1xuLyoqIEEgYFVJUm91dGVyUGx1Z2luYCB0aGF0IGdldHMvc2V0cyB0aGUgY3VycmVudCBsb2NhdGlvbiBmcm9tIGFuIGluLW1lbW9yeSBvYmplY3QgKi9cbmV4cG9ydHMubWVtb3J5TG9jYXRpb25QbHVnaW4gPSB1dGlsc18xLmxvY2F0aW9uUGx1Z2luRmFjdG9yeShcInZhbmlsbGEubWVtb3J5TG9jYXRpb25cIiwgZmFsc2UsIG1lbW9yeUxvY2F0aW9uU2VydmljZV8xLk1lbW9yeUxvY2F0aW9uU2VydmljZSwgbWVtb3J5TG9jYXRpb25Db25maWdfMS5NZW1vcnlMb2NhdGlvbkNvbmZpZyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbHVnaW5zLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvdmFuaWxsYS9wbHVnaW5zLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///78\n')},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * # Core classes and interfaces\n *\n * The classes and interfaces that are core to ui-router and do not belong\n * to a more specific subsystem (such as resolve).\n *\n * @coreapi\n * @preferred\n * @module core\n */ /** for typedoc */\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @internalapi */\nvar UIRouterPluginBase = function () {\n  function UIRouterPluginBase() {}\n  UIRouterPluginBase.prototype.dispose = function (router) {};\n  return UIRouterPluginBase;\n}();\nexports.UIRouterPluginBase = UIRouterPluginBase;\n//# sourceMappingURL=interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpcm91dGVyL2NvcmUvbGliL2ludGVyZmFjZS5qcz84NzU0Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVUlSb3V0ZXJQbHVnaW5CYXNlIiwicHJvdG90eXBlIiwiZGlzcG9zZSIsInJvdXRlciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7Ozs7Ozs7O0lBU0k7O0FBQ0pBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBO0FBQ0EsSUFBSUMscUJBQXNCLFlBQVk7QUFDbEMsV0FBU0Esa0JBQVQsR0FBOEIsQ0FDN0I7QUFDREEscUJBQW1CQyxTQUFuQixDQUE2QkMsT0FBN0IsR0FBdUMsVUFBVUMsTUFBVixFQUFrQixDQUFHLENBQTVEO0FBQ0EsU0FBT0gsa0JBQVA7QUFDSCxDQUx5QixFQUExQjtBQU1BRixRQUFRRSxrQkFBUixHQUE2QkEsa0JBQTdCO0FBQ0EiLCJmaWxlIjoiNzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogIyBDb3JlIGNsYXNzZXMgYW5kIGludGVyZmFjZXNcbiAqXG4gKiBUaGUgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyB0aGF0IGFyZSBjb3JlIHRvIHVpLXJvdXRlciBhbmQgZG8gbm90IGJlbG9uZ1xuICogdG8gYSBtb3JlIHNwZWNpZmljIHN1YnN5c3RlbSAoc3VjaCBhcyByZXNvbHZlKS5cbiAqXG4gKiBAY29yZWFwaVxuICogQHByZWZlcnJlZFxuICogQG1vZHVsZSBjb3JlXG4gKi8gLyoqIGZvciB0eXBlZG9jICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiogQGludGVybmFsYXBpICovXG52YXIgVUlSb3V0ZXJQbHVnaW5CYXNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVSVJvdXRlclBsdWdpbkJhc2UoKSB7XG4gICAgfVxuICAgIFVJUm91dGVyUGx1Z2luQmFzZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIChyb3V0ZXIpIHsgfTtcbiAgICByZXR1cm4gVUlSb3V0ZXJQbHVnaW5CYXNlO1xufSgpKTtcbmV4cG9ydHMuVUlSb3V0ZXJQbHVnaW5CYXNlID0gVUlSb3V0ZXJQbHVnaW5CYXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9AdWlyb3V0ZXIvY29yZS9saWIvaW50ZXJmYWNlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///79\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @module view */\n/** for typedoc */\nvar angular_1 = __webpack_require__(10);\nvar core_1 = __webpack_require__(4);\n/**\n * Service which manages loading of templates from a ViewConfig.\n */\nvar TemplateFactory = function () {\n    function TemplateFactory() {\n        var _this = this;\n        /** @hidden */this._useHttp = angular_1.ng.version.minor < 3;\n        /** @hidden */this.$get = [\'$http\', \'$templateCache\', \'$injector\', function ($http, $templateCache, $injector) {\n            _this.$templateRequest = $injector.has && $injector.has(\'$templateRequest\') && $injector.get(\'$templateRequest\');\n            _this.$http = $http;\n            _this.$templateCache = $templateCache;\n            return _this;\n        }];\n    }\n    /** @hidden */\n    TemplateFactory.prototype.useHttpService = function (value) {\n        this._useHttp = value;\n    };\n    ;\n    /**\n     * Creates a template from a configuration object.\n     *\n     * @param config Configuration object for which to load a template.\n     * The following properties are search in the specified order, and the first one\n     * that is defined is used to create the template:\n     *\n     * @param params  Parameters to pass to the template function.\n     * @param context The resolve context associated with the template\'s view\n     *\n     * @return {string|object}  The template html as a string, or a promise for\n     * that string,or `null` if no template is configured.\n     */\n    TemplateFactory.prototype.fromConfig = function (config, params, context) {\n        var defaultTemplate = "<ui-view></ui-view>";\n        var asTemplate = function asTemplate(result) {\n            return core_1.services.$q.when(result).then(function (str) {\n                return { template: str };\n            });\n        };\n        var asComponent = function asComponent(result) {\n            return core_1.services.$q.when(result).then(function (str) {\n                return { component: str };\n            });\n        };\n        return core_1.isDefined(config.template) ? asTemplate(this.fromString(config.template, params)) : core_1.isDefined(config.templateUrl) ? asTemplate(this.fromUrl(config.templateUrl, params)) : core_1.isDefined(config.templateProvider) ? asTemplate(this.fromProvider(config.templateProvider, params, context)) : core_1.isDefined(config.component) ? asComponent(config.component) : core_1.isDefined(config.componentProvider) ? asComponent(this.fromComponentProvider(config.componentProvider, params, context)) : asTemplate(defaultTemplate);\n    };\n    ;\n    /**\n     * Creates a template from a string or a function returning a string.\n     *\n     * @param template html template as a string or function that returns an html template as a string.\n     * @param params Parameters to pass to the template function.\n     *\n     * @return {string|object} The template html as a string, or a promise for that\n     * string.\n     */\n    TemplateFactory.prototype.fromString = function (template, params) {\n        return core_1.isFunction(template) ? template(params) : template;\n    };\n    ;\n    /**\n     * Loads a template from the a URL via `$http` and `$templateCache`.\n     *\n     * @param {string|Function} url url of the template to load, or a function\n     * that returns a url.\n     * @param {Object} params Parameters to pass to the url function.\n     * @return {string|Promise.<string>} The template html as a string, or a promise\n     * for that string.\n     */\n    TemplateFactory.prototype.fromUrl = function (url, params) {\n        if (core_1.isFunction(url)) url = url(params);\n        if (url == null) return null;\n        if (this._useHttp) {\n            return this.$http.get(url, { cache: this.$templateCache, headers: { Accept: \'text/html\' } }).then(function (response) {\n                return response.data;\n            });\n        }\n        return this.$templateRequest(url);\n    };\n    ;\n    /**\n     * Creates a template by invoking an injectable provider function.\n     *\n     * @param provider Function to invoke via `locals`\n     * @param {Function} injectFn a function used to invoke the template provider\n     * @return {string|Promise.<string>} The template html as a string, or a promise\n     * for that string.\n     */\n    TemplateFactory.prototype.fromProvider = function (provider, params, context) {\n        var deps = core_1.services.$injector.annotate(provider);\n        var providerFn = core_1.isArray(provider) ? core_1.tail(provider) : provider;\n        var resolvable = new core_1.Resolvable("", providerFn, deps);\n        return resolvable.get(context);\n    };\n    ;\n    /**\n     * Creates a component\'s template by invoking an injectable provider function.\n     *\n     * @param provider Function to invoke via `locals`\n     * @param {Function} injectFn a function used to invoke the template provider\n     * @return {string} The template html as a string: "<component-name input1=\'::$resolve.foo\'></component-name>".\n     */\n    TemplateFactory.prototype.fromComponentProvider = function (provider, params, context) {\n        var deps = core_1.services.$injector.annotate(provider);\n        var providerFn = core_1.isArray(provider) ? core_1.tail(provider) : provider;\n        var resolvable = new core_1.Resolvable("", providerFn, deps);\n        return resolvable.get(context);\n    };\n    ;\n    /**\n     * Creates a template from a component\'s name\n     *\n     * This implements route-to-component.\n     * It works by retrieving the component (directive) metadata from the injector.\n     * It analyses the component\'s bindings, then constructs a template that instantiates the component.\n     * The template wires input and output bindings to resolves or from the parent component.\n     *\n     * @param uiView {object} The parent ui-view (for binding outputs to callbacks)\n     * @param context The ResolveContext (for binding outputs to callbacks returned from resolves)\n     * @param component {string} Component\'s name in camel case.\n     * @param bindings An object defining the component\'s bindings: {foo: \'<\'}\n     * @return {string} The template as a string: "<component-name input1=\'::$resolve.foo\'></component-name>".\n     */\n    TemplateFactory.prototype.makeComponentTemplate = function (uiView, context, component, bindings) {\n        bindings = bindings || {};\n        // Bind once prefix\n        var prefix = angular_1.ng.version.minor >= 3 ? "::" : "";\n        // Convert to kebob name. Add x- prefix if the string starts with `x-` or `data-`\n        var kebob = function kebob(camelCase) {\n            var kebobed = core_1.kebobString(camelCase);\n            return (/^(x|data)-/.exec(kebobed) ? "x-" + kebobed : kebobed\n            );\n        };\n        var attributeTpl = function attributeTpl(input) {\n            var name = input.name,\n                type = input.type;\n            var attrName = kebob(name);\n            // If the ui-view has an attribute which matches a binding on the routed component\n            // then pass that attribute through to the routed component template.\n            // Prefer ui-view wired mappings to resolve data, unless the resolve was explicitly bound using `bindings:`\n            if (uiView.attr(attrName) && !bindings[name]) return attrName + "=\'" + uiView.attr(attrName) + "\'";\n            var resolveName = bindings[name] || name;\n            // Pre-evaluate the expression for "@" bindings by enclosing in {{ }}\n            // some-attr="{{ ::$resolve.someResolveName }}"\n            if (type === \'@\') return attrName + "=\'{{" + prefix + "$resolve." + resolveName + "}}\'";\n            // Wire "&" callbacks to resolves that return a callback function\n            // Get the result of the resolve (should be a function) and annotate it to get its arguments.\n            // some-attr="$resolve.someResolveResultName(foo, bar)"\n            if (type === \'&\') {\n                var res = context.getResolvable(resolveName);\n                var fn = res && res.data;\n                var args = fn && core_1.services.$injector.annotate(fn) || [];\n                // account for array style injection, i.e., [\'foo\', function(foo) {}]\n                var arrayIdxStr = core_1.isArray(fn) ? "[" + (fn.length - 1) + "]" : \'\';\n                return attrName + "=\'$resolve." + resolveName + arrayIdxStr + "(" + args.join(",") + ")\'";\n            }\n            // some-attr="::$resolve.someResolveName"\n            return attrName + "=\'" + prefix + "$resolve." + resolveName + "\'";\n        };\n        var attrs = getComponentBindings(component).map(attributeTpl).join(" ");\n        var kebobName = kebob(component);\n        return "<" + kebobName + " " + attrs + "></" + kebobName + ">";\n    };\n    ;\n    return TemplateFactory;\n}();\nexports.TemplateFactory = TemplateFactory;\n// Gets all the directive(s)\' inputs (\'@\', \'=\', and \'<\') and outputs (\'&\')\nfunction getComponentBindings(name) {\n    var cmpDefs = core_1.services.$injector.get(name + "Directive"); // could be multiple\n    if (!cmpDefs || !cmpDefs.length) throw new Error("Unable to find component named \'" + name + "\'");\n    return cmpDefs.map(getBindings).reduce(core_1.unnestR, []);\n}\n// Given a directive definition, find its object input attributes\n// Use different properties, depending on the type of directive (component, bindToController, normal)\nvar getBindings = function getBindings(def) {\n    if (core_1.isObject(def.bindToController)) return scopeBindings(def.bindToController);\n    return scopeBindings(def.scope);\n};\n// for ng 1.2 style, process the scope: { input: "=foo" }\n// for ng 1.3 through ng 1.5, process the component\'s bindToController: { input: "=foo" } object\nvar scopeBindings = function scopeBindings(bindingsObj) {\n    return Object.keys(bindingsObj || {}).map(function (key) {\n        return [key, /^([=<@&])[?]?(.*)/.exec(bindingsObj[key])];\n    }).filter(function (tuple) {\n        return core_1.isDefined(tuple) && core_1.isArray(tuple[1]);\n    }).map(function (tuple) {\n        return { name: tuple[1][2] || tuple[0], type: tuple[1][1] };\n    });\n};\n//# sourceMappingURL=templateFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///80\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module ng1 */ /** */\nvar core_1 = __webpack_require__(4);\nvar services_1 = __webpack_require__(28);\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,\n * `onRetain` callback hooks on a [[Ng1StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * ensures that those hooks are injectable for @uirouter/angularjs (ng1).\n */\nexports.getStateHookBuilder = function (hookName) {\n    return function stateHookBuilder(state, parentFn) {\n        var hook = state[hookName];\n        var pathname = hookName === 'onExit' ? 'from' : 'to';\n        function decoratedNg1Hook(trans, state) {\n            var resolveContext = new core_1.ResolveContext(trans.treeChanges(pathname));\n            var locals = core_1.extend(services_1.getLocals(resolveContext), { $state$: state, $transition$: trans });\n            return core_1.services.$injector.invoke(hook, this, locals);\n        }\n        return hook ? decoratedNg1Hook : undefined;\n    };\n};\n//# sourceMappingURL=onEnterExitRetain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5ndWxhci11aS1yb3V0ZXIvbGliL3N0YXRlYnVpbGRlcnMvb25FbnRlckV4aXRSZXRhaW4uanM/ZDJlNSJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvcmVfMSIsInJlcXVpcmUiLCJzZXJ2aWNlc18xIiwiZ2V0U3RhdGVIb29rQnVpbGRlciIsImhvb2tOYW1lIiwic3RhdGVIb29rQnVpbGRlciIsInN0YXRlIiwicGFyZW50Rm4iLCJob29rIiwicGF0aG5hbWUiLCJkZWNvcmF0ZWROZzFIb29rIiwidHJhbnMiLCJyZXNvbHZlQ29udGV4dCIsIlJlc29sdmVDb250ZXh0IiwidHJlZUNoYW5nZXMiLCJsb2NhbHMiLCJleHRlbmQiLCJnZXRMb2NhbHMiLCIkc3RhdGUkIiwiJHRyYW5zaXRpb24kIiwic2VydmljZXMiLCIkaW5qZWN0b3IiLCJpbnZva2UiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQSxrQixDQUFtQjtBQUNuQixJQUFJQyxTQUFTLG1CQUFBQyxDQUFRLENBQVIsQ0FBYjtBQUNBLElBQUlDLGFBQWEsbUJBQUFELENBQVEsRUFBUixDQUFqQjtBQUNBOzs7Ozs7O0FBT0FILFFBQVFLLG1CQUFSLEdBQThCLFVBQVVDLFFBQVYsRUFBb0I7QUFDOUMsV0FBTyxTQUFTQyxnQkFBVCxDQUEwQkMsS0FBMUIsRUFBaUNDLFFBQWpDLEVBQTJDO0FBQzlDLFlBQUlDLE9BQU9GLE1BQU1GLFFBQU4sQ0FBWDtBQUNBLFlBQUlLLFdBQVdMLGFBQWEsUUFBYixHQUF3QixNQUF4QixHQUFpQyxJQUFoRDtBQUNBLGlCQUFTTSxnQkFBVCxDQUEwQkMsS0FBMUIsRUFBaUNMLEtBQWpDLEVBQXdDO0FBQ3BDLGdCQUFJTSxpQkFBaUIsSUFBSVosT0FBT2EsY0FBWCxDQUEwQkYsTUFBTUcsV0FBTixDQUFrQkwsUUFBbEIsQ0FBMUIsQ0FBckI7QUFDQSxnQkFBSU0sU0FBU2YsT0FBT2dCLE1BQVAsQ0FBY2QsV0FBV2UsU0FBWCxDQUFxQkwsY0FBckIsQ0FBZCxFQUFvRCxFQUFFTSxTQUFTWixLQUFYLEVBQWtCYSxjQUFjUixLQUFoQyxFQUFwRCxDQUFiO0FBQ0EsbUJBQU9YLE9BQU9vQixRQUFQLENBQWdCQyxTQUFoQixDQUEwQkMsTUFBMUIsQ0FBaUNkLElBQWpDLEVBQXVDLElBQXZDLEVBQTZDTyxNQUE3QyxDQUFQO0FBQ0g7QUFDRCxlQUFPUCxPQUFPRSxnQkFBUCxHQUEwQmEsU0FBakM7QUFDSCxLQVREO0FBVUgsQ0FYRDtBQVlBIiwiZmlsZSI6IjgxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiogQG1vZHVsZSBuZzEgKi8gLyoqICovXG52YXIgY29yZV8xID0gcmVxdWlyZShcIkB1aXJvdXRlci9jb3JlXCIpO1xudmFyIHNlcnZpY2VzXzEgPSByZXF1aXJlKFwiLi4vc2VydmljZXNcIik7XG4vKipcbiAqIFRoaXMgaXMgYSBbW1N0YXRlQnVpbGRlci5idWlsZGVyXV0gZnVuY3Rpb24gZm9yIGFuZ3VsYXIxIGBvbkVudGVyYCwgYG9uRXhpdGAsXG4gKiBgb25SZXRhaW5gIGNhbGxiYWNrIGhvb2tzIG9uIGEgW1tOZzFTdGF0ZURlY2xhcmF0aW9uXV0uXG4gKlxuICogV2hlbiB0aGUgW1tTdGF0ZUJ1aWxkZXJdXSBidWlsZHMgYSBbW1N0YXRlT2JqZWN0XV0gb2JqZWN0IGZyb20gYSByYXcgW1tTdGF0ZURlY2xhcmF0aW9uXV0sIHRoaXMgYnVpbGRlclxuICogZW5zdXJlcyB0aGF0IHRob3NlIGhvb2tzIGFyZSBpbmplY3RhYmxlIGZvciBAdWlyb3V0ZXIvYW5ndWxhcmpzIChuZzEpLlxuICovXG5leHBvcnRzLmdldFN0YXRlSG9va0J1aWxkZXIgPSBmdW5jdGlvbiAoaG9va05hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gc3RhdGVIb29rQnVpbGRlcihzdGF0ZSwgcGFyZW50Rm4pIHtcbiAgICAgICAgdmFyIGhvb2sgPSBzdGF0ZVtob29rTmFtZV07XG4gICAgICAgIHZhciBwYXRobmFtZSA9IGhvb2tOYW1lID09PSAnb25FeGl0JyA/ICdmcm9tJyA6ICd0byc7XG4gICAgICAgIGZ1bmN0aW9uIGRlY29yYXRlZE5nMUhvb2sodHJhbnMsIHN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgcmVzb2x2ZUNvbnRleHQgPSBuZXcgY29yZV8xLlJlc29sdmVDb250ZXh0KHRyYW5zLnRyZWVDaGFuZ2VzKHBhdGhuYW1lKSk7XG4gICAgICAgICAgICB2YXIgbG9jYWxzID0gY29yZV8xLmV4dGVuZChzZXJ2aWNlc18xLmdldExvY2FscyhyZXNvbHZlQ29udGV4dCksIHsgJHN0YXRlJDogc3RhdGUsICR0cmFuc2l0aW9uJDogdHJhbnMgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29yZV8xLnNlcnZpY2VzLiRpbmplY3Rvci5pbnZva2UoaG9vaywgdGhpcywgbG9jYWxzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaG9vayA/IGRlY29yYXRlZE5nMUhvb2sgOiB1bmRlZmluZWQ7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbkVudGVyRXhpdFJldGFpbi5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvYW5ndWxhci11aS1yb3V0ZXIvbGliL3N0YXRlYnVpbGRlcnMvb25FbnRlckV4aXRSZXRhaW4uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///81\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = __webpack_require__(4);\n/**\n * Implements UI-Router LocationServices and LocationConfig using Angular 1's $location service\n */\nvar Ng1LocationServices = function () {\n    function Ng1LocationServices($locationProvider) {\n        // .onChange() registry\n        this._urlListeners = [];\n        this.$locationProvider = $locationProvider;\n        var _lp = core_1.val($locationProvider);\n        core_1.createProxyFunctions(_lp, this, _lp, ['hashPrefix']);\n    }\n    Ng1LocationServices.prototype.dispose = function () {};\n    Ng1LocationServices.prototype.onChange = function (callback) {\n        var _this = this;\n        this._urlListeners.push(callback);\n        return function () {\n            return core_1.removeFrom(_this._urlListeners)(callback);\n        };\n    };\n    Ng1LocationServices.prototype.html5Mode = function () {\n        var html5Mode = this.$locationProvider.html5Mode();\n        html5Mode = core_1.isObject(html5Mode) ? html5Mode.enabled : html5Mode;\n        return html5Mode && this.$sniffer.history;\n    };\n    Ng1LocationServices.prototype.url = function (newUrl, replace, state) {\n        if (replace === void 0) {\n            replace = false;\n        }\n        if (newUrl) this.$location.url(newUrl);\n        if (replace) this.$location.replace();\n        if (state) this.$location.state(state);\n        return this.$location.url();\n    };\n    Ng1LocationServices.prototype._runtimeServices = function ($rootScope, $location, $sniffer, $browser) {\n        var _this = this;\n        this.$location = $location;\n        this.$sniffer = $sniffer;\n        // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange\n        $rootScope.$on(\"$locationChangeSuccess\", function (evt) {\n            return _this._urlListeners.forEach(function (fn) {\n                return fn(evt);\n            });\n        });\n        var _loc = core_1.val($location);\n        var _browser = core_1.val($browser);\n        // Bind these LocationService functions to $location\n        core_1.createProxyFunctions(_loc, this, _loc, [\"replace\", \"path\", \"search\", \"hash\"]);\n        // Bind these LocationConfig functions to $location\n        core_1.createProxyFunctions(_loc, this, _loc, ['port', 'protocol', 'host']);\n        // Bind these LocationConfig functions to $browser\n        core_1.createProxyFunctions(_browser, this, _browser, ['baseHref']);\n    };\n    /**\n     * Applys ng1-specific path parameter encoding\n     *\n     * The Angular 1 `$location` service is a bit weird.\n     * It doesn't allow slashes to be encoded/decoded bi-directionally.\n     *\n     * See the writeup at https://github.com/angular-ui/ui-router/issues/2598\n     *\n     * This code patches the `path` parameter type so it encoded/decodes slashes as ~2F\n     *\n     * @param router\n     */\n    Ng1LocationServices.monkeyPatchPathParameterType = function (router) {\n        var pathType = router.urlMatcherFactory.type('path');\n        pathType.encode = function (val) {\n            return val != null ? val.toString().replace(/(~|\\/)/g, function (m) {\n                return { '~': '~~', '/': '~2F' }[m];\n            }) : val;\n        };\n        pathType.decode = function (val) {\n            return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) {\n                return { '~~': '~', '~2F': '/' }[m];\n            }) : val;\n        };\n    };\n    return Ng1LocationServices;\n}();\nexports.Ng1LocationServices = Ng1LocationServices;\n//# sourceMappingURL=locationServices.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///82\n")},function(module,exports,__webpack_require__){"use strict";eval("\n/**\n * # Angular 1 injectable services\n *\n * This is a list of the objects which can be injected using angular's injector.\n *\n * There are three different kind of injectable objects:\n *\n * ## **Provider** objects\n * #### injectable into a `.config()` block during configtime\n *\n * - [[$uiRouterProvider]]: The UI-Router instance\n * - [[$stateProvider]]: State registration\n * - [[$transitionsProvider]]: Transition hooks\n * - [[$urlServiceProvider]]: All URL related public APIs\n *\n * - [[$uiViewScrollProvider]]: Disable ui-router view scrolling\n * - [[$urlRouterProvider]]: (deprecated) Url matching rules\n * - [[$urlMatcherFactoryProvider]]: (deprecated) Url parsing config\n *\n * ## **Service** objects\n * #### injectable globally during runtime\n *\n * - [[$uiRouter]]: The UI-Router instance\n * - [[$trace]]: Enable transition trace/debug\n * - [[$transitions]]: Transition hooks\n * - [[$state]]: Imperative state related APIs\n * - [[$stateRegistry]]: State registration\n * - [[$urlService]]: All URL related public APIs\n * - [[$uiRouterGlobals]]: Global variables\n * - [[$uiViewScroll]]: Scroll an element into view\n *\n * - [[$stateParams]]: (deprecated) Global state param values\n * - [[$urlRouter]]: (deprecated) URL synchronization\n * - [[$urlMatcherFactory]]: (deprecated) URL parsing config\n *\n * ## **Per-Transition** objects\n *\n * - These kind of objects are injectable into:\n *   - Resolves ([[Ng1StateDeclaration.resolve]]),\n *   - Transition Hooks ([[TransitionService.onStart]], etc),\n *   - Routed Controllers ([[Ng1ViewDeclaration.controller]])\n *\n * #### Different instances are injected based on the [[Transition]]\n *\n * - [[$transition$]]: The current Transition object\n * - [[$stateParams]]: State param values for pending Transition (deprecated)\n * - Any resolve data defined using [[Ng1StateDeclaration.resolve]]\n *\n * @ng1api\n * @preferred\n * @module injectables\n */ /** */\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The current (or pending) State Parameters\n *\n * An injectable global **Service Object** which holds the state parameters for the latest **SUCCESSFUL** transition.\n *\n * The values are not updated until *after* a `Transition` successfully completes.\n *\n * **Also:** an injectable **Per-Transition Object** object which holds the pending state parameters for the pending `Transition` currently running.\n *\n * ### Deprecation warning:\n *\n * The value injected for `$stateParams` is different depending on where it is injected.\n *\n * - When injected into an angular service, the object injected is the global **Service Object** with the parameter values for the latest successful `Transition`.\n * - When injected into transition hooks, resolves, or view controllers, the object is the **Per-Transition Object** with the parameter values for the running `Transition`.\n *\n * Because of these confusing details, this service is deprecated.\n *\n * ### Instead of using the global `$stateParams` service object,\n * inject [[$uiRouterGlobals]] and use [[UIRouterGlobals.params]]\n *\n * ```js\n * MyService.$inject = ['$uiRouterGlobals'];\n * function MyService($uiRouterGlobals) {\n *   return {\n *     paramValues: function () {\n *       return $uiRouterGlobals.params;\n *     }\n *   }\n * }\n * ```\n *\n * ### Instead of using the per-transition `$stateParams` object,\n * inject the current `Transition` (as [[$transition$]]) and use [[Transition.params]]\n *\n * ```js\n * MyController.$inject = ['$transition$'];\n * function MyController($transition$) {\n *   var username = $transition$.params().username;\n *   // .. do something with username\n * }\n * ```\n *\n * ---\n *\n * This object can be injected into other services.\n *\n * #### Deprecated Example:\n * ```js\n * SomeService.$inject = ['$http', '$stateParams'];\n * function SomeService($http, $stateParams) {\n *   return {\n *     getUser: function() {\n *       return $http.get('/api/users/' + $stateParams.username);\n *     }\n *   }\n * };\n * angular.service('SomeService', SomeService);\n * ```\n * @deprecated\n */\nvar $stateParams;\n/**\n * Global UI-Router variables\n *\n * The router global state as a **Service Object** (injectable during runtime).\n *\n * This object contains globals such as the current state and current parameter values.\n */\nvar $uiRouterGlobals;\n/**\n * The UI-Router instance\n *\n * The [[UIRouter]] singleton (the router instance) as a **Service Object** (injectable during runtime).\n *\n * This object is the UI-Router singleton instance, created by angular dependency injection during application bootstrap.\n * It has references to the other UI-Router services\n *\n * #### Note: This object is also exposed as [[$uiRouterProvider]] for injection during angular config time.\n */\nvar $uiRouter;\n/**\n * The UI-Router instance\n *\n * The [[UIRouter]] singleton (the router instance) as a **Provider Object** (injectable during config phase).\n *\n * This object is the UI-Router singleton instance, created by angular dependency injection during application bootstrap.\n * It has references to the other UI-Router services\n *\n * #### Note: This object is also exposed as [[$uiRouter]] for injection during runtime.\n */\nvar $uiRouterProvider;\n/**\n * Transition debug/tracing\n *\n * The [[Trace]] singleton as a **Service Object** (injectable during runtime).\n *\n * Enables or disables Transition tracing which can help to debug issues.\n */\nvar $trace;\n/**\n * The Transition Service\n *\n * The [[TransitionService]] singleton as a **Service Object** (injectable during runtime).\n *\n * This angular service exposes the [[TransitionService]] singleton, which is primarily\n * used to register global transition hooks.\n *\n * #### Note: This object is also exposed as [[$transitionsProvider]] for injection during the config phase.\n */\nvar $transitions;\n/**\n * The Transition Service\n *\n * The [[TransitionService]] singleton as a **Provider Object** (injectable during config phase)\n *\n * This angular service exposes the [[TransitionService]] singleton, which is primarily\n * used to register global transition hooks.\n *\n * #### Note: This object is also exposed as [[$transitions]] for injection during runtime.\n */\nvar $transitionsProvider;\n/**\n * The current [[Transition]] object\n *\n * The current [[Transition]] object as a **Per-Transition Object** (injectable into Resolve, Hooks, Controllers)\n *\n * This object returns information about the current transition, including:\n *\n * - To/from states\n * - To/from parameters\n * - Transition options\n * - States being entered, exited, and retained\n * - Resolve data\n * - A Promise for the transition\n * - Any transition failure information\n * - An injector for both Service and Per-Transition Objects\n */\nvar $transition$;\n/**\n * The State Service\n *\n * The [[StateService]] singleton as a **Service Object** (injectable during runtime).\n *\n * This service used to manage and query information on registered states.\n * It exposes state related APIs including:\n *\n * - Start a [[Transition]]\n * - Imperatively lazy load states\n * - Check if a state is currently active\n * - Look up states by name\n * - Build URLs for a state+parameters\n * - Configure the global Transition error handler\n *\n * This angular service exposes the [[StateService]] singleton.\n */\nvar $state;\n/**\n * The State Registry\n *\n * The [[StateRegistry]] singleton as a **Service Object** (injectable during runtime).\n *\n * This service is used to register/deregister states.\n * It has state registration related APIs including:\n *\n * - Register/deregister states\n * - Listen for state registration/deregistration\n * - Get states by name\n * - Add state decorators (to customize the state creation process)\n *\n * #### Note: This object is also exposed as [[$stateRegistryProvider]] for injection during the config phase.\n */\nvar $stateRegistry;\n/**\n * The State Registry\n *\n * The [[StateRegistry]] singleton as a **Provider Object** (injectable during config time).\n *\n * This service is used to register/deregister states.\n * It has state registration related APIs including:\n *\n * - Register/deregister states\n * - Listen for state registration/deregistration\n * - Get states by name\n * - Add state decorators (to customize the state creation process)\n *\n * #### Note: This object is also exposed as [[$stateRegistry]] for injection during runtime.\n */\nvar $stateRegistryProvider;\n/**\n * The View Scroll provider\n *\n * The [[UIViewScrollProvider]] as a **Provider Object** (injectable during config time).\n *\n * This angular service exposes the [[UIViewScrollProvider]] singleton and is\n * used to disable UI-Router's scroll behavior.\n */\nvar $uiViewScrollProvider;\n/**\n * The View Scroll function\n *\n * The View Scroll function as a **Service Object** (injectable during runtime).\n *\n * This is a function that scrolls an element into view.\n * The element is scrolled after a `$timeout` so the DOM has time to refresh.\n *\n * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n * this can be enabled by calling [[UIViewScrollProvider.useAnchorScroll]].\n *\n * Note: this function is used by the [[directives.uiView]] when the `autoscroll` expression evaluates to true.\n */\nvar $uiViewScroll;\n/**\n * The StateProvider\n *\n * An angular1-only [[StateProvider]] as a **Provider Object** (injectable during config time).\n *\n * This angular service exposes the [[StateProvider]] singleton.\n *\n * The `StateProvider` is primarily used to register states or add custom state decorators.\n *\n * ##### Note: This provider is a ng1 vestige.\n * It is a passthrough to [[$stateRegistry]] and [[$state]].\n */\nvar $stateProvider;\n/**\n * The URL Service Provider\n *\n * The [[UrlService]] singleton as a **Provider Object** (injectable during the angular config phase).\n *\n * A service used to configure and interact with the URL.\n * It has URL related APIs including:\n *\n * - register custom Parameter types `UrlService.config.type` ([[UrlConfigApi.type]])\n * - add URL rules: `UrlService.rules.when` ([[UrlRulesApi.when]])\n * - configure behavior when no url matches: `UrlService.rules.otherwise` ([[UrlRulesApi.otherwise]])\n * - delay initial URL synchronization [[UrlService.deferIntercept]].\n * - get or set the current url: [[UrlService.url]]\n *\n * ##### Note: This service can also be injected during runtime as [[$urlService]].\n */\nvar $urlServiceProvider;\n/**\n * The URL Service\n *\n * The [[UrlService]] singleton as a **Service Object** (injectable during runtime).\n *\n * Note: This service can also be injected during the config phase as [[$urlServiceProvider]].\n *\n * Used to configure the URL.\n * It has URL related APIs including:\n *\n * - register custom Parameter types `UrlService.config.type` ([[UrlConfigApi.type]])\n * - add URL rules: `UrlService.rules.when` ([[UrlRulesApi.when]])\n * - configure behavior when no url matches: `UrlService.rules.otherwise` ([[UrlRulesApi.otherwise]])\n * - delay initial URL synchronization [[UrlService.deferIntercept]].\n * - get or set the current url: [[UrlService.url]]\n *\n * ##### Note: This service can also be injected during the config phase as [[$urlServiceProvider]].\n */\nvar $urlService;\n/**\n * The URL Router Provider\n *\n * ### Deprecation warning: This object is now considered internal. Use [[$urlServiceProvider]] instead.\n *\n * The [[UrlRouter]] singleton as a **Provider Object** (injectable during config time).\n *\n * #### Note: This object is also exposed as [[$urlRouter]] for injection during runtime.\n *\n * @deprecated\n */\nvar $urlRouterProvider;\n/**\n * The Url Router\n *\n * ### Deprecation warning: This object is now considered internal. Use [[$urlService]] instead.\n *\n * The [[UrlRouter]] singleton as a **Service Object** (injectable during runtime).\n *\n * #### Note: This object is also exposed as [[$urlRouterProvider]] for injection during angular config time.\n *\n * @deprecated\n */\nvar $urlRouter;\n/**\n * The URL Matcher Factory\n *\n * ### Deprecation warning: This object is now considered internal. Use [[$urlService]] instead.\n *\n * The [[UrlMatcherFactory]] singleton as a **Service Object** (injectable during runtime).\n *\n * This service is used to set url mapping options, define custom parameter types, and create [[UrlMatcher]] objects.\n *\n * #### Note: This object is also exposed as [[$urlMatcherFactoryProvider]] for injection during angular config time.\n *\n * @deprecated\n */\nvar $urlMatcherFactory;\n/**\n * The URL Matcher Factory\n *\n * ### Deprecation warning: This object is now considered internal. Use [[$urlService]] instead.\n *\n * The [[UrlMatcherFactory]] singleton as a **Provider Object** (injectable during config time).\n *\n * This service is used to set url mapping options, define custom parameter types, and create [[UrlMatcher]] objects.\n *\n * #### Note: This object is also exposed as [[$urlMatcherFactory]] for injection during runtime.\n *\n * @deprecated\n */\nvar $urlMatcherFactoryProvider;\n//# sourceMappingURL=injectables.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///83\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * # Angular 1 Directives\n *\n * These are the directives included in UI-Router for Angular 1.\n * These directives are used in templates to create viewports and link/navigate to states.\n *\n * @ng1api\n * @preferred\n * @module directives\n */ /** for typedoc */\nvar angular_1 = __webpack_require__(10);\nvar core_1 = __webpack_require__(4);\n/** @hidden */\nfunction parseStateRef(ref) {\n    var paramsOnly = ref.match(/^\\s*({[^}]*})\\s*$/),\n        parsed;\n    if (paramsOnly) ref = \'(\' + paramsOnly[1] + \')\';\n    parsed = ref.replace(/\\n/g, " ").match(/^\\s*([^(]*?)\\s*(\\((.*)\\))?\\s*$/);\n    if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref \'" + ref + "\'");\n    return { state: parsed[1] || null, paramExpr: parsed[3] || null };\n}\n/** @hidden */\nfunction stateContext(el) {\n    var $uiView = el.parent().inheritedData(\'$uiView\');\n    var path = core_1.parse(\'$cfg.path\')($uiView);\n    return path ? core_1.tail(path).state.name : undefined;\n}\n/** @hidden */\nfunction processedDef($state, $element, def) {\n    var uiState = def.uiState || $state.current.name;\n    var uiStateOpts = core_1.extend(defaultOpts($element, $state), def.uiStateOpts || {});\n    var href = $state.href(uiState, def.uiStateParams, uiStateOpts);\n    return { uiState: uiState, uiStateParams: def.uiStateParams, uiStateOpts: uiStateOpts, href: href };\n}\n/** @hidden */\nfunction getTypeInfo(el) {\n    // SVGAElement does not use the href attribute, but rather the \'xlinkHref\' attribute.\n    var isSvg = Object.prototype.toString.call(el.prop(\'href\')) === \'[object SVGAnimatedString]\';\n    var isForm = el[0].nodeName === "FORM";\n    return {\n        attr: isForm ? "action" : isSvg ? \'xlink:href\' : \'href\',\n        isAnchor: el.prop("tagName").toUpperCase() === "A",\n        clickable: !isForm\n    };\n}\n/** @hidden */\nfunction clickHook(el, $state, $timeout, type, getDef) {\n    return function (e) {\n        var button = e.which || e.button,\n            target = getDef();\n        if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr(\'target\'))) {\n            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n            var transition = $timeout(function () {\n                $state.go(target.uiState, target.uiStateParams, target.uiStateOpts);\n            });\n            e.preventDefault();\n            // if the state has no URL, ignore one preventDefault from the <a> directive.\n            var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;\n            e.preventDefault = function () {\n                if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);\n            };\n        }\n    };\n}\n/** @hidden */\nfunction defaultOpts(el, $state) {\n    return {\n        relative: stateContext(el) || $state.$current,\n        inherit: true,\n        source: "sref"\n    };\n}\n/** @hidden */\nfunction bindEvents(element, scope, hookFn, uiStateOpts) {\n    var events;\n    if (uiStateOpts) {\n        events = uiStateOpts.events;\n    }\n    if (!core_1.isArray(events)) {\n        events = [\'click\'];\n    }\n    var on = element.on ? \'on\' : \'bind\';\n    for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {\n        var event_1 = events_1[_i];\n        element[on](event_1, hookFn);\n    }\n    scope.$on(\'$destroy\', function () {\n        var off = element.off ? \'off\' : \'unbind\';\n        for (var _i = 0, events_2 = events; _i < events_2.length; _i++) {\n            var event_2 = events_2[_i];\n            element[off](event_2, hookFn);\n        }\n    });\n}\n/**\n * `ui-sref`: A directive for linking to a state\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * ### Linked State\n * The attribute value of the `ui-sref` is the name of the state to link to.\n *\n * #### Example:\n * This will activate the `home` state when the link is clicked.\n * ```html\n * <a ui-sref="home">Home</a>\n * ```\n *\n * ### Relative Links\n * You can also use relative state paths within `ui-sref`, just like a relative path passed to `$state.go()` ([[StateService.go]]).\n * You just need to be aware that the path is relative to the state that *created* the link.\n * This allows a state to create a relative `ui-sref` which always targets the same destination.\n *\n * #### Example:\n * Both these links are relative to the parent state, even when a child state is currently active.\n * ```html\n * <a ui-sref=".child1">child 1 state</a>\n * <a ui-sref=".child2">child 2 state</a>\n * ```\n *\n * This link activates the parent state.\n * ```html\n * <a ui-sref="^">Return</a>\n * ```\n *\n * ### hrefs\n * If the linked state has a URL, the directive will automatically generate and\n * update the `href` attribute (using the [[StateService.href]]  method).\n *\n * #### Example:\n * Assuming the `users` state has a url of `/users/`\n * ```html\n * <a ui-sref="users" href="/users/">Users</a>\n * ```\n *\n * ### Parameter Values\n * In addition to the state name, a `ui-sref` can include parameter values which are applied when activating the state.\n * Param values can be provided in the `ui-sref` value after the state name, enclosed by parentheses.\n * The content inside the parentheses is an expression, evaluated to the parameter values.\n *\n * #### Example:\n * This example renders a list of links to users.\n * The state\'s `userId` parameter value comes from each user\'s `user.id` property.\n * ```html\n * <li ng-repeat="user in users">\n *   <a ui-sref="users.detail({ userId: user.id })">{{ user.displayName }}</a>\n * </li>\n * ```\n *\n * Note:\n * The parameter values expression is `$watch`ed for updates.\n *\n * ### Transition Options\n * You can specify [[TransitionOptions]] to pass to [[StateService.go]] by using the `ui-sref-opts` attribute.\n * Options are restricted to `location`, `inherit`, and `reload`.\n *\n * #### Example:\n * ```html\n * <a ui-sref="home" ui-sref-opts="{ reload: true }">Home</a>\n * ```\n *\n * ### Other DOM Events\n *\n * You can also customize which DOM events to respond to (instead of `click`) by\n * providing an `events` array in the `ui-sref-opts` attribute.\n *\n * #### Example:\n * ```html\n * <input type="text" ui-sref="contacts" ui-sref-opts="{ events: [\'change\', \'blur\'] }">\n * ```\n *\n * ### Highlighting the active link\n * This directive can be used in conjunction with [[uiSrefActive]] to highlight the active link.\n *\n * ### Examples\n * If you have the following template:\n *\n * ```html\n * <a ui-sref="home">Home</a>\n * <a ui-sref="about">About</a>\n * <a ui-sref="{page: 2}">Next page</a>\n *\n * <ul>\n *     <li ng-repeat="contact in contacts">\n *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>\n *     </li>\n * </ul>\n * ```\n *\n * Then (assuming the current state is `contacts`) the rendered html including hrefs would be:\n *\n * ```html\n * <a href="#/home" ui-sref="home">Home</a>\n * <a href="#/about" ui-sref="about">About</a>\n * <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>\n *\n * <ul>\n *     <li ng-repeat="contact in contacts">\n *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>\n *     </li>\n *     <li ng-repeat="contact in contacts">\n *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>\n *     </li>\n *     <li ng-repeat="contact in contacts">\n *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>\n *     </li>\n * </ul>\n *\n * <a href="#/home" ui-sref="home" ui-sref-opts="{reload: true}">Home</a>\n * ```\n *\n * ### Notes\n *\n * - You can use `ui-sref` to change **only the parameter values** by omitting the state name and parentheses.\n * #### Example:\n * Sets the `lang` parameter to `en` and remains on the same state.\n *\n * ```html\n * <a ui-sref="{ lang: \'en\' }">English</a>\n * ```\n *\n * - A middle-click, right-click, or ctrl-click is handled (natively) by the browser to open the href in a new window, for example.\n *\n * - Unlike the parameter values expression, the state name is not `$watch`ed (for performance reasons).\n * If you need to dynamically update the state being linked to, use the fully dynamic [[uiState]] directive.\n */\nvar uiSref;\nuiSref = [\'$uiRouter\', \'$timeout\', function $StateRefDirective($uiRouter, $timeout) {\n    var $state = $uiRouter.stateService;\n    return {\n        restrict: \'A\',\n        require: [\'?^uiSrefActive\', \'?^uiSrefActiveEq\'],\n        link: function link(scope, element, attrs, uiSrefActive) {\n            var type = getTypeInfo(element);\n            var active = uiSrefActive[1] || uiSrefActive[0];\n            var unlinkInfoFn = null;\n            var hookFn;\n            var rawDef = {};\n            var getDef = function getDef() {\n                return processedDef($state, element, rawDef);\n            };\n            var ref = parseStateRef(attrs.uiSref);\n            rawDef.uiState = ref.state;\n            rawDef.uiStateOpts = attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {};\n            function update() {\n                var def = getDef();\n                if (unlinkInfoFn) unlinkInfoFn();\n                if (active) unlinkInfoFn = active.$$addStateInfo(def.uiState, def.uiStateParams);\n                if (def.href != null) attrs.$set(type.attr, def.href);\n            }\n            if (ref.paramExpr) {\n                scope.$watch(ref.paramExpr, function (val) {\n                    rawDef.uiStateParams = core_1.extend({}, val);\n                    update();\n                }, true);\n                rawDef.uiStateParams = core_1.extend({}, scope.$eval(ref.paramExpr));\n            }\n            update();\n            scope.$on(\'$destroy\', $uiRouter.stateRegistry.onStatesChanged(update));\n            scope.$on(\'$destroy\', $uiRouter.transitionService.onSuccess({}, update));\n            if (!type.clickable) return;\n            hookFn = clickHook(element, $state, $timeout, type, getDef);\n            bindEvents(element, scope, hookFn, rawDef.uiStateOpts);\n        }\n    };\n}];\n/**\n * `ui-state`: A fully dynamic directive for linking to a state\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * **This directive is very similar to [[uiSref]], but it `$observe`s and `$watch`es/evaluates all its inputs.**\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * ### Linked State\n * The attribute value of `ui-state` is an expression which is `$watch`ed and evaluated as the state to link to.\n * **This is in contrast with `ui-sref`, which takes a state name as a string literal.**\n *\n * #### Example:\n * Create a list of links.\n * ```html\n * <li ng-repeat="link in navlinks">\n *   <a ui-state="link.state">{{ link.displayName }}</a>\n * </li>\n * ```\n *\n * ### Relative Links\n * If the expression evaluates to a relative path, it is processed like [[uiSref]].\n * You just need to be aware that the path is relative to the state that *created* the link.\n * This allows a state to create relative `ui-state` which always targets the same destination.\n *\n * ### hrefs\n * If the linked state has a URL, the directive will automatically generate and\n * update the `href` attribute (using the [[StateService.href]]  method).\n *\n * ### Parameter Values\n * In addition to the state name expression, a `ui-state` can include parameter values which are applied when activating the state.\n * Param values should be provided using the `ui-state-params` attribute.\n * The `ui-state-params` attribute value is `$watch`ed and evaluated as an expression.\n *\n * #### Example:\n * This example renders a list of links with param values.\n * The state\'s `userId` parameter value comes from each user\'s `user.id` property.\n * ```html\n * <li ng-repeat="link in navlinks">\n *   <a ui-state="link.state" ui-state-params="link.params">{{ link.displayName }}</a>\n * </li>\n * ```\n *\n * ### Transition Options\n * You can specify [[TransitionOptions]] to pass to [[StateService.go]] by using the `ui-state-opts` attribute.\n * Options are restricted to `location`, `inherit`, and `reload`.\n * The value of the `ui-state-opts` is `$watch`ed and evaluated as an expression.\n *\n * #### Example:\n * ```html\n * <a ui-state="returnto.state" ui-state-opts="{ reload: true }">Home</a>\n * ```\n *\n * ### Other DOM Events\n *\n * You can also customize which DOM events to respond to (instead of `click`) by\n * providing an `events` array in the `ui-state-opts` attribute.\n *\n * #### Example:\n * ```html\n * <input type="text" ui-state="contacts" ui-state-opts="{ events: [\'change\', \'blur\'] }">\n * ```\n *\n * ### Highlighting the active link\n * This directive can be used in conjunction with [[uiSrefActive]] to highlight the active link.\n *\n * ### Notes\n *\n * - You can use `ui-params` to change **only the parameter values** by omitting the state name and supplying only `ui-state-params`.\n *   However, it might be simpler to use [[uiSref]] parameter-only links.\n *\n * #### Example:\n * Sets the `lang` parameter to `en` and remains on the same state.\n *\n * ```html\n * <a ui-state="" ui-state-params="{ lang: \'en\' }">English</a>\n * ```\n *\n * - A middle-click, right-click, or ctrl-click is handled (natively) by the browser to open the href in a new window, for example.\n * ```\n */\nvar uiState;\nuiState = [\'$uiRouter\', \'$timeout\', function $StateRefDynamicDirective($uiRouter, $timeout) {\n    var $state = $uiRouter.stateService;\n    return {\n        restrict: \'A\',\n        require: [\'?^uiSrefActive\', \'?^uiSrefActiveEq\'],\n        link: function link(scope, element, attrs, uiSrefActive) {\n            var type = getTypeInfo(element);\n            var active = uiSrefActive[1] || uiSrefActive[0];\n            var unlinkInfoFn = null;\n            var hookFn;\n            var rawDef = {};\n            var getDef = function getDef() {\n                return processedDef($state, element, rawDef);\n            };\n            var inputAttrs = [\'uiState\', \'uiStateParams\', \'uiStateOpts\'];\n            var watchDeregFns = inputAttrs.reduce(function (acc, attr) {\n                return acc[attr] = core_1.noop, acc;\n            }, {});\n            function update() {\n                var def = getDef();\n                if (unlinkInfoFn) unlinkInfoFn();\n                if (active) unlinkInfoFn = active.$$addStateInfo(def.uiState, def.uiStateParams);\n                if (def.href != null) attrs.$set(type.attr, def.href);\n            }\n            inputAttrs.forEach(function (field) {\n                rawDef[field] = attrs[field] ? scope.$eval(attrs[field]) : null;\n                attrs.$observe(field, function (expr) {\n                    watchDeregFns[field]();\n                    watchDeregFns[field] = scope.$watch(expr, function (newval) {\n                        rawDef[field] = newval;\n                        update();\n                    }, true);\n                });\n            });\n            update();\n            scope.$on(\'$destroy\', $uiRouter.stateRegistry.onStatesChanged(update));\n            scope.$on(\'$destroy\', $uiRouter.transitionService.onSuccess({}, update));\n            if (!type.clickable) return;\n            hookFn = clickHook(element, $state, $timeout, type, getDef);\n            bindEvents(element, scope, hookFn, rawDef.uiStateOpts);\n        }\n    };\n}];\n/**\n * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active\n *\n * A directive working alongside [[uiSref]] and [[uiState]] to add classes to an element when the\n * related directive\'s state is active (and remove them when it is inactive).\n *\n * The primary use-case is to highlight the active link in navigation menus,\n * distinguishing it from the inactive menu items.\n *\n * ### Linking to a `ui-sref` or `ui-state`\n * `ui-sref-active` can live on the same element as `ui-sref`/`ui-state`, or it can be on a parent element.\n * If a `ui-sref-active` is a parent to more than one `ui-sref`/`ui-state`, it will apply the CSS class when **any of the links are active**.\n *\n * ### Matching\n *\n * The `ui-sref-active` directive applies the CSS class when the `ui-sref`/`ui-state`\'s target state **or any child state is active**.\n * This is a "fuzzy match" which uses [[StateService.includes]].\n *\n * The `ui-sref-active-eq` directive applies the CSS class when the `ui-sref`/`ui-state`\'s target state is directly active (not when child states are active).\n * This is an "exact match" which uses [[StateService.is]].\n *\n * ### Parameter values\n * If the `ui-sref`/`ui-state` includes parameter values, the current parameter values must match the link\'s values for the link to be highlighted.\n * This allows a list of links to the same state with different parameters to be rendered, and the correct one highlighted.\n *\n * #### Example:\n * ```html\n * <li ng-repeat="user in users" ui-sref-active="active">\n *   <a ui-sref="user.details({ userId: user.id })">{{ user.lastName }}</a>\n * </li>\n * ```\n *\n * ### Examples\n *\n * Given the following template:\n * #### Example:\n * ```html\n * <ul>\n *   <li ui-sref-active="active" class="item">\n *     <a href ui-sref="app.user({user: \'bilbobaggins\'})">@bilbobaggins</a>\n *   </li>\n * </ul>\n * ```\n *\n * When the app state is `app.user` (or any child state),\n * and contains the state parameter "user" with value "bilbobaggins",\n * the resulting HTML will appear as (note the \'active\' class):\n *\n * ```html\n * <ul>\n *   <li ui-sref-active="active" class="item active">\n *     <a ui-sref="app.user({user: \'bilbobaggins\'})" href="/users/bilbobaggins">@bilbobaggins</a>\n *   </li>\n * </ul>\n * ```\n *\n * ### Glob mode\n *\n * It is possible to pass `ui-sref-active` an expression that evaluates to an object.\n * The objects keys represent active class names and values represent the respective state names/globs.\n * `ui-sref-active` will match if the current active state **includes** any of\n * the specified state names/globs, even the abstract ones.\n *\n * #### Example:\n * Given the following template, with "admin" being an abstract state:\n * ```html\n * <div ui-sref-active="{\'active\': \'admin.**\'}">\n *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>\n * </div>\n * ```\n *\n * When the current state is "admin.roles" the "active" class will be applied to both the <div> and <a> elements.\n * It is important to note that the state names/globs passed to `ui-sref-active` override any state provided by a linked `ui-sref`.\n *\n * ### Notes:\n *\n * - The class name is interpolated **once** during the directives link time (any further changes to the\n * interpolated value are ignored).\n *\n * - Multiple classes may be specified in a space-separated format: `ui-sref-active=\'class1 class2 class3\'`\n */\nvar uiSrefActive;\nuiSrefActive = [\'$state\', \'$stateParams\', \'$interpolate\', \'$uiRouter\', function $StateRefActiveDirective($state, $stateParams, $interpolate, $uiRouter) {\n    return {\n        restrict: "A",\n        controller: [\'$scope\', \'$element\', \'$attrs\', function ($scope, $element, $attrs) {\n            var states = [],\n                activeEqClass,\n                uiSrefActive;\n            // There probably isn\'t much point in $observing this\n            // uiSrefActive and uiSrefActiveEq share the same directive object with some\n            // slight difference in logic routing\n            activeEqClass = $interpolate($attrs.uiSrefActiveEq || \'\', false)($scope);\n            try {\n                uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n            } catch (e) {\n                // Do nothing. uiSrefActive is not a valid expression.\n                // Fall back to using $interpolate below\n            }\n            uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || \'\', false)($scope);\n            if (core_1.isObject(uiSrefActive)) {\n                core_1.forEach(uiSrefActive, function (stateOrName, activeClass) {\n                    if (core_1.isString(stateOrName)) {\n                        var ref = parseStateRef(stateOrName);\n                        addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n                    }\n                });\n            }\n            // Allow uiSref to communicate with uiSrefActive[Equals]\n            this.$$addStateInfo = function (newState, newParams) {\n                // we already got an explicit state provided by ui-sref-active, so we\n                // shadow the one that comes from ui-sref\n                if (core_1.isObject(uiSrefActive) && states.length > 0) {\n                    return;\n                }\n                var deregister = addState(newState, newParams, uiSrefActive);\n                update();\n                return deregister;\n            };\n            function updateAfterTransition(trans) {\n                trans.promise.then(update);\n            }\n            $scope.$on(\'$stateChangeSuccess\', update);\n            $scope.$on(\'$destroy\', $uiRouter.transitionService.onStart({}, updateAfterTransition));\n            if ($uiRouter.globals.transition) {\n                updateAfterTransition($uiRouter.globals.transition);\n            }\n            function addState(stateName, stateParams, activeClass) {\n                var state = $state.get(stateName, stateContext($element));\n                var stateInfo = {\n                    state: state || { name: stateName },\n                    params: stateParams,\n                    activeClass: activeClass\n                };\n                states.push(stateInfo);\n                return function removeState() {\n                    core_1.removeFrom(states)(stateInfo);\n                };\n            }\n            // Update route state\n            function update() {\n                var splitClasses = function splitClasses(str) {\n                    return str.split(/\\s/).filter(core_1.identity);\n                };\n                var getClasses = function getClasses(stateList) {\n                    return stateList.map(function (x) {\n                        return x.activeClass;\n                    }).map(splitClasses).reduce(core_1.unnestR, []);\n                };\n                var allClasses = getClasses(states).concat(splitClasses(activeEqClass)).reduce(core_1.uniqR, []);\n                var fuzzyClasses = getClasses(states.filter(function (x) {\n                    return $state.includes(x.state.name, x.params);\n                }));\n                var exactlyMatchesAny = !!states.filter(function (x) {\n                    return $state.is(x.state.name, x.params);\n                }).length;\n                var exactClasses = exactlyMatchesAny ? splitClasses(activeEqClass) : [];\n                var addClasses = fuzzyClasses.concat(exactClasses).reduce(core_1.uniqR, []);\n                var removeClasses = allClasses.filter(function (cls) {\n                    return !core_1.inArray(addClasses, cls);\n                });\n                $scope.$evalAsync(function () {\n                    addClasses.forEach(function (className) {\n                        return $element.addClass(className);\n                    });\n                    removeClasses.forEach(function (className) {\n                        return $element.removeClass(className);\n                    });\n                });\n            }\n            update();\n        }]\n    };\n}];\nangular_1.ng.module(\'ui.router.state\').directive(\'uiSref\', uiSref).directive(\'uiSrefActive\', uiSrefActive).directive(\'uiSrefActiveEq\', uiSrefActive).directive(\'uiState\', uiState);\n//# sourceMappingURL=stateDirectives.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///84\n')},function(module,exports,__webpack_require__){"use strict";eval("\n/** @module ng1 */ /** for typedoc */\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar angular_1 = __webpack_require__(10);\n/**\n * `isState` Filter: truthy if the current state is the parameter\n *\n * Translates to [[StateService.is]] `$state.is(\"stateName\")`.\n *\n * #### Example:\n * ```html\n * <div ng-if=\"'stateName' | isState\">show if state is 'stateName'</div>\n * ```\n */\n$IsStateFilter.$inject = ['$state'];\nfunction $IsStateFilter($state) {\n    var isFilter = function isFilter(state, params, options) {\n        return $state.is(state, params, options);\n    };\n    isFilter.$stateful = true;\n    return isFilter;\n}\nexports.$IsStateFilter = $IsStateFilter;\n/**\n * `includedByState` Filter: truthy if the current state includes the parameter\n *\n * Translates to [[StateService.includes]]` $state.is(\"fullOrPartialStateName\")`.\n *\n * #### Example:\n * ```html\n * <div ng-if=\"'fullOrPartialStateName' | includedByState\">show if state includes 'fullOrPartialStateName'</div>\n * ```\n */\n$IncludedByStateFilter.$inject = ['$state'];\nfunction $IncludedByStateFilter($state) {\n    var includesFilter = function includesFilter(state, params, options) {\n        return $state.includes(state, params, options);\n    };\n    includesFilter.$stateful = true;\n    return includesFilter;\n}\nexports.$IncludedByStateFilter = $IncludedByStateFilter;\nangular_1.ng.module('ui.router.state').filter('isState', $IsStateFilter).filter('includedByState', $IncludedByStateFilter);\n//# sourceMappingURL=stateFilters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5ndWxhci11aS1yb3V0ZXIvbGliL3N0YXRlRmlsdGVycy5qcz84ZTUzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYW5ndWxhcl8xIiwicmVxdWlyZSIsIiRJc1N0YXRlRmlsdGVyIiwiJGluamVjdCIsIiRzdGF0ZSIsImlzRmlsdGVyIiwic3RhdGUiLCJwYXJhbXMiLCJvcHRpb25zIiwiaXMiLCIkc3RhdGVmdWwiLCIkSW5jbHVkZWRCeVN0YXRlRmlsdGVyIiwiaW5jbHVkZXNGaWx0ZXIiLCJpbmNsdWRlcyIsIm5nIiwibW9kdWxlIiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtCLENBQW1COztBQUNuQkEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0EsSUFBSUMsWUFBWSxtQkFBQUMsQ0FBUSxFQUFSLENBQWhCO0FBQ0E7Ozs7Ozs7Ozs7QUFVQUMsZUFBZUMsT0FBZixHQUF5QixDQUFDLFFBQUQsQ0FBekI7QUFDQSxTQUFTRCxjQUFULENBQXdCRSxNQUF4QixFQUFnQztBQUM1QixRQUFJQyxXQUFXLFNBQVhBLFFBQVcsQ0FBVUMsS0FBVixFQUFpQkMsTUFBakIsRUFBeUJDLE9BQXpCLEVBQWtDO0FBQzdDLGVBQU9KLE9BQU9LLEVBQVAsQ0FBVUgsS0FBVixFQUFpQkMsTUFBakIsRUFBeUJDLE9BQXpCLENBQVA7QUFDSCxLQUZEO0FBR0FILGFBQVNLLFNBQVQsR0FBcUIsSUFBckI7QUFDQSxXQUFPTCxRQUFQO0FBQ0g7QUFDRFAsUUFBUUksY0FBUixHQUF5QkEsY0FBekI7QUFDQTs7Ozs7Ozs7OztBQVVBUyx1QkFBdUJSLE9BQXZCLEdBQWlDLENBQUMsUUFBRCxDQUFqQztBQUNBLFNBQVNRLHNCQUFULENBQWdDUCxNQUFoQyxFQUF3QztBQUNwQyxRQUFJUSxpQkFBaUIsU0FBakJBLGNBQWlCLENBQVVOLEtBQVYsRUFBaUJDLE1BQWpCLEVBQXlCQyxPQUF6QixFQUFrQztBQUNuRCxlQUFPSixPQUFPUyxRQUFQLENBQWdCUCxLQUFoQixFQUF1QkMsTUFBdkIsRUFBK0JDLE9BQS9CLENBQVA7QUFDSCxLQUZEO0FBR0FJLG1CQUFlRixTQUFmLEdBQTJCLElBQTNCO0FBQ0EsV0FBT0UsY0FBUDtBQUNIO0FBQ0RkLFFBQVFhLHNCQUFSLEdBQWlDQSxzQkFBakM7QUFDQVgsVUFBVWMsRUFBVixDQUFhQyxNQUFiLENBQW9CLGlCQUFwQixFQUNLQyxNQURMLENBQ1ksU0FEWixFQUN1QmQsY0FEdkIsRUFFS2MsTUFGTCxDQUVZLGlCQUZaLEVBRStCTCxzQkFGL0I7QUFHQSIsImZpbGUiOiI4NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqIEBtb2R1bGUgbmcxICovIC8qKiBmb3IgdHlwZWRvYyAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGFuZ3VsYXJfMSA9IHJlcXVpcmUoXCIuL2FuZ3VsYXJcIik7XG4vKipcbiAqIGBpc1N0YXRlYCBGaWx0ZXI6IHRydXRoeSBpZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB0aGUgcGFyYW1ldGVyXG4gKlxuICogVHJhbnNsYXRlcyB0byBbW1N0YXRlU2VydmljZS5pc11dIGAkc3RhdGUuaXMoXCJzdGF0ZU5hbWVcIilgLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctaWY9XCInc3RhdGVOYW1lJyB8IGlzU3RhdGVcIj5zaG93IGlmIHN0YXRlIGlzICdzdGF0ZU5hbWUnPC9kaXY+XG4gKiBgYGBcbiAqL1xuJElzU3RhdGVGaWx0ZXIuJGluamVjdCA9IFsnJHN0YXRlJ107XG5mdW5jdGlvbiAkSXNTdGF0ZUZpbHRlcigkc3RhdGUpIHtcbiAgICB2YXIgaXNGaWx0ZXIgPSBmdW5jdGlvbiAoc3RhdGUsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gJHN0YXRlLmlzKHN0YXRlLCBwYXJhbXMsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgaXNGaWx0ZXIuJHN0YXRlZnVsID0gdHJ1ZTtcbiAgICByZXR1cm4gaXNGaWx0ZXI7XG59XG5leHBvcnRzLiRJc1N0YXRlRmlsdGVyID0gJElzU3RhdGVGaWx0ZXI7XG4vKipcbiAqIGBpbmNsdWRlZEJ5U3RhdGVgIEZpbHRlcjogdHJ1dGh5IGlmIHRoZSBjdXJyZW50IHN0YXRlIGluY2x1ZGVzIHRoZSBwYXJhbWV0ZXJcbiAqXG4gKiBUcmFuc2xhdGVzIHRvIFtbU3RhdGVTZXJ2aWNlLmluY2x1ZGVzXV1gICRzdGF0ZS5pcyhcImZ1bGxPclBhcnRpYWxTdGF0ZU5hbWVcIilgLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctaWY9XCInZnVsbE9yUGFydGlhbFN0YXRlTmFtZScgfCBpbmNsdWRlZEJ5U3RhdGVcIj5zaG93IGlmIHN0YXRlIGluY2x1ZGVzICdmdWxsT3JQYXJ0aWFsU3RhdGVOYW1lJzwvZGl2PlxuICogYGBgXG4gKi9cbiRJbmNsdWRlZEJ5U3RhdGVGaWx0ZXIuJGluamVjdCA9IFsnJHN0YXRlJ107XG5mdW5jdGlvbiAkSW5jbHVkZWRCeVN0YXRlRmlsdGVyKCRzdGF0ZSkge1xuICAgIHZhciBpbmNsdWRlc0ZpbHRlciA9IGZ1bmN0aW9uIChzdGF0ZSwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAkc3RhdGUuaW5jbHVkZXMoc3RhdGUsIHBhcmFtcywgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBpbmNsdWRlc0ZpbHRlci4kc3RhdGVmdWwgPSB0cnVlO1xuICAgIHJldHVybiBpbmNsdWRlc0ZpbHRlcjtcbn1cbmV4cG9ydHMuJEluY2x1ZGVkQnlTdGF0ZUZpbHRlciA9ICRJbmNsdWRlZEJ5U3RhdGVGaWx0ZXI7XG5hbmd1bGFyXzEubmcubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKVxuICAgIC5maWx0ZXIoJ2lzU3RhdGUnLCAkSXNTdGF0ZUZpbHRlcilcbiAgICAuZmlsdGVyKCdpbmNsdWRlZEJ5U3RhdGUnLCAkSW5jbHVkZWRCeVN0YXRlRmlsdGVyKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlRmlsdGVycy5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvYW5ndWxhci11aS1yb3V0ZXIvbGliL3N0YXRlRmlsdGVycy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///85\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @ng1api\n * @module directives\n */ /** for typedoc */\nvar angular_1 = __webpack_require__(10);\nvar angular_2 = __webpack_require__(55);\nvar core_1 = __webpack_require__(4);\nvar views_1 = __webpack_require__(29);\nvar services_1 = __webpack_require__(28);\nexports.uiView = ['$view', '$animate', '$uiViewScroll', '$interpolate', '$q', function $ViewDirective($view, $animate, $uiViewScroll, $interpolate, $q) {\n    function getRenderer(attrs, scope) {\n        return {\n            enter: function enter(element, target, cb) {\n                if (angular_1.ng.version.minor > 2) {\n                    $animate.enter(element, null, target).then(cb);\n                } else {\n                    $animate.enter(element, null, target, cb);\n                }\n            },\n            leave: function leave(element, cb) {\n                if (angular_1.ng.version.minor > 2) {\n                    $animate.leave(element).then(cb);\n                } else {\n                    $animate.leave(element, cb);\n                }\n            }\n        };\n    }\n    function configsEqual(config1, config2) {\n        return config1 === config2;\n    }\n    var rootData = {\n        $cfg: { viewDecl: { $context: $view._pluginapi._rootViewContext() } },\n        $uiView: {}\n    };\n    var directive = {\n        count: 0,\n        restrict: 'ECA',\n        terminal: true,\n        priority: 400,\n        transclude: 'element',\n        compile: function compile(tElement, tAttrs, $transclude) {\n            return function (scope, $element, attrs) {\n                var previousEl,\n                    currentEl,\n                    currentScope,\n                    unregister,\n                    onloadExp = attrs['onload'] || '',\n                    autoScrollExp = attrs['autoscroll'],\n                    renderer = getRenderer(attrs, scope),\n                    viewConfig = undefined,\n                    inherited = $element.inheritedData('$uiView') || rootData,\n                    name = $interpolate(attrs['uiView'] || attrs['name'] || '')(scope) || '$default';\n                var activeUIView = {\n                    $type: 'ng1',\n                    id: directive.count++,\n                    name: name,\n                    fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + \".\" + name : name,\n                    config: null,\n                    configUpdated: configUpdatedCallback,\n                    get creationContext() {\n                        var fromParentTagConfig = core_1.parse('$cfg.viewDecl.$context')(inherited);\n                        // Allow <ui-view name=\"foo\"><ui-view name=\"bar\"></ui-view></ui-view>\n                        // See https://github.com/angular-ui/ui-router/issues/3355\n                        var fromParentTag = core_1.parse('$uiView.creationContext')(inherited);\n                        return fromParentTagConfig || fromParentTag;\n                    }\n                };\n                core_1.trace.traceUIViewEvent(\"Linking\", activeUIView);\n                function configUpdatedCallback(config) {\n                    if (config && !(config instanceof views_1.Ng1ViewConfig)) return;\n                    if (configsEqual(viewConfig, config)) return;\n                    core_1.trace.traceUIViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);\n                    viewConfig = config;\n                    updateView(config);\n                }\n                $element.data('$uiView', { $uiView: activeUIView });\n                updateView();\n                unregister = $view.registerUIView(activeUIView);\n                scope.$on(\"$destroy\", function () {\n                    core_1.trace.traceUIViewEvent(\"Destroying/Unregistering\", activeUIView);\n                    unregister();\n                });\n                function cleanupLastView() {\n                    if (previousEl) {\n                        core_1.trace.traceUIViewEvent(\"Removing (previous) el\", previousEl.data('$uiView'));\n                        previousEl.remove();\n                        previousEl = null;\n                    }\n                    if (currentScope) {\n                        core_1.trace.traceUIViewEvent(\"Destroying scope\", activeUIView);\n                        currentScope.$destroy();\n                        currentScope = null;\n                    }\n                    if (currentEl) {\n                        var _viewData_1 = currentEl.data('$uiViewAnim');\n                        core_1.trace.traceUIViewEvent(\"Animate out\", _viewData_1);\n                        renderer.leave(currentEl, function () {\n                            _viewData_1.$$animLeave.resolve();\n                            previousEl = null;\n                        });\n                        previousEl = currentEl;\n                        currentEl = null;\n                    }\n                }\n                function updateView(config) {\n                    var newScope = scope.$new();\n                    var animEnter = $q.defer(),\n                        animLeave = $q.defer();\n                    var $uiViewData = {\n                        $cfg: config,\n                        $uiView: activeUIView\n                    };\n                    var $uiViewAnim = {\n                        $animEnter: animEnter.promise,\n                        $animLeave: animLeave.promise,\n                        $$animLeave: animLeave\n                    };\n                    /**\n                     * @ngdoc event\n                     * @name ui.router.state.directive:ui-view#$viewContentLoading\n                     * @eventOf ui.router.state.directive:ui-view\n                     * @eventType emits on ui-view directive scope\n                     * @description\n                     *\n                     * Fired once the view **begins loading**, *before* the DOM is rendered.\n                     *\n                     * @param {Object} event Event object.\n                     * @param {string} viewName Name of the view.\n                     */\n                    newScope.$emit('$viewContentLoading', name);\n                    var cloned = $transclude(newScope, function (clone) {\n                        clone.data('$uiViewAnim', $uiViewAnim);\n                        clone.data('$uiView', $uiViewData);\n                        renderer.enter(clone, $element, function onUIViewEnter() {\n                            animEnter.resolve();\n                            if (currentScope) currentScope.$emit('$viewContentAnimationEnded');\n                            if (core_1.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n                                $uiViewScroll(clone);\n                            }\n                        });\n                        cleanupLastView();\n                    });\n                    currentEl = cloned;\n                    currentScope = newScope;\n                    /**\n                     * @ngdoc event\n                     * @name ui.router.state.directive:ui-view#$viewContentLoaded\n                     * @eventOf ui.router.state.directive:ui-view\n                     * @eventType emits on ui-view directive scope\n                     * @description           *\n                     * Fired once the view is **loaded**, *after* the DOM is rendered.\n                     *\n                     * @param {Object} event Event object.\n                     */\n                    currentScope.$emit('$viewContentLoaded', config || viewConfig);\n                    currentScope.$eval(onloadExp);\n                }\n            };\n        }\n    };\n    return directive;\n}];\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$q', '$timeout'];\n/** @hidden */\nfunction $ViewDirectiveFill($compile, $controller, $transitions, $view, $q, $timeout) {\n    var getControllerAs = core_1.parse('viewDecl.controllerAs');\n    var getResolveAs = core_1.parse('viewDecl.resolveAs');\n    return {\n        restrict: 'ECA',\n        priority: -400,\n        compile: function compile(tElement) {\n            var initial = tElement.html();\n            tElement.empty();\n            return function (scope, $element) {\n                var data = $element.data('$uiView');\n                if (!data) {\n                    $element.html(initial);\n                    $compile($element.contents())(scope);\n                    return;\n                }\n                var cfg = data.$cfg || { viewDecl: {}, getTemplate: angular_2.noop };\n                var resolveCtx = cfg.path && new core_1.ResolveContext(cfg.path);\n                $element.html(cfg.getTemplate($element, resolveCtx) || initial);\n                core_1.trace.traceUIViewFill(data.$uiView, $element.html());\n                var link = $compile($element.contents());\n                var controller = cfg.controller;\n                var controllerAs = getControllerAs(cfg);\n                var resolveAs = getResolveAs(cfg);\n                var locals = resolveCtx && services_1.getLocals(resolveCtx);\n                scope[resolveAs] = locals;\n                if (controller) {\n                    var controllerInstance = $controller(controller, core_1.extend({}, locals, { $scope: scope, $element: $element }));\n                    if (controllerAs) {\n                        scope[controllerAs] = controllerInstance;\n                        scope[controllerAs][resolveAs] = locals;\n                    }\n                    // TODO: Use $view service as a central point for registering component-level hooks\n                    // Then, when a component is created, tell the $view service, so it can invoke hooks\n                    // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });\n                    // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));\n                    $element.data('$ngControllerController', controllerInstance);\n                    $element.children().data('$ngControllerController', controllerInstance);\n                    registerControllerCallbacks($q, $transitions, controllerInstance, scope, cfg);\n                }\n                // Wait for the component to appear in the DOM\n                if (core_1.isString(cfg.viewDecl.component)) {\n                    var cmp_1 = cfg.viewDecl.component;\n                    var kebobName = core_1.kebobString(cmp_1);\n                    var tagRegexp_1 = new RegExp(\"^(x-|data-)?\" + kebobName + \"$\", \"i\");\n                    var getComponentController = function getComponentController() {\n                        var directiveEl = [].slice.call($element[0].children).filter(function (el) {\n                            return el && el.tagName && tagRegexp_1.exec(el.tagName);\n                        });\n                        return directiveEl && angular_1.ng.element(directiveEl).data(\"$\" + cmp_1 + \"Controller\");\n                    };\n                    var deregisterWatch_1 = scope.$watch(getComponentController, function (ctrlInstance) {\n                        if (!ctrlInstance) return;\n                        registerControllerCallbacks($q, $transitions, ctrlInstance, scope, cfg);\n                        deregisterWatch_1();\n                    });\n                }\n                link(scope);\n            };\n        }\n    };\n}\n/** @hidden */\nvar hasComponentImpl = typeof angular_1.ng.module('ui.router')['component'] === 'function';\n/** @hidden incrementing id */\nvar _uiCanExitId = 0;\n/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */\nfunction registerControllerCallbacks($q, $transitions, controllerInstance, $scope, cfg) {\n    // Call $onInit() ASAP\n    if (core_1.isFunction(controllerInstance.$onInit) && !(cfg.viewDecl.component && hasComponentImpl)) {\n        controllerInstance.$onInit();\n    }\n    var viewState = core_1.tail(cfg.path).state.self;\n    var hookOptions = { bind: controllerInstance };\n    // Add component-level hook for onParamsChange\n    if (core_1.isFunction(controllerInstance.uiOnParamsChanged)) {\n        var resolveContext = new core_1.ResolveContext(cfg.path);\n        var viewCreationTrans_1 = resolveContext.getResolvable('$transition$').data;\n        // Fire callback on any successful transition\n        var paramsUpdated = function paramsUpdated($transition$) {\n            // Exit early if the $transition$ is the same as the view was created within.\n            // Exit early if the $transition$ will exit the state the view is for.\n            if ($transition$ === viewCreationTrans_1 || $transition$.exiting().indexOf(viewState) !== -1) return;\n            var toParams = $transition$.params(\"to\");\n            var fromParams = $transition$.params(\"from\");\n            var toSchema = $transition$.treeChanges().to.map(function (node) {\n                return node.paramSchema;\n            }).reduce(core_1.unnestR, []);\n            var fromSchema = $transition$.treeChanges().from.map(function (node) {\n                return node.paramSchema;\n            }).reduce(core_1.unnestR, []);\n            // Find the to params that have different values than the from params\n            var changedToParams = toSchema.filter(function (param) {\n                var idx = fromSchema.indexOf(param);\n                return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\n            });\n            // Only trigger callback if a to param has changed or is new\n            if (changedToParams.length) {\n                var changedKeys_1 = changedToParams.map(function (x) {\n                    return x.id;\n                });\n                // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n                var newValues = core_1.filter(toParams, function (val, key) {\n                    return changedKeys_1.indexOf(key) !== -1;\n                });\n                controllerInstance.uiOnParamsChanged(newValues, $transition$);\n            }\n        };\n        $scope.$on('$destroy', $transitions.onSuccess({}, paramsUpdated, hookOptions));\n    }\n    // Add component-level hook for uiCanExit\n    if (core_1.isFunction(controllerInstance.uiCanExit)) {\n        var id_1 = _uiCanExitId++;\n        var cacheProp_1 = '_uiCanExitIds';\n        // Returns true if a redirect transition already answered truthy\n        var prevTruthyAnswer_1 = function prevTruthyAnswer_1(trans) {\n            return !!trans && (trans[cacheProp_1] && trans[cacheProp_1][id_1] === true || prevTruthyAnswer_1(trans.redirectedFrom()));\n        };\n        // If a user answered yes, but the transition was later redirected, don't also ask for the new redirect transition\n        var wrappedHook = function wrappedHook(trans) {\n            var promise,\n                ids = trans[cacheProp_1] = trans[cacheProp_1] || {};\n            if (!prevTruthyAnswer_1(trans)) {\n                promise = $q.when(controllerInstance.uiCanExit(trans));\n                promise.then(function (val) {\n                    return ids[id_1] = val !== false;\n                });\n            }\n            return promise;\n        };\n        var criteria = { exiting: viewState.name };\n        $scope.$on('$destroy', $transitions.onBefore(criteria, wrappedHook, hookOptions));\n    }\n}\nangular_1.ng.module('ui.router.state').directive('uiView', exports.uiView);\nangular_1.ng.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n//# sourceMappingURL=viewDirective.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///86\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module ng1 */ /** */\nvar angular_1 = __webpack_require__(10);\n/** @hidden */\nfunction $ViewScrollProvider() {\n    var useAnchorScroll = false;\n    this.useAnchorScroll = function () {\n        useAnchorScroll = true;\n    };\n    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\n        if (useAnchorScroll) {\n            return $anchorScroll;\n        }\n        return function ($element) {\n            return $timeout(function () {\n                $element[0].scrollIntoView();\n            }, 0, false);\n        };\n    }];\n}\nangular_1.ng.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);\n//# sourceMappingURL=viewScroll.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5ndWxhci11aS1yb3V0ZXIvbGliL3ZpZXdTY3JvbGwuanM/NzIwNiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFuZ3VsYXJfMSIsInJlcXVpcmUiLCIkVmlld1Njcm9sbFByb3ZpZGVyIiwidXNlQW5jaG9yU2Nyb2xsIiwiJGdldCIsIiRhbmNob3JTY3JvbGwiLCIkdGltZW91dCIsIiRlbGVtZW50Iiwic2Nyb2xsSW50b1ZpZXciLCJuZyIsIm1vZHVsZSIsInByb3ZpZGVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0Esa0IsQ0FBbUI7QUFDbkIsSUFBSUMsWUFBWSxtQkFBQUMsQ0FBUSxFQUFSLENBQWhCO0FBQ0E7QUFDQSxTQUFTQyxtQkFBVCxHQUErQjtBQUMzQixRQUFJQyxrQkFBa0IsS0FBdEI7QUFDQSxTQUFLQSxlQUFMLEdBQXVCLFlBQVk7QUFDL0JBLDBCQUFrQixJQUFsQjtBQUNILEtBRkQ7QUFHQSxTQUFLQyxJQUFMLEdBQVksQ0FBQyxlQUFELEVBQWtCLFVBQWxCLEVBQThCLFVBQVVDLGFBQVYsRUFBeUJDLFFBQXpCLEVBQW1DO0FBQ3JFLFlBQUlILGVBQUosRUFBcUI7QUFDakIsbUJBQU9FLGFBQVA7QUFDSDtBQUNELGVBQU8sVUFBVUUsUUFBVixFQUFvQjtBQUN2QixtQkFBT0QsU0FBUyxZQUFZO0FBQ3hCQyx5QkFBUyxDQUFULEVBQVlDLGNBQVo7QUFDSCxhQUZNLEVBRUosQ0FGSSxFQUVELEtBRkMsQ0FBUDtBQUdILFNBSkQ7QUFLSCxLQVRPLENBQVo7QUFVSDtBQUNEUixVQUFVUyxFQUFWLENBQWFDLE1BQWIsQ0FBb0IsaUJBQXBCLEVBQXVDQyxRQUF2QyxDQUFnRCxlQUFoRCxFQUFpRVQsbUJBQWpFO0FBQ0EiLCJmaWxlIjoiODcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKiBAbW9kdWxlIG5nMSAqLyAvKiogKi9cbnZhciBhbmd1bGFyXzEgPSByZXF1aXJlKFwiLi9hbmd1bGFyXCIpO1xuLyoqIEBoaWRkZW4gKi9cbmZ1bmN0aW9uICRWaWV3U2Nyb2xsUHJvdmlkZXIoKSB7XG4gICAgdmFyIHVzZUFuY2hvclNjcm9sbCA9IGZhbHNlO1xuICAgIHRoaXMudXNlQW5jaG9yU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB1c2VBbmNob3JTY3JvbGwgPSB0cnVlO1xuICAgIH07XG4gICAgdGhpcy4kZ2V0ID0gWyckYW5jaG9yU2Nyb2xsJywgJyR0aW1lb3V0JywgZnVuY3Rpb24gKCRhbmNob3JTY3JvbGwsICR0aW1lb3V0KSB7XG4gICAgICAgICAgICBpZiAodXNlQW5jaG9yU2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRhbmNob3JTY3JvbGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnRbMF0uc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgICAgICAgICB9LCAwLCBmYWxzZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XTtcbn1cbmFuZ3VsYXJfMS5uZy5tb2R1bGUoJ3VpLnJvdXRlci5zdGF0ZScpLnByb3ZpZGVyKCckdWlWaWV3U2Nyb2xsJywgJFZpZXdTY3JvbGxQcm92aWRlcik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWV3U2Nyb2xsLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9hbmd1bGFyLXVpLXJvdXRlci9saWIvdmlld1Njcm9sbC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///87\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar HomeCtrl = function () {\n    _createClass(HomeCtrl, null, [{\n        key: '$inject',\n        get: function get() {\n            return ['$state', 'LoginSvc'];\n        }\n    }]);\n\n    function HomeCtrl($state, LoginSvc) {\n        _classCallCheck(this, HomeCtrl);\n\n        this.$state = $state;\n        this.LoginSvc = LoginSvc;\n    }\n\n    _createClass(HomeCtrl, [{\n        key: 'logout',\n        value: function logout() {\n            var _this = this;\n\n            this.LoginSvc.logout().then(function () {\n                _this.$state.go('login');\n            });\n        }\n    }]);\n\n    return HomeCtrl;\n}();\n\n// function 사용시...\n// function HomeCtrl($state, LoginSvc) { ... }\n// HomeCtrl.$inject = ['$state', 'LoginSvc'];\n\nexports.default = HomeCtrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlci9Ib21lLmpzPzE0OTkiXSwibmFtZXMiOlsiSG9tZUN0cmwiLCIkc3RhdGUiLCJMb2dpblN2YyIsImxvZ291dCIsInRoZW4iLCJnbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFNQSxROzs7NEJBQ21CO0FBQ2pCLG1CQUFPLENBQUMsUUFBRCxFQUFXLFVBQVgsQ0FBUDtBQUNIOzs7QUFFRCxzQkFBWUMsTUFBWixFQUFvQkMsUUFBcEIsRUFBOEI7QUFBQTs7QUFDMUIsYUFBS0QsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsYUFBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDSDs7OztpQ0FFUTtBQUFBOztBQUNMLGlCQUFLQSxRQUFMLENBQWNDLE1BQWQsR0FBdUJDLElBQXZCLENBQTRCLFlBQU07QUFDOUIsc0JBQUtILE1BQUwsQ0FBWUksRUFBWixDQUFlLE9BQWY7QUFDSCxhQUZEO0FBR0g7Ozs7OztBQUdMO0FBQ0E7QUFDQTs7a0JBRWVMLFEiLCJmaWxlIjoiODguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBIb21lQ3RybCB7XHJcbiAgICBzdGF0aWMgZ2V0ICRpbmplY3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIFsnJHN0YXRlJywgJ0xvZ2luU3ZjJ107XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoJHN0YXRlLCBMb2dpblN2Yykge1xyXG4gICAgICAgIHRoaXMuJHN0YXRlID0gJHN0YXRlO1xyXG4gICAgICAgIHRoaXMuTG9naW5TdmMgPSBMb2dpblN2YztcclxuICAgIH1cclxuXHJcbiAgICBsb2dvdXQoKSB7XHJcbiAgICAgICAgdGhpcy5Mb2dpblN2Yy5sb2dvdXQoKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy4kc3RhdGUuZ28oJ2xvZ2luJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIGZ1bmN0aW9uIOyCrOyaqeyLnC4uLlxyXG4vLyBmdW5jdGlvbiBIb21lQ3RybCgkc3RhdGUsIExvZ2luU3ZjKSB7IC4uLiB9XHJcbi8vIEhvbWVDdHJsLiRpbmplY3QgPSBbJyRzdGF0ZScsICdMb2dpblN2YyddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSG9tZUN0cmw7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRyb2xsZXIvSG9tZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///88\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LoginCtrl = function () {\n\t_createClass(LoginCtrl, null, [{\n\t\tkey: '$inject',\n\t\tget: function get() {\n\t\t\treturn ['$state', 'LoginSvc'];\n\t\t}\n\t}]);\n\n\tfunction LoginCtrl($state, LoginSvc) {\n\t\t_classCallCheck(this, LoginCtrl);\n\n\t\tthis.$state = $state;\n\t\tthis.LoginSvc = LoginSvc;\n\n\t\tthis.loginObj = {\n\t\t\tlogin: null,\n\t\t\tpwd: null\n\t\t};\n\t}\n\n\t_createClass(LoginCtrl, [{\n\t\tkey: 'login',\n\t\tvalue: function login() {\n\t\t\tvar _this = this;\n\n\t\t\tthis.LoginSvc.login(this.loginObj).then(function (response) {\n\t\t\t\tif (response.data.success) {\n\t\t\t\t\t_this.$state.go('home');\n\t\t\t\t} else {\n\t\t\t\t\talert(response.data.message);\n\t\t\t\t}\n\t\t\t\t_this.loginObj = {\n\t\t\t\t\tlogin: null,\n\t\t\t\t\tpwd: null\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t}]);\n\n\treturn LoginCtrl;\n}();\n\nexports.default = LoginCtrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlci9Mb2dpbi5qcz9hMDBjIl0sIm5hbWVzIjpbIkxvZ2luQ3RybCIsIiRzdGF0ZSIsIkxvZ2luU3ZjIiwibG9naW5PYmoiLCJsb2dpbiIsInB3ZCIsInRoZW4iLCJyZXNwb25zZSIsImRhdGEiLCJzdWNjZXNzIiwiZ28iLCJhbGVydCIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBTUEsUzs7O3NCQUNnQjtBQUNwQixVQUFPLENBQUMsUUFBRCxFQUFXLFVBQVgsQ0FBUDtBQUNBOzs7QUFFRCxvQkFBWUMsTUFBWixFQUFvQkMsUUFBcEIsRUFBOEI7QUFBQTs7QUFDN0IsT0FBS0QsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsT0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7O0FBRUEsT0FBS0MsUUFBTCxHQUFnQjtBQUNmQyxVQUFPLElBRFE7QUFFZkMsUUFBSztBQUZVLEdBQWhCO0FBSUE7Ozs7MEJBRU87QUFBQTs7QUFDUCxRQUFLSCxRQUFMLENBQWNFLEtBQWQsQ0FBb0IsS0FBS0QsUUFBekIsRUFBbUNHLElBQW5DLENBQXdDLFVBQUNDLFFBQUQsRUFBYztBQUNyRCxRQUFJQSxTQUFTQyxJQUFULENBQWNDLE9BQWxCLEVBQTJCO0FBQzFCLFdBQUtSLE1BQUwsQ0FBWVMsRUFBWixDQUFlLE1BQWY7QUFDQSxLQUZELE1BR0s7QUFDSkMsV0FBTUosU0FBU0MsSUFBVCxDQUFjSSxPQUFwQjtBQUNBO0FBQ0QsVUFBS1QsUUFBTCxHQUFnQjtBQUNmQyxZQUFPLElBRFE7QUFFZkMsVUFBSztBQUZVLEtBQWhCO0FBSUEsSUFYRDtBQVlBOzs7Ozs7a0JBR2FMLFMiLCJmaWxlIjoiODkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBMb2dpbkN0cmwge1xyXG5cdHN0YXRpYyBnZXQgJGluamVjdCgpIHtcclxuXHRcdHJldHVybiBbJyRzdGF0ZScsICdMb2dpblN2YyddXHJcblx0fVxyXG5cclxuXHRjb25zdHJ1Y3Rvcigkc3RhdGUsIExvZ2luU3ZjKSB7XHJcblx0XHR0aGlzLiRzdGF0ZSA9ICRzdGF0ZTtcclxuXHRcdHRoaXMuTG9naW5TdmMgPSBMb2dpblN2YztcclxuXHJcblx0XHR0aGlzLmxvZ2luT2JqID0ge1xyXG5cdFx0XHRsb2dpbjogbnVsbCxcclxuXHRcdFx0cHdkOiBudWxsXHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0bG9naW4oKSB7XHJcblx0XHR0aGlzLkxvZ2luU3ZjLmxvZ2luKHRoaXMubG9naW5PYmopLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcblx0XHRcdGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcclxuXHRcdFx0XHR0aGlzLiRzdGF0ZS5nbygnaG9tZScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdGFsZXJ0KHJlc3BvbnNlLmRhdGEubWVzc2FnZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5sb2dpbk9iaiA9IHtcclxuXHRcdFx0XHRsb2dpbjogbnVsbCxcclxuXHRcdFx0XHRwd2Q6IG51bGxcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMb2dpbkN0cmw7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRyb2xsZXIvTG9naW4uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///89\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RegisterCtrl = function () {\n    _createClass(RegisterCtrl, null, [{\n        key: '$inject',\n        get: function get() {\n            return ['$state', 'LoginSvc'];\n        }\n    }]);\n\n    function RegisterCtrl($state, LoginSvc) {\n        _classCallCheck(this, RegisterCtrl);\n\n        this.$state = $state;\n        this.LoginSvc = LoginSvc;\n\n        this.registerObj = {\n            login: null,\n            pwd: null,\n            pwdConfirm: null\n        };\n    }\n\n    _createClass(RegisterCtrl, [{\n        key: 'register',\n        value: function register() {\n            var _this = this;\n\n            if (this.registerObj.pwd !== this.registerObj.pwdConfirm) {\n                alert('패스워드 확인!');\n                this.registerObj.pwd = this.registerObj.pwdConfirm = null;\n                return;\n            }\n\n            this.LoginSvc.register(this.registerObj).then(function (response) {\n                console.log(response);\n                if (response.data.success) {\n                    alert(_this.registerObj.login + ' \\uAC00\\uC785 \\uC131\\uACF5!');\n                    _this.registerObj = {\n                        login: null,\n                        pwd: null,\n                        pwdConfirm: null\n                    };\n                    _this.$state.go('login');\n                } else {\n                    alert(response.data.message);\n                    _this.registerObj.pwd = _this.registerObj.pwdConfirm = null;\n                }\n            });\n        }\n    }]);\n\n    return RegisterCtrl;\n}();\n\nexports.default = RegisterCtrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlci9SZWdpc3Rlci5qcz9kNWZkIl0sIm5hbWVzIjpbIlJlZ2lzdGVyQ3RybCIsIiRzdGF0ZSIsIkxvZ2luU3ZjIiwicmVnaXN0ZXJPYmoiLCJsb2dpbiIsInB3ZCIsInB3ZENvbmZpcm0iLCJhbGVydCIsInJlZ2lzdGVyIiwidGhlbiIsInJlc3BvbnNlIiwiY29uc29sZSIsImxvZyIsImRhdGEiLCJzdWNjZXNzIiwiZ28iLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQU1BLFk7Ozs0QkFDbUI7QUFDakIsbUJBQU8sQ0FBQyxRQUFELEVBQVcsVUFBWCxDQUFQO0FBQ0g7OztBQUVELDBCQUFZQyxNQUFaLEVBQW9CQyxRQUFwQixFQUE4QjtBQUFBOztBQUMxQixhQUFLRCxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxhQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjs7QUFFQSxhQUFLQyxXQUFMLEdBQW1CO0FBQ2ZDLG1CQUFPLElBRFE7QUFFZkMsaUJBQUssSUFGVTtBQUdmQyx3QkFBWTtBQUhHLFNBQW5CO0FBS0g7Ozs7bUNBRVU7QUFBQTs7QUFDUCxnQkFBSSxLQUFLSCxXQUFMLENBQWlCRSxHQUFqQixLQUF5QixLQUFLRixXQUFMLENBQWlCRyxVQUE5QyxFQUEwRDtBQUN0REMsc0JBQU0sVUFBTjtBQUNBLHFCQUFLSixXQUFMLENBQWlCRSxHQUFqQixHQUF1QixLQUFLRixXQUFMLENBQWlCRyxVQUFqQixHQUE4QixJQUFyRDtBQUNBO0FBQ0g7O0FBRUQsaUJBQUtKLFFBQUwsQ0FBY00sUUFBZCxDQUF1QixLQUFLTCxXQUE1QixFQUF5Q00sSUFBekMsQ0FBOEMsVUFBQ0MsUUFBRCxFQUFjO0FBQ3hEQyx3QkFBUUMsR0FBUixDQUFZRixRQUFaO0FBQ0Esb0JBQUlBLFNBQVNHLElBQVQsQ0FBY0MsT0FBbEIsRUFBMkI7QUFDdkJQLDBCQUFTLE1BQUtKLFdBQUwsQ0FBaUJDLEtBQTFCO0FBQ0EsMEJBQUtELFdBQUwsR0FBbUI7QUFDZkMsK0JBQU8sSUFEUTtBQUVmQyw2QkFBSyxJQUZVO0FBR2ZDLG9DQUFZO0FBSEcscUJBQW5CO0FBS0EsMEJBQUtMLE1BQUwsQ0FBWWMsRUFBWixDQUFlLE9BQWY7QUFDSCxpQkFSRCxNQVNLO0FBQ0RSLDBCQUFNRyxTQUFTRyxJQUFULENBQWNHLE9BQXBCO0FBQ0EsMEJBQUtiLFdBQUwsQ0FBaUJFLEdBQWpCLEdBQXVCLE1BQUtGLFdBQUwsQ0FBaUJHLFVBQWpCLEdBQThCLElBQXJEO0FBQ0g7QUFDSixhQWZEO0FBZ0JIOzs7Ozs7a0JBR1VOLFkiLCJmaWxlIjoiOTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBSZWdpc3RlckN0cmwge1xyXG4gICAgc3RhdGljIGdldCAkaW5qZWN0KCkge1xyXG4gICAgICAgIHJldHVybiBbJyRzdGF0ZScsICdMb2dpblN2YyddXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoJHN0YXRlLCBMb2dpblN2Yykge1xyXG4gICAgICAgIHRoaXMuJHN0YXRlID0gJHN0YXRlO1xyXG4gICAgICAgIHRoaXMuTG9naW5TdmMgPSBMb2dpblN2YztcclxuXHJcbiAgICAgICAgdGhpcy5yZWdpc3Rlck9iaiA9IHtcclxuICAgICAgICAgICAgbG9naW46IG51bGwsXHJcbiAgICAgICAgICAgIHB3ZDogbnVsbCxcclxuICAgICAgICAgICAgcHdkQ29uZmlybTogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVnaXN0ZXJPYmoucHdkICE9PSB0aGlzLnJlZ2lzdGVyT2JqLnB3ZENvbmZpcm0pIHtcclxuICAgICAgICAgICAgYWxlcnQoJ+2MqOyKpOybjOuTnCDtmZXsnbghJyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJPYmoucHdkID0gdGhpcy5yZWdpc3Rlck9iai5wd2RDb25maXJtID0gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5Mb2dpblN2Yy5yZWdpc3Rlcih0aGlzLnJlZ2lzdGVyT2JqKS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KGAke3RoaXMucmVnaXN0ZXJPYmoubG9naW59IOqwgOyehSDshLHqs7UhYCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyT2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2luOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHB3ZDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBwd2RDb25maXJtOiBudWxsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kc3RhdGUuZ28oJ2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydChyZXNwb25zZS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3Rlck9iai5wd2QgPSB0aGlzLnJlZ2lzdGVyT2JqLnB3ZENvbmZpcm0gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlZ2lzdGVyQ3RybDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29udHJvbGxlci9SZWdpc3Rlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///90\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 글로벌 로그인 서비스\r\n */\nvar LoginSvc = function () {\n\t_createClass(LoginSvc, null, [{\n\t\tkey: '$inject',\n\t\tget: function get() {\n\t\t\treturn ['$http'];\n\t\t}\n\t}]);\n\n\tfunction LoginSvc($http) {\n\t\t_classCallCheck(this, LoginSvc);\n\n\t\tthis.$http = $http;\n\t\tthis.logged = logged; // 이미 로그인된 경우면 index.php의 logged = true\n\t\tthis.uid = uid; // 이미 로그인된 경우면 index.php의 uid = 현재 사용자 ID\n\t}\n\n\t_createClass(LoginSvc, [{\n\t\tkey: 'register',\n\t\tvalue: function register(registerObj) {\n\t\t\treturn this.$http({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: ajax_url,\n\t\t\t\tparams: {\n\t\t\t\t\taction: 'register',\n\t\t\t\t\tlogin: registerObj.login,\n\t\t\t\t\tpwd: registerObj.pwd\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'login',\n\t\tvalue: function login(loginObj) {\n\t\t\tvar _this = this;\n\n\t\t\t// 구글 검색어 javascript promise\n\t\t\treturn this.$http({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: ajax_url,\n\t\t\t\tparams: {\n\t\t\t\t\taction: 'login',\n\t\t\t\t\tlogin: loginObj.login,\n\t\t\t\t\tpwd: loginObj.pwd\n\t\t\t\t}\n\t\t\t}).then(function (response) {\n\t\t\t\tif (response.data.success) {\n\t\t\t\t\t_this.logged = true;\n\t\t\t\t\t_this.uid = response.data.uid;\n\t\t\t\t}\n\t\t\t\treturn response;\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'logout',\n\t\tvalue: function logout() {\n\t\t\tvar _this2 = this;\n\n\t\t\treturn this.$http({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: ajax_url,\n\t\t\t\tparams: {\n\t\t\t\t\taction: 'logout'\n\t\t\t\t}\n\t\t\t}).then(function (response) {\n\t\t\t\t_this2.logged = false;\n\t\t\t\t_this2.uid = null;\n\t\t\t\treturn response;\n\t\t\t});\n\t\t}\n\t}]);\n\n\treturn LoginSvc;\n}();\n\nexports.default = LoginSvc;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZS9Mb2dpbi5qcz85MmU4Il0sIm5hbWVzIjpbIkxvZ2luU3ZjIiwiJGh0dHAiLCJsb2dnZWQiLCJ1aWQiLCJyZWdpc3Rlck9iaiIsIm1ldGhvZCIsInVybCIsImFqYXhfdXJsIiwicGFyYW1zIiwiYWN0aW9uIiwibG9naW4iLCJwd2QiLCJsb2dpbk9iaiIsInRoZW4iLCJyZXNwb25zZSIsImRhdGEiLCJzdWNjZXNzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7OztJQUdNQSxROzs7c0JBQ2dCO0FBQ3BCLFVBQU8sQ0FBQyxPQUFELENBQVA7QUFDQTs7O0FBRUQsbUJBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFDbEIsT0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsT0FBS0MsTUFBTCxHQUFjQSxNQUFkLENBRmtCLENBRUk7QUFDdEIsT0FBS0MsR0FBTCxHQUFXQSxHQUFYLENBSGtCLENBR0k7QUFDdEI7Ozs7MkJBRVFDLFcsRUFBYTtBQUNyQixVQUFPLEtBQUtILEtBQUwsQ0FBVztBQUNqQkksWUFBUSxNQURTO0FBRWpCQyxTQUFLQyxRQUZZO0FBR2pCQyxZQUFRO0FBQ1BDLGFBQVEsVUFERDtBQUVQQyxZQUFPTixZQUFZTSxLQUZaO0FBR1BDLFVBQUtQLFlBQVlPO0FBSFY7QUFIUyxJQUFYLENBQVA7QUFTQTs7O3dCQUNLQyxRLEVBQVU7QUFBQTs7QUFDWjtBQUNILFVBQU8sS0FBS1gsS0FBTCxDQUFXO0FBQ2pCSSxZQUFRLE1BRFM7QUFFakJDLFNBQUtDLFFBRlk7QUFHakJDLFlBQVE7QUFDUEMsYUFBUSxPQUREO0FBRVBDLFlBQU9FLFNBQVNGLEtBRlQ7QUFHUEMsVUFBS0MsU0FBU0Q7QUFIUDtBQUhTLElBQVgsRUFRSkUsSUFSSSxDQVFDLFVBQUNDLFFBQUQsRUFBYztBQUNyQixRQUFJQSxTQUFTQyxJQUFULENBQWNDLE9BQWxCLEVBQTJCO0FBQzFCLFdBQUtkLE1BQUwsR0FBYyxJQUFkO0FBQ0EsV0FBS0MsR0FBTCxHQUFXVyxTQUFTQyxJQUFULENBQWNaLEdBQXpCO0FBQ0E7QUFDRCxXQUFPVyxRQUFQO0FBQ0EsSUFkTSxDQUFQO0FBZUE7OzsyQkFDUTtBQUFBOztBQUNSLFVBQU8sS0FBS2IsS0FBTCxDQUFXO0FBQ2pCSSxZQUFRLE1BRFM7QUFFakJDLFNBQUtDLFFBRlk7QUFHakJDLFlBQVE7QUFDUEMsYUFBUTtBQUREO0FBSFMsSUFBWCxFQU1KSSxJQU5JLENBTUMsVUFBQ0MsUUFBRCxFQUFjO0FBQ3JCLFdBQUtaLE1BQUwsR0FBYyxLQUFkO0FBQ0EsV0FBS0MsR0FBTCxHQUFXLElBQVg7QUFDQSxXQUFPVyxRQUFQO0FBQ0EsSUFWTSxDQUFQO0FBV0E7Ozs7OztrQkFHYWQsUSIsImZpbGUiOiI5MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDquIDroZzrsowg66Gc6re47J24IOyEnOu5hOyKpFxyXG4gKi9cclxuY2xhc3MgTG9naW5TdmMge1xyXG5cdHN0YXRpYyBnZXQgJGluamVjdCgpIHtcclxuXHRcdHJldHVybiBbJyRodHRwJ107XHJcblx0fVxyXG5cclxuXHRjb25zdHJ1Y3RvcigkaHR0cCkge1xyXG5cdFx0dGhpcy4kaHR0cCA9ICRodHRwO1xyXG5cdFx0dGhpcy5sb2dnZWQgPSBsb2dnZWQ7IC8vIOydtOuvuCDroZzqt7jsnbjrkJwg6rK97Jqw66m0IGluZGV4LnBocOydmCBsb2dnZWQgPSB0cnVlXHJcblx0XHR0aGlzLnVpZCA9IHVpZDsgICAgICAgLy8g7J2066+4IOuhnOq3uOyduOuQnCDqsr3smrDrqbQgaW5kZXgucGhw7J2YIHVpZCA9IO2YhOyerCDsgqzsmqnsnpAgSURcclxuXHR9XHJcblxyXG5cdHJlZ2lzdGVyKHJlZ2lzdGVyT2JqKSB7XHJcblx0XHRyZXR1cm4gdGhpcy4kaHR0cCh7XHJcblx0XHRcdG1ldGhvZDogJ1BPU1QnLFxyXG5cdFx0XHR1cmw6IGFqYXhfdXJsLFxyXG5cdFx0XHRwYXJhbXM6IHtcclxuXHRcdFx0XHRhY3Rpb246ICdyZWdpc3RlcicsXHJcblx0XHRcdFx0bG9naW46IHJlZ2lzdGVyT2JqLmxvZ2luLFxyXG5cdFx0XHRcdHB3ZDogcmVnaXN0ZXJPYmoucHdkXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHRsb2dpbihsb2dpbk9iaikge1xyXG5cdCAgICAvLyDqtazquIAg6rKA7IOJ7Ja0IGphdmFzY3JpcHQgcHJvbWlzZVxyXG5cdFx0cmV0dXJuIHRoaXMuJGh0dHAoe1xyXG5cdFx0XHRtZXRob2Q6ICdQT1NUJyxcclxuXHRcdFx0dXJsOiBhamF4X3VybCxcclxuXHRcdFx0cGFyYW1zOiB7XHJcblx0XHRcdFx0YWN0aW9uOiAnbG9naW4nLFxyXG5cdFx0XHRcdGxvZ2luOiBsb2dpbk9iai5sb2dpbixcclxuXHRcdFx0XHRwd2Q6IGxvZ2luT2JqLnB3ZFxyXG5cdFx0XHR9XHJcblx0XHR9KS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG5cdFx0XHRpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzKSB7XHJcblx0XHRcdFx0dGhpcy5sb2dnZWQgPSB0cnVlO1xyXG5cdFx0XHRcdHRoaXMudWlkID0gcmVzcG9uc2UuZGF0YS51aWQ7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdGxvZ291dCgpIHtcclxuXHRcdHJldHVybiB0aGlzLiRodHRwKHtcclxuXHRcdFx0bWV0aG9kOiAnUE9TVCcsXHJcblx0XHRcdHVybDogYWpheF91cmwsXHJcblx0XHRcdHBhcmFtczoge1xyXG5cdFx0XHRcdGFjdGlvbjogJ2xvZ291dCdcclxuXHRcdFx0fVxyXG5cdFx0fSkudGhlbigocmVzcG9uc2UpID0+IHtcclxuXHRcdFx0dGhpcy5sb2dnZWQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy51aWQgPSBudWxsO1xyXG5cdFx0XHRyZXR1cm4gcmVzcG9uc2U7XHJcblx0XHR9KTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvZ2luU3ZjO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zZXJ2aWNlL0xvZ2luLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///91\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _jqueryParam = __webpack_require__(93);\n\nvar _jqueryParam2 = _interopRequireDefault(_jqueryParam);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n__webpack_require__(95);\n\nvar TestSuite = function () {\n    _createClass(TestSuite, null, [{\n        key: '$inject',\n        get: function get() {\n            return ['$http'];\n        }\n    }]);\n\n    function TestSuite($http) {\n        _classCallCheck(this, TestSuite);\n\n        this.$http = $http;\n        this.action = null;\n        this.params = [{\n            key: null,\n            value: null\n        }];\n    }\n\n    _createClass(TestSuite, [{\n        key: 'addParam',\n        value: function addParam() {\n            this.params.push({\n                key: null,\n                value: null\n            });\n        }\n    }, {\n        key: 'removeParam',\n        value: function removeParam($index) {\n            this.params.splice($index, 1);\n        }\n    }, {\n        key: 'submit',\n        value: function submit() {\n            var params = {\n                action: this.action\n            };\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = this.params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var kv = _step.value;\n\n                    if (kv.key === null) {\n                        continue;\n                    }\n                    params[kv.key] = kv.value;\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            console.log('Params:', params);\n\n            this.$http({\n                method: 'POST',\n                url: ajax_url,\n                data: (0, _jqueryParam2.default)(params),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function (response) {\n                console.log(response);\n            });\n        }\n    }]);\n\n    return TestSuite;\n}();\n\nexports.default = TestSuite;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlci9UZXN0U3VpdGUuanM/NmFiMCJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiVGVzdFN1aXRlIiwiJGh0dHAiLCJhY3Rpb24iLCJwYXJhbXMiLCJrZXkiLCJ2YWx1ZSIsInB1c2giLCIkaW5kZXgiLCJzcGxpY2UiLCJrdiIsImNvbnNvbGUiLCJsb2ciLCJtZXRob2QiLCJ1cmwiLCJhamF4X3VybCIsImRhdGEiLCJoZWFkZXJzIiwidGhlbiIsInJlc3BvbnNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7OztBQUVBLG1CQUFBQSxDQUFRLEVBQVI7O0lBRU1DLFM7Ozs0QkFDbUI7QUFDakIsbUJBQU8sQ0FBQyxPQUFELENBQVA7QUFDSDs7O0FBRUQsdUJBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFDZixhQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxhQUFLQyxNQUFMLEdBQWMsSUFBZDtBQUNBLGFBQUtDLE1BQUwsR0FBYyxDQUFDO0FBQ1hDLGlCQUFLLElBRE07QUFFWEMsbUJBQU87QUFGSSxTQUFELENBQWQ7QUFJSDs7OzttQ0FFVTtBQUNQLGlCQUFLRixNQUFMLENBQVlHLElBQVosQ0FBaUI7QUFDYkYscUJBQUssSUFEUTtBQUViQyx1QkFBTztBQUZNLGFBQWpCO0FBSUg7OztvQ0FDV0UsTSxFQUFRO0FBQ2hCLGlCQUFLSixNQUFMLENBQVlLLE1BQVosQ0FBbUJELE1BQW5CLEVBQTJCLENBQTNCO0FBQ0g7OztpQ0FFUTtBQUNMLGdCQUFJSixTQUFTO0FBQ1RELHdCQUFRLEtBQUtBO0FBREosYUFBYjtBQURLO0FBQUE7QUFBQTs7QUFBQTtBQUlMLHFDQUFlLEtBQUtDLE1BQXBCLDhIQUE0QjtBQUFBLHdCQUFuQk0sRUFBbUI7O0FBQ3hCLHdCQUFJQSxHQUFHTCxHQUFILEtBQVcsSUFBZixFQUFxQjtBQUNqQjtBQUNIO0FBQ0RELDJCQUFPTSxHQUFHTCxHQUFWLElBQWlCSyxHQUFHSixLQUFwQjtBQUNIO0FBVEk7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFVTEssb0JBQVFDLEdBQVIsQ0FBWSxTQUFaLEVBQXVCUixNQUF2Qjs7QUFFQSxpQkFBS0YsS0FBTCxDQUFXO0FBQ1BXLHdCQUFRLE1BREQ7QUFFUEMscUJBQUtDLFFBRkU7QUFHUEMsc0JBQU0sMkJBQU1aLE1BQU4sQ0FIQztBQUlQYSx5QkFBUztBQUNMLG9DQUFnQjtBQURYO0FBSkYsYUFBWCxFQU9HQyxJQVBILENBT1EsVUFBQ0MsUUFBRCxFQUFjO0FBQ2xCUix3QkFBUUMsR0FBUixDQUFZTyxRQUFaO0FBQ0gsYUFURDtBQVVIOzs7Ozs7a0JBR1VsQixTIiwiZmlsZSI6IjkyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcmFtIGZyb20gJ2pxdWVyeS1wYXJhbSdcclxuXHJcbnJlcXVpcmUoJy4uL3N0eWxlL3Rlc3RTdWl0ZS5sZXNzJyk7XHJcblxyXG5jbGFzcyBUZXN0U3VpdGUge1xyXG4gICAgc3RhdGljIGdldCAkaW5qZWN0KCkge1xyXG4gICAgICAgIHJldHVybiBbJyRodHRwJ107XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoJGh0dHApIHtcclxuICAgICAgICB0aGlzLiRodHRwID0gJGh0dHA7XHJcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMucGFyYW1zID0gW3tcclxuICAgICAgICAgICAga2V5OiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbFxyXG4gICAgICAgIH1dO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFBhcmFtKCkge1xyXG4gICAgICAgIHRoaXMucGFyYW1zLnB1c2goe1xyXG4gICAgICAgICAgICBrZXk6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZW1vdmVQYXJhbSgkaW5kZXgpIHtcclxuICAgICAgICB0aGlzLnBhcmFtcy5zcGxpY2UoJGluZGV4LCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBzdWJtaXQoKSB7XHJcbiAgICAgICAgbGV0IHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgYWN0aW9uOiB0aGlzLmFjdGlvblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yIChsZXQga3Ygb2YgdGhpcy5wYXJhbXMpIHtcclxuICAgICAgICAgICAgaWYgKGt2LmtleSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGFyYW1zW2t2LmtleV0gPSBrdi52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1BhcmFtczonLCBwYXJhbXMpO1xyXG5cclxuICAgICAgICB0aGlzLiRodHRwKHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgIHVybDogYWpheF91cmwsXHJcbiAgICAgICAgICAgIGRhdGE6IHBhcmFtKHBhcmFtcyksXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXN0U3VpdGU7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRyb2xsZXIvVGVzdFN1aXRlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///92\n")},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * @preserve jquery-param (c) 2015 KNOWLEDGECODE | MIT\n */\n(function (global) {\n    'use strict';\n\n    var param = function param(a) {\n        var s = [],\n            rbracket = /\\[\\]$/,\n            isArray = function isArray(obj) {\n            return Object.prototype.toString.call(obj) === '[object Array]';\n        },\n            add = function add(k, v) {\n            v = typeof v === 'function' ? v() : v === null ? '' : v === undefined ? '' : v;\n            s[s.length] = encodeURIComponent(k) + '=' + encodeURIComponent(v);\n        },\n            buildParams = function buildParams(prefix, obj) {\n            var i, len, key;\n\n            if (prefix) {\n                if (isArray(obj)) {\n                    for (i = 0, len = obj.length; i < len; i++) {\n                        if (rbracket.test(prefix)) {\n                            add(prefix, obj[i]);\n                        } else {\n                            buildParams(prefix + '[' + (_typeof(obj[i]) === 'object' ? i : '') + ']', obj[i]);\n                        }\n                    }\n                } else if (obj && String(obj) === '[object Object]') {\n                    for (key in obj) {\n                        buildParams(prefix + '[' + key + ']', obj[key]);\n                    }\n                } else {\n                    add(prefix, obj);\n                }\n            } else if (isArray(obj)) {\n                for (i = 0, len = obj.length; i < len; i++) {\n                    add(obj[i].name, obj[i].value);\n                }\n            } else {\n                for (key in obj) {\n                    buildParams(key, obj[key]);\n                }\n            }\n            return s;\n        };\n\n        return buildParams('', a).join('&').replace(/%20/g, '+');\n    };\n\n    if (( false ? 'undefined' : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {\n        module.exports = param;\n    } else if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return param;\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n        global.param = param;\n    }\n})(undefined);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(94)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXBhcmFtL2pxdWVyeS1wYXJhbS5qcz81NWE0Il0sIm5hbWVzIjpbImdsb2JhbCIsInBhcmFtIiwiYSIsInMiLCJyYnJhY2tldCIsImlzQXJyYXkiLCJvYmoiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJhZGQiLCJrIiwidiIsInVuZGVmaW5lZCIsImxlbmd0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsImJ1aWxkUGFyYW1zIiwicHJlZml4IiwiaSIsImxlbiIsImtleSIsInRlc3QiLCJTdHJpbmciLCJuYW1lIiwidmFsdWUiLCJqb2luIiwicmVwbGFjZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZpbmUiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0FBR0MsV0FBVUEsTUFBVixFQUFrQjtBQUNmOztBQUVBLFFBQUlDLFFBQVEsU0FBUkEsS0FBUSxDQUFVQyxDQUFWLEVBQWE7QUFDckIsWUFBSUMsSUFBSSxFQUFSO0FBQUEsWUFBWUMsV0FBVyxPQUF2QjtBQUFBLFlBQ0lDLFVBQVUsU0FBVkEsT0FBVSxDQUFVQyxHQUFWLEVBQWU7QUFDckIsbUJBQU9DLE9BQU9DLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkosR0FBL0IsTUFBd0MsZ0JBQS9DO0FBQ0gsU0FITDtBQUFBLFlBR09LLE1BQU0sU0FBTkEsR0FBTSxDQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDckJBLGdCQUFJLE9BQU9BLENBQVAsS0FBYSxVQUFiLEdBQTBCQSxHQUExQixHQUFnQ0EsTUFBTSxJQUFOLEdBQWEsRUFBYixHQUFrQkEsTUFBTUMsU0FBTixHQUFrQixFQUFsQixHQUF1QkQsQ0FBN0U7QUFDQVYsY0FBRUEsRUFBRVksTUFBSixJQUFjQyxtQkFBbUJKLENBQW5CLElBQXdCLEdBQXhCLEdBQThCSSxtQkFBbUJILENBQW5CLENBQTVDO0FBQ0gsU0FOTDtBQUFBLFlBTU9JLGNBQWMsU0FBZEEsV0FBYyxDQUFVQyxNQUFWLEVBQWtCWixHQUFsQixFQUF1QjtBQUNwQyxnQkFBSWEsQ0FBSixFQUFPQyxHQUFQLEVBQVlDLEdBQVo7O0FBRUEsZ0JBQUlILE1BQUosRUFBWTtBQUNSLG9CQUFJYixRQUFRQyxHQUFSLENBQUosRUFBa0I7QUFDZCx5QkFBS2EsSUFBSSxDQUFKLEVBQU9DLE1BQU1kLElBQUlTLE1BQXRCLEVBQThCSSxJQUFJQyxHQUFsQyxFQUF1Q0QsR0FBdkMsRUFBNEM7QUFDeEMsNEJBQUlmLFNBQVNrQixJQUFULENBQWNKLE1BQWQsQ0FBSixFQUEyQjtBQUN2QlAsZ0NBQUlPLE1BQUosRUFBWVosSUFBSWEsQ0FBSixDQUFaO0FBQ0gseUJBRkQsTUFFTztBQUNIRix3Q0FBWUMsU0FBUyxHQUFULElBQWdCLFFBQU9aLElBQUlhLENBQUosQ0FBUCxNQUFrQixRQUFsQixHQUE2QkEsQ0FBN0IsR0FBaUMsRUFBakQsSUFBdUQsR0FBbkUsRUFBd0ViLElBQUlhLENBQUosQ0FBeEU7QUFDSDtBQUNKO0FBQ0osaUJBUkQsTUFRTyxJQUFJYixPQUFPaUIsT0FBT2pCLEdBQVAsTUFBZ0IsaUJBQTNCLEVBQThDO0FBQ2pELHlCQUFLZSxHQUFMLElBQVlmLEdBQVosRUFBaUI7QUFDYlcsb0NBQVlDLFNBQVMsR0FBVCxHQUFlRyxHQUFmLEdBQXFCLEdBQWpDLEVBQXNDZixJQUFJZSxHQUFKLENBQXRDO0FBQ0g7QUFDSixpQkFKTSxNQUlBO0FBQ0hWLHdCQUFJTyxNQUFKLEVBQVlaLEdBQVo7QUFDSDtBQUNKLGFBaEJELE1BZ0JPLElBQUlELFFBQVFDLEdBQVIsQ0FBSixFQUFrQjtBQUNyQixxQkFBS2EsSUFBSSxDQUFKLEVBQU9DLE1BQU1kLElBQUlTLE1BQXRCLEVBQThCSSxJQUFJQyxHQUFsQyxFQUF1Q0QsR0FBdkMsRUFBNEM7QUFDeENSLHdCQUFJTCxJQUFJYSxDQUFKLEVBQU9LLElBQVgsRUFBaUJsQixJQUFJYSxDQUFKLEVBQU9NLEtBQXhCO0FBQ0g7QUFDSixhQUpNLE1BSUE7QUFDSCxxQkFBS0osR0FBTCxJQUFZZixHQUFaLEVBQWlCO0FBQ2JXLGdDQUFZSSxHQUFaLEVBQWlCZixJQUFJZSxHQUFKLENBQWpCO0FBQ0g7QUFDSjtBQUNELG1CQUFPbEIsQ0FBUDtBQUNILFNBbkNMOztBQXFDQSxlQUFPYyxZQUFZLEVBQVosRUFBZ0JmLENBQWhCLEVBQW1Cd0IsSUFBbkIsQ0FBd0IsR0FBeEIsRUFBNkJDLE9BQTdCLENBQXFDLE1BQXJDLEVBQTZDLEdBQTdDLENBQVA7QUFDSCxLQXZDRDs7QUF5Q0EsUUFBSSxnQ0FBT0MsTUFBUCxPQUFrQixRQUFsQixJQUE4QixRQUFPQSxPQUFPQyxPQUFkLE1BQTBCLFFBQTVELEVBQXNFO0FBQ2xFRCxlQUFPQyxPQUFQLEdBQWlCNUIsS0FBakI7QUFDSCxLQUZELE1BRU8sSUFBSSxJQUFKLEVBQWdEO0FBQ25ENkIsUUFBQSxpQ0FBTyxFQUFQLGtDQUFXLFlBQVk7QUFDbkIsbUJBQU83QixLQUFQO0FBQ0gsU0FGRDtBQUFBO0FBR0gsS0FKTSxNQUlBO0FBQ0hELGVBQU9DLEtBQVAsR0FBZUEsS0FBZjtBQUNIO0FBRUosQ0F0REEsWUFBRCxDIiwiZmlsZSI6IjkzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJlc2VydmUganF1ZXJ5LXBhcmFtIChjKSAyMDE1IEtOT1dMRURHRUNPREUgfCBNSVRcbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgcGFyYW0gPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgcyA9IFtdLCByYnJhY2tldCA9IC9cXFtcXF0kLyxcbiAgICAgICAgICAgIGlzQXJyYXkgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgICAgICAgICAgfSwgYWRkID0gZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgICAgICAgICAgICB2ID0gdHlwZW9mIHYgPT09ICdmdW5jdGlvbicgPyB2KCkgOiB2ID09PSBudWxsID8gJycgOiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHY7XG4gICAgICAgICAgICAgICAgc1tzLmxlbmd0aF0gPSBlbmNvZGVVUklDb21wb25lbnQoaykgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodik7XG4gICAgICAgICAgICB9LCBidWlsZFBhcmFtcyA9IGZ1bmN0aW9uIChwcmVmaXgsIG9iaikge1xuICAgICAgICAgICAgICAgIHZhciBpLCBsZW4sIGtleTtcblxuICAgICAgICAgICAgICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gb2JqLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJicmFja2V0LnRlc3QocHJlZml4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGQocHJlZml4LCBvYmpbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkUGFyYW1zKHByZWZpeCArICdbJyArICh0eXBlb2Ygb2JqW2ldID09PSAnb2JqZWN0JyA/IGkgOiAnJykgKyAnXScsIG9ialtpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9iaiAmJiBTdHJpbmcob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkUGFyYW1zKHByZWZpeCArICdbJyArIGtleSArICddJywgb2JqW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkKHByZWZpeCwgb2JqKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IG9iai5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkKG9ialtpXS5uYW1lLCBvYmpbaV0udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWlsZFBhcmFtcyhrZXksIG9ialtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGJ1aWxkUGFyYW1zKCcnLCBhKS5qb2luKCcmJykucmVwbGFjZSgvJTIwL2csICcrJyk7XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gcGFyYW07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdsb2JhbC5wYXJhbSA9IHBhcmFtO1xuICAgIH1cblxufSh0aGlzKSk7XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9qcXVlcnktcGFyYW0vanF1ZXJ5LXBhcmFtLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///93\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nmodule.exports = function (module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function () {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, "loaded", {\n\t\t\tenumerable: true,\n\t\t\tget: function get() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, "id", {\n\t\t\tenumerable: true,\n\t\t\tget: function get() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJsIiwiaSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFTRCxNQUFULEVBQWlCO0FBQ2pDLEtBQUcsQ0FBQ0EsT0FBT0UsZUFBWCxFQUE0QjtBQUMzQkYsU0FBT0csU0FBUCxHQUFtQixZQUFXLENBQUUsQ0FBaEM7QUFDQUgsU0FBT0ksS0FBUCxHQUFlLEVBQWY7QUFDQTtBQUNBLE1BQUcsQ0FBQ0osT0FBT0ssUUFBWCxFQUFxQkwsT0FBT0ssUUFBUCxHQUFrQixFQUFsQjtBQUNyQkMsU0FBT0MsY0FBUCxDQUFzQlAsTUFBdEIsRUFBOEIsUUFBOUIsRUFBd0M7QUFDdkNRLGVBQVksSUFEMkI7QUFFdkNDLFFBQUssZUFBVztBQUNmLFdBQU9ULE9BQU9VLENBQWQ7QUFDQTtBQUpzQyxHQUF4QztBQU1BSixTQUFPQyxjQUFQLENBQXNCUCxNQUF0QixFQUE4QixJQUE5QixFQUFvQztBQUNuQ1EsZUFBWSxJQUR1QjtBQUVuQ0MsUUFBSyxlQUFXO0FBQ2YsV0FBT1QsT0FBT1csQ0FBZDtBQUNBO0FBSmtDLEdBQXBDO0FBTUFYLFNBQU9FLGVBQVAsR0FBeUIsQ0FBekI7QUFDQTtBQUNELFFBQU9GLE1BQVA7QUFDQSxDQXJCRCIsImZpbGUiOiI5NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///94\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvdGVzdFN1aXRlLmxlc3M/YzMwOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI5NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvc3R5bGUvdGVzdFN1aXRlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///95\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvaW5kZXgubGVzcz8wYzdkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ijk2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9zdHlsZS9pbmRleC5sZXNzXG4vLyBtb2R1bGUgaWQgPSA5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///96\n")},function(module,exports,__webpack_require__){eval('module.exports = "<div ng-controller=\\"LoginCtrl as $ctrl\\">\\r\\n    <img src=\\"" + __webpack_require__(98) + "\\">\\r\\n    <form ng-submit=\\"$ctrl.login()\\">\\r\\n        <input type=\\"email\\" ng-model=\\"$ctrl.loginObj.login\\" placeholder=\\"Email\\">\\r\\n        <input type=\\"password\\" ng-model=\\"$ctrl.loginObj.pwd\\" placeholder=\\"Password\\">\\r\\n        <button>Login</button>\\r\\n    </form>\\r\\n\\r\\n    <a ui-sref=\\"register\\">계정이 없어욧</a>\\r\\n</div>";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdGVtcGxhdGUvbG9naW4uaHRtbD83MzAxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ijk3LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgbmctY29udHJvbGxlcj1cXFwiTG9naW5DdHJsIGFzICRjdHJsXFxcIj5cXHJcXG4gICAgPGltZyBzcmM9XFxcIlwiICsgcmVxdWlyZShcIi4uL21lZGlhL2JyYW5kLnBuZ1wiKSArIFwiXFxcIj5cXHJcXG4gICAgPGZvcm0gbmctc3VibWl0PVxcXCIkY3RybC5sb2dpbigpXFxcIj5cXHJcXG4gICAgICAgIDxpbnB1dCB0eXBlPVxcXCJlbWFpbFxcXCIgbmctbW9kZWw9XFxcIiRjdHJsLmxvZ2luT2JqLmxvZ2luXFxcIiBwbGFjZWhvbGRlcj1cXFwiRW1haWxcXFwiPlxcclxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcInBhc3N3b3JkXFxcIiBuZy1tb2RlbD1cXFwiJGN0cmwubG9naW5PYmoucHdkXFxcIiBwbGFjZWhvbGRlcj1cXFwiUGFzc3dvcmRcXFwiPlxcclxcbiAgICAgICAgPGJ1dHRvbj5Mb2dpbjwvYnV0dG9uPlxcclxcbiAgICA8L2Zvcm0+XFxyXFxuXFxyXFxuICAgIDxhIHVpLXNyZWY9XFxcInJlZ2lzdGVyXFxcIj7qs4TsoJXsnbQg7JeG7Ja07JqnPC9hPlxcclxcbjwvZGl2PlwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3RlbXBsYXRlL2xvZ2luLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///97\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "37a88cb3b430c41b7c0f86f6fc2f8d29.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWVkaWEvYnJhbmQucG5nP2Q4MDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzN2E4OGNiM2I0MzBjNDFiN2MwZjg2ZjZmYzJmOGQyOS5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9tZWRpYS9icmFuZC5wbmdcbi8vIG1vZHVsZSBpZCA9IDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///98\n')},function(module,exports){eval('module.exports = "<div ng-controller=\\"RegisterCtrl as $ctrl\\">\\r\\n    <h2>Register</h2>\\r\\n    <form ng-submit=\\"$ctrl.register()\\">\\r\\n        <input type=\\"email\\" ng-model=\\"$ctrl.registerObj.login\\" placeholder=\\"Email\\">\\r\\n        <input type=\\"password\\" ng-model=\\"$ctrl.registerObj.pwd\\" placeholder=\\"Password\\">\\r\\n        <input type=\\"password\\" ng-model=\\"$ctrl.registerObj.pwdConfirm\\" placeholder=\\"Confirm password\\">\\r\\n        <button>Register</button>\\r\\n    </form>\\r\\n</div>";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdGVtcGxhdGUvcmVnaXN0ZXIuaHRtbD9jNjI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ijk5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgbmctY29udHJvbGxlcj1cXFwiUmVnaXN0ZXJDdHJsIGFzICRjdHJsXFxcIj5cXHJcXG4gICAgPGgyPlJlZ2lzdGVyPC9oMj5cXHJcXG4gICAgPGZvcm0gbmctc3VibWl0PVxcXCIkY3RybC5yZWdpc3RlcigpXFxcIj5cXHJcXG4gICAgICAgIDxpbnB1dCB0eXBlPVxcXCJlbWFpbFxcXCIgbmctbW9kZWw9XFxcIiRjdHJsLnJlZ2lzdGVyT2JqLmxvZ2luXFxcIiBwbGFjZWhvbGRlcj1cXFwiRW1haWxcXFwiPlxcclxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcInBhc3N3b3JkXFxcIiBuZy1tb2RlbD1cXFwiJGN0cmwucmVnaXN0ZXJPYmoucHdkXFxcIiBwbGFjZWhvbGRlcj1cXFwiUGFzc3dvcmRcXFwiPlxcclxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcInBhc3N3b3JkXFxcIiBuZy1tb2RlbD1cXFwiJGN0cmwucmVnaXN0ZXJPYmoucHdkQ29uZmlybVxcXCIgcGxhY2Vob2xkZXI9XFxcIkNvbmZpcm0gcGFzc3dvcmRcXFwiPlxcclxcbiAgICAgICAgPGJ1dHRvbj5SZWdpc3RlcjwvYnV0dG9uPlxcclxcbiAgICA8L2Zvcm0+XFxyXFxuPC9kaXY+XCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvdGVtcGxhdGUvcmVnaXN0ZXIuaHRtbFxuLy8gbW9kdWxlIGlkID0gOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///99\n')},function(module,exports){eval('module.exports = "<div ng-controller=\\"HomeCtrl as $ctrl\\">\\r\\n    <h1>Home</h1>\\r\\n    <p>My User ID is: <span ng-bind=\\"$ctrl.LoginSvc.uid\\"></span></p>\\r\\n    <p ng-click=\\"$ctrl.logout()\\">Logout</p>\\r\\n</div>";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdGVtcGxhdGUvaG9tZS5odG1sP2JhMGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTAwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgbmctY29udHJvbGxlcj1cXFwiSG9tZUN0cmwgYXMgJGN0cmxcXFwiPlxcclxcbiAgICA8aDE+SG9tZTwvaDE+XFxyXFxuICAgIDxwPk15IFVzZXIgSUQgaXM6IDxzcGFuIG5nLWJpbmQ9XFxcIiRjdHJsLkxvZ2luU3ZjLnVpZFxcXCI+PC9zcGFuPjwvcD5cXHJcXG4gICAgPHAgbmctY2xpY2s9XFxcIiRjdHJsLmxvZ291dCgpXFxcIj5Mb2dvdXQ8L3A+XFxyXFxuPC9kaXY+XCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvdGVtcGxhdGUvaG9tZS5odG1sXG4vLyBtb2R1bGUgaWQgPSAxMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///100\n')},function(module,exports){eval('module.exports = "<div ng-controller=\\"TestSuiteCtrl as $ctrl\\" class=\\"ts\\">\\r\\n    <h2 style=\\"color: red\\">TEST TEST TEST</h2>\\r\\n    <p style=\\"color: red\\">프로덕션에 포함하지 마시오</p>\\r\\n\\t<hr>\\r\\n\\t<div class=\\"help\\">\\r\\n\\t\\t<p>액션에는 액션명을 기입하시오. add_action(\'wp_ajax_${액션명}\', $callable) 여기에 등록한거</p>\\r\\n\\t\\t<p>매개변수에는 서버로 넘길 값을 입력하시오. \'키\'는 $_REQUEST의 인덱스($_REQUEST[\'key\']), \'값\'은 그 값.</p>\\r\\n\\t\\t<p>값은 무조건 POST로 넘어가니 GET이 필요한 경우 요청하시오.</p>\\r\\n\\t\\t<p>서버의 응답은 콘솔에서 확인할 수 있음. data가 \\"0\\"일 경우 액션을 잘 추가했는지, die 또는 exit을 사용했는지 확인하시오.</p>\\r\\n\\t</div>\\r\\n\\t<hr>\\r\\n    <form ng-submit=\\"$ctrl.submit()\\">\\r\\n        <input type=\\"text\\" ng-model=\\"$ctrl.action\\" placeholder=\\"액션\\" class=\\"action\\">\\r\\n\\t\\t<h3>매개변수</h3>\\r\\n        <div ng-repeat=\\"param in $ctrl.params\\">\\r\\n            <input type=\\"text\\" ng-model=\\"param.key\\" placeholder=\\"키\\" class=\\"key\\">\\r\\n            <input type=\\"text\\" ng-model=\\"param.value\\" placeholder=\\"값\\" class=\\"value\\">\\r\\n\\t\\t\\t<button type=\\"button\\" ng-click=\\"$ctrl.removeParam($index)\\" ng-if=\\"$ctrl.params.length\\" class=\\"remove\\">제거</button>\\r\\n        </div>\\r\\n\\t\\t<button ng-click=\\"$ctrl.addParam()\\" class=\\"add\\">매개변수 추가</button>\\r\\n\\t\\t<button type=\\"submit\\" class=\\"submit\\">실행</button>\\r\\n    </form>\\r\\n</div>";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdGVtcGxhdGUvdGVzdC5odG1sP2NmODQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseVFBQXlRLElBQUkiLCJmaWxlIjoiMTAxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgbmctY29udHJvbGxlcj1cXFwiVGVzdFN1aXRlQ3RybCBhcyAkY3RybFxcXCIgY2xhc3M9XFxcInRzXFxcIj5cXHJcXG4gICAgPGgyIHN0eWxlPVxcXCJjb2xvcjogcmVkXFxcIj5URVNUIFRFU1QgVEVTVDwvaDI+XFxyXFxuICAgIDxwIHN0eWxlPVxcXCJjb2xvcjogcmVkXFxcIj7tlITroZzrjZXshZjsl5Ag7Y+s7ZWo7ZWY7KeAIOuniOyLnOyYpDwvcD5cXHJcXG5cXHQ8aHI+XFxyXFxuXFx0PGRpdiBjbGFzcz1cXFwiaGVscFxcXCI+XFxyXFxuXFx0XFx0PHA+7JWh7IWY7JeQ64qUIOyVoeyFmOuqheydhCDquLDsnoXtlZjsi5zsmKQuIGFkZF9hY3Rpb24oJ3dwX2FqYXhfJHvslaHshZjrqoV9JywgJGNhbGxhYmxlKSDsl6zquLDsl5Ag65Ox66Gd7ZWc6rGwPC9wPlxcclxcblxcdFxcdDxwPuunpOqwnOuzgOyImOyXkOuKlCDshJzrsoTroZwg64SY6ri4IOqwkuydhCDsnoXroKXtlZjsi5zsmKQuICftgqQn64qUICRfUkVRVUVTVOydmCDsnbjrjbHsiqQoJF9SRVFVRVNUWydrZXknXSksICfqsJIn7J2AIOq3uCDqsJIuPC9wPlxcclxcblxcdFxcdDxwPuqwkuydgCDrrLTsobDqsbQgUE9TVOuhnCDrhJjslrTqsIDri4ggR0VU7J20IO2VhOyalO2VnCDqsr3smrAg7JqU7LKt7ZWY7Iuc7JikLjwvcD5cXHJcXG5cXHRcXHQ8cD7shJzrsoTsnZgg7J2R64u17J2AIOy9mOyGlOyXkOyEnCDtmZXsnbjtlaAg7IiYIOyeiOydjC4gZGF0YeqwgCBcXFwiMFxcXCLsnbwg6rK97JqwIOyVoeyFmOydhCDsnpgg7LaU6rCA7ZaI64qU7KeALCBkaWUg65iQ64qUIGV4aXTsnYQg7IKs7Jqp7ZaI64qU7KeAIO2ZleyduO2VmOyLnOyYpC48L3A+XFxyXFxuXFx0PC9kaXY+XFxyXFxuXFx0PGhyPlxcclxcbiAgICA8Zm9ybSBuZy1zdWJtaXQ9XFxcIiRjdHJsLnN1Ym1pdCgpXFxcIj5cXHJcXG4gICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuZy1tb2RlbD1cXFwiJGN0cmwuYWN0aW9uXFxcIiBwbGFjZWhvbGRlcj1cXFwi7JWh7IWYXFxcIiBjbGFzcz1cXFwiYWN0aW9uXFxcIj5cXHJcXG5cXHRcXHQ8aDM+66ek6rCc67OA7IiYPC9oMz5cXHJcXG4gICAgICAgIDxkaXYgbmctcmVwZWF0PVxcXCJwYXJhbSBpbiAkY3RybC5wYXJhbXNcXFwiPlxcclxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuZy1tb2RlbD1cXFwicGFyYW0ua2V5XFxcIiBwbGFjZWhvbGRlcj1cXFwi7YKkXFxcIiBjbGFzcz1cXFwia2V5XFxcIj5cXHJcXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgbmctbW9kZWw9XFxcInBhcmFtLnZhbHVlXFxcIiBwbGFjZWhvbGRlcj1cXFwi6rCSXFxcIiBjbGFzcz1cXFwidmFsdWVcXFwiPlxcclxcblxcdFxcdFxcdDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBuZy1jbGljaz1cXFwiJGN0cmwucmVtb3ZlUGFyYW0oJGluZGV4KVxcXCIgbmctaWY9XFxcIiRjdHJsLnBhcmFtcy5sZW5ndGhcXFwiIGNsYXNzPVxcXCJyZW1vdmVcXFwiPuygnOqxsDwvYnV0dG9uPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuXFx0XFx0PGJ1dHRvbiBuZy1jbGljaz1cXFwiJGN0cmwuYWRkUGFyYW0oKVxcXCIgY2xhc3M9XFxcImFkZFxcXCI+66ek6rCc67OA7IiYIOy2lOqwgDwvYnV0dG9uPlxcclxcblxcdFxcdDxidXR0b24gdHlwZT1cXFwic3VibWl0XFxcIiBjbGFzcz1cXFwic3VibWl0XFxcIj7si6Ttlok8L2J1dHRvbj5cXHJcXG4gICAgPC9mb3JtPlxcclxcbjwvZGl2PlwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3RlbXBsYXRlL3Rlc3QuaHRtbFxuLy8gbW9kdWxlIGlkID0gMTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///101\n')}]);